// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sj/xfgd.proto

package protobuf.clazz.xfgd;

public final class xfgdRsp {
  private xfgdRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface OutCardDataXfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 3;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 4;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 5;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 6;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 7;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 8;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 display_time = 9;
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated .Int32ArrayResponse hand_card_data = 10;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    int getHandCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index);

    // repeated int32 hand_card_count = 11;
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    int getHandCardCount(int index);

    // optional int32 max_value_seat = 12;
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    boolean hasMaxValueSeat();
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    int getMaxValueSeat();

    // repeated int32 user_can_out_data = 13;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 14;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    int getUserCanOutCount();

    // optional int32 is_current_first_out = 15;
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 killing_seat = 16;
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    boolean hasKillingSeat();
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    int getKillingSeat();

    // optional int32 killed_seat = 17;
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    boolean hasKilledSeat();
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    int getKilledSeat();

    // optional bool isround = 18;
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    boolean hasIsround();
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    boolean getIsround();

    // repeated int32 card_data_failure = 19;
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataFailureList();
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    int getCardDataFailureCount();
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    int getCardDataFailure(int index);
  }
  /**
   * Protobuf type {@code xfgd.OutCardDataXfgd}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataXfgd extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataXfgdOrBuilder {
    // Use OutCardDataXfgd.newBuilder() to construct.
    private OutCardDataXfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataXfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataXfgd defaultInstance;
    public static OutCardDataXfgd getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataXfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataXfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              displayTime_ = input.readInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000200;
              }
              handCardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              maxValueSeat_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              killingSeat_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000800;
              killedSeat_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00001000;
              isround_ = input.readBool();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardDataFailure_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardDataFailure_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = java.util.Collections.unmodifiableList(cardDataFailure_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_OutCardDataXfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_OutCardDataXfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.class, protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataXfgd> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataXfgd>() {
      public OutCardDataXfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataXfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataXfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 3;
    public static final int CARDS_COUNT_FIELD_NUMBER = 3;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 5;
    public static final int CUR_PLAYER_FIELD_NUMBER = 5;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 6;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 7;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 7;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 8;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 8;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 display_time = 9;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 9;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated .Int32ArrayResponse hand_card_data = 10;
    public static final int HAND_CARD_DATA_FIELD_NUMBER = 10;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public int getHandCardDataCount() {
      return handCardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
      return handCardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index) {
      return handCardData_.get(index);
    }

    // repeated int32 hand_card_count = 11;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // optional int32 max_value_seat = 12;
    public static final int MAX_VALUE_SEAT_FIELD_NUMBER = 12;
    private int maxValueSeat_;
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public boolean hasMaxValueSeat() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public int getMaxValueSeat() {
      return maxValueSeat_;
    }

    // repeated int32 user_can_out_data = 13;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 14;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 14;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // optional int32 is_current_first_out = 15;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 15;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 killing_seat = 16;
    public static final int KILLING_SEAT_FIELD_NUMBER = 16;
    private int killingSeat_;
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    public boolean hasKillingSeat() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    public int getKillingSeat() {
      return killingSeat_;
    }

    // optional int32 killed_seat = 17;
    public static final int KILLED_SEAT_FIELD_NUMBER = 17;
    private int killedSeat_;
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    public boolean hasKilledSeat() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    public int getKilledSeat() {
      return killedSeat_;
    }

    // optional bool isround = 18;
    public static final int ISROUND_FIELD_NUMBER = 18;
    private boolean isround_;
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    public boolean hasIsround() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    public boolean getIsround() {
      return isround_;
    }

    // repeated int32 card_data_failure = 19;
    public static final int CARD_DATA_FAILURE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> cardDataFailure_;
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataFailureList() {
      return cardDataFailure_;
    }
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public int getCardDataFailureCount() {
      return cardDataFailure_.size();
    }
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public int getCardDataFailure(int index) {
      return cardDataFailure_.get(index);
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      displayTime_ = 0;
      handCardData_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      maxValueSeat_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      isCurrentFirstOut_ = 0;
      killingSeat_ = 0;
      killedSeat_ = 0;
      isround_ = false;
      cardDataFailure_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(6, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        output.writeMessage(10, handCardData_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(11, handCardCount_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, maxValueSeat_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(13, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(15, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(16, killingSeat_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(17, killedSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(18, isround_);
      }
      for (int i = 0; i < cardDataFailure_.size(); i++) {
        output.writeInt32(19, cardDataFailure_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, handCardData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, maxValueSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, killingSeat_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, killedSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, isround_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardDataFailure_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardDataFailure_.get(i));
        }
        size += dataSize;
        size += 2 * getCardDataFailureList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.OutCardDataXfgd}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_OutCardDataXfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_OutCardDataXfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.class, protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          handCardDataBuilder_.clear();
        }
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        maxValueSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        killingSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        killedSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        isround_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        cardDataFailure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_OutCardDataXfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd result = new protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.displayTime_ = displayTime_;
        if (handCardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.handCardData_ = handCardData_;
        } else {
          result.handCardData_ = handCardDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.handCardCount_ = handCardCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.maxValueSeat_ = maxValueSeat_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.killingSeat_ = killingSeat_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.killedSeat_ = killedSeat_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.isround_ = isround_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = java.util.Collections.unmodifiableList(cardDataFailure_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.cardDataFailure_ = cardDataFailure_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (handCardDataBuilder_ == null) {
          if (!other.handCardData_.isEmpty()) {
            if (handCardData_.isEmpty()) {
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureHandCardDataIsMutable();
              handCardData_.addAll(other.handCardData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardData_.isEmpty()) {
            if (handCardDataBuilder_.isEmpty()) {
              handCardDataBuilder_.dispose();
              handCardDataBuilder_ = null;
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00000200);
              handCardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardDataFieldBuilder() : null;
            } else {
              handCardDataBuilder_.addAllMessages(other.handCardData_);
            }
          }
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (other.hasMaxValueSeat()) {
          setMaxValueSeat(other.getMaxValueSeat());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasKillingSeat()) {
          setKillingSeat(other.getKillingSeat());
        }
        if (other.hasKilledSeat()) {
          setKilledSeat(other.getKilledSeat());
        }
        if (other.hasIsround()) {
          setIsround(other.getIsround());
        }
        if (!other.cardDataFailure_.isEmpty()) {
          if (cardDataFailure_.isEmpty()) {
            cardDataFailure_ = other.cardDataFailure_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureCardDataFailureIsMutable();
            cardDataFailure_.addAll(other.cardDataFailure_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.OutCardDataXfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 3;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000004;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 4;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 5;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000010;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 6;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 7;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000040;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 8;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000080;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 9;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000100;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_card_data = 10;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardData_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
        if (handCardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardData_);
        } else {
          return handCardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public int getHandCardDataCount() {
        if (handCardDataBuilder_ == null) {
          return handCardData_.size();
        } else {
          return handCardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);
        } else {
          return handCardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.set(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addAllHandCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          super.addAll(values, handCardData_);
          onChanged();
        } else {
          handCardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder clearHandCardData() {
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          handCardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder removeHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.remove(index);
          onChanged();
        } else {
          handCardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
          int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);  } else {
          return handCardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardDataOrBuilderList() {
        if (handCardDataBuilder_ != null) {
          return handCardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder() {
        return getHandCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardDataBuilderList() {
        return getHandCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardDataFieldBuilder() {
        if (handCardDataBuilder_ == null) {
          handCardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardData_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          handCardData_ = null;
        }
        return handCardDataBuilder_;
      }

      // repeated int32 hand_card_count = 11;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 max_value_seat = 12;
      private int maxValueSeat_ ;
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public boolean hasMaxValueSeat() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public int getMaxValueSeat() {
        return maxValueSeat_;
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder setMaxValueSeat(int value) {
        bitField0_ |= 0x00000800;
        maxValueSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder clearMaxValueSeat() {
        bitField0_ = (bitField0_ & ~0x00000800);
        maxValueSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 13;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 14;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00002000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00002000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 15;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00004000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 killing_seat = 16;
      private int killingSeat_ ;
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public boolean hasKillingSeat() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public int getKillingSeat() {
        return killingSeat_;
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public Builder setKillingSeat(int value) {
        bitField0_ |= 0x00008000;
        killingSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public Builder clearKillingSeat() {
        bitField0_ = (bitField0_ & ~0x00008000);
        killingSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 killed_seat = 17;
      private int killedSeat_ ;
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public boolean hasKilledSeat() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public int getKilledSeat() {
        return killedSeat_;
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public Builder setKilledSeat(int value) {
        bitField0_ |= 0x00010000;
        killedSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public Builder clearKilledSeat() {
        bitField0_ = (bitField0_ & ~0x00010000);
        killedSeat_ = 0;
        onChanged();
        return this;
      }

      // optional bool isround = 18;
      private boolean isround_ ;
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public boolean hasIsround() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public boolean getIsround() {
        return isround_;
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public Builder setIsround(boolean value) {
        bitField0_ |= 0x00020000;
        isround_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public Builder clearIsround() {
        bitField0_ = (bitField0_ & ~0x00020000);
        isround_ = false;
        onChanged();
        return this;
      }

      // repeated int32 card_data_failure = 19;
      private java.util.List<java.lang.Integer> cardDataFailure_ = java.util.Collections.emptyList();
      private void ensureCardDataFailureIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>(cardDataFailure_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataFailureList() {
        return java.util.Collections.unmodifiableList(cardDataFailure_);
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public int getCardDataFailureCount() {
        return cardDataFailure_.size();
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public int getCardDataFailure(int index) {
        return cardDataFailure_.get(index);
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder setCardDataFailure(
          int index, int value) {
        ensureCardDataFailureIsMutable();
        cardDataFailure_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder addCardDataFailure(int value) {
        ensureCardDataFailureIsMutable();
        cardDataFailure_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder addAllCardDataFailure(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataFailureIsMutable();
        super.addAll(values, cardDataFailure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder clearCardDataFailure() {
        cardDataFailure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.OutCardDataXfgd)
    }

    static {
      defaultInstance = new OutCardDataXfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.OutCardDataXfgd)
  }

  public interface PukeGameEndXfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 player_num = 6;
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 7;
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 8;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 game_score = 9;
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameScoreList();
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getGameScoreCount();
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getGameScore(int index);

    // repeated int32 init_di_pai = 18;
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getInitDiPaiList();
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    int getInitDiPaiCount();
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    int getInitDiPai(int index);

    // repeated int32 banker_mai_pai = 19;
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getBankerMaiPaiList();
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    int getBankerMaiPaiCount();
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    int getBankerMaiPai(int index);

    // optional int32 zhua_fen = 20;
    /**
     * <code>optional int32 zhua_fen = 20;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    boolean hasZhuaFen();
    /**
     * <code>optional int32 zhua_fen = 20;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getZhuaFen();

    // optional int32 bei_shu = 21;
    /**
     * <code>optional int32 bei_shu = 21;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasBeiShu();
    /**
     * <code>optional int32 bei_shu = 21;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getBeiShu();

    // optional int32 jiao_fen = 22;
    /**
     * <code>optional int32 jiao_fen = 22;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    boolean hasJiaoFen();
    /**
     * <code>optional int32 jiao_fen = 22;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    int getJiaoFen();

    // optional bool is_man_tou_bao = 23;
    /**
     * <code>optional bool is_man_tou_bao = 23;</code>
     *
     * <pre>
     *是否满头包
     * </pre>
     */
    boolean hasIsManTouBao();
    /**
     * <code>optional bool is_man_tou_bao = 23;</code>
     *
     * <pre>
     *是否满头包
     * </pre>
     */
    boolean getIsManTouBao();

    // optional int32 score_reason = 24;
    /**
     * <code>optional int32 score_reason = 24;</code>
     *
     * <pre>
     *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
     * </pre>
     */
    boolean hasScoreReason();
    /**
     * <code>optional int32 score_reason = 24;</code>
     *
     * <pre>
     *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
     * </pre>
     */
    int getScoreReason();

    // repeated int32 all_end_score = 10;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated .RoomPlayerResponse players = 17;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code xfgd.PukeGameEndXfgd}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndXfgd extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndXfgdOrBuilder {
    // Use PukeGameEndXfgd.newBuilder() to construct.
    private PukeGameEndXfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndXfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndXfgd defaultInstance;
    public static PukeGameEndXfgd getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndXfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndXfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                gameScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              gameScore_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                gameScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                initDiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              initDiPai_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                initDiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                initDiPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              bankerMaiPai_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                bankerMaiPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000040;
              zhuaFen_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000080;
              beiShu_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00000100;
              jiaoFen_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00000200;
              isManTouBao_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00000400;
              scoreReason_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          gameScore_ = java.util.Collections.unmodifiableList(gameScore_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = java.util.Collections.unmodifiableList(initDiPai_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = java.util.Collections.unmodifiableList(bankerMaiPai_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_PukeGameEndXfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_PukeGameEndXfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.class, protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndXfgd> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndXfgd>() {
      public PukeGameEndXfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndXfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndXfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 player_num = 6;
    public static final int PLAYER_NUM_FIELD_NUMBER = 6;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 7;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 7;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 8;
    public static final int REASON_FIELD_NUMBER = 8;
    private int reason_;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 game_score = 9;
    public static final int GAME_SCORE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> gameScore_;
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameScoreList() {
      return gameScore_;
    }
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getGameScoreCount() {
      return gameScore_.size();
    }
    /**
     * <code>repeated int32 game_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getGameScore(int index) {
      return gameScore_.get(index);
    }

    // repeated int32 init_di_pai = 18;
    public static final int INIT_DI_PAI_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> initDiPai_;
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInitDiPaiList() {
      return initDiPai_;
    }
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public int getInitDiPaiCount() {
      return initDiPai_.size();
    }
    /**
     * <code>repeated int32 init_di_pai = 18;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public int getInitDiPai(int index) {
      return initDiPai_.get(index);
    }

    // repeated int32 banker_mai_pai = 19;
    public static final int BANKER_MAI_PAI_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> bankerMaiPai_;
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBankerMaiPaiList() {
      return bankerMaiPai_;
    }
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public int getBankerMaiPaiCount() {
      return bankerMaiPai_.size();
    }
    /**
     * <code>repeated int32 banker_mai_pai = 19;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public int getBankerMaiPai(int index) {
      return bankerMaiPai_.get(index);
    }

    // optional int32 zhua_fen = 20;
    public static final int ZHUA_FEN_FIELD_NUMBER = 20;
    private int zhuaFen_;
    /**
     * <code>optional int32 zhua_fen = 20;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public boolean hasZhuaFen() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 zhua_fen = 20;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getZhuaFen() {
      return zhuaFen_;
    }

    // optional int32 bei_shu = 21;
    public static final int BEI_SHU_FIELD_NUMBER = 21;
    private int beiShu_;
    /**
     * <code>optional int32 bei_shu = 21;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasBeiShu() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 bei_shu = 21;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getBeiShu() {
      return beiShu_;
    }

    // optional int32 jiao_fen = 22;
    public static final int JIAO_FEN_FIELD_NUMBER = 22;
    private int jiaoFen_;
    /**
     * <code>optional int32 jiao_fen = 22;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public boolean hasJiaoFen() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 jiao_fen = 22;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public int getJiaoFen() {
      return jiaoFen_;
    }

    // optional bool is_man_tou_bao = 23;
    public static final int IS_MAN_TOU_BAO_FIELD_NUMBER = 23;
    private boolean isManTouBao_;
    /**
     * <code>optional bool is_man_tou_bao = 23;</code>
     *
     * <pre>
     *是否满头包
     * </pre>
     */
    public boolean hasIsManTouBao() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool is_man_tou_bao = 23;</code>
     *
     * <pre>
     *是否满头包
     * </pre>
     */
    public boolean getIsManTouBao() {
      return isManTouBao_;
    }

    // optional int32 score_reason = 24;
    public static final int SCORE_REASON_FIELD_NUMBER = 24;
    private int scoreReason_;
    /**
     * <code>optional int32 score_reason = 24;</code>
     *
     * <pre>
     *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
     * </pre>
     */
    public boolean hasScoreReason() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 score_reason = 24;</code>
     *
     * <pre>
     *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
     * </pre>
     */
    public int getScoreReason() {
      return scoreReason_;
    }

    // repeated int32 all_end_score = 10;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated .RoomPlayerResponse players = 17;
    public static final int PLAYERS_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      gameScore_ = java.util.Collections.emptyList();
      initDiPai_ = java.util.Collections.emptyList();
      bankerMaiPai_ = java.util.Collections.emptyList();
      zhuaFen_ = 0;
      beiShu_ = 0;
      jiaoFen_ = 0;
      isManTouBao_ = false;
      scoreReason_ = 0;
      allEndScore_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, reason_);
      }
      for (int i = 0; i < gameScore_.size(); i++) {
        output.writeInt32(9, gameScore_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(10, allEndScore_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(17, players_.get(i));
      }
      for (int i = 0; i < initDiPai_.size(); i++) {
        output.writeInt32(18, initDiPai_.get(i));
      }
      for (int i = 0; i < bankerMaiPai_.size(); i++) {
        output.writeInt32(19, bankerMaiPai_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(20, zhuaFen_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(21, beiShu_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(22, jiaoFen_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(23, isManTouBao_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(24, scoreReason_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameScore_.get(i));
        }
        size += dataSize;
        size += 1 * getGameScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < initDiPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(initDiPai_.get(i));
        }
        size += dataSize;
        size += 2 * getInitDiPaiList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bankerMaiPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bankerMaiPai_.get(i));
        }
        size += dataSize;
        size += 2 * getBankerMaiPaiList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, zhuaFen_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, beiShu_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, jiaoFen_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, isManTouBao_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, scoreReason_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.PukeGameEndXfgd}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_PukeGameEndXfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_PukeGameEndXfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.class, protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        gameScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        initDiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        bankerMaiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        zhuaFen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        beiShu_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        jiaoFen_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isManTouBao_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        scoreReason_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_PukeGameEndXfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd result = new protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          gameScore_ = java.util.Collections.unmodifiableList(gameScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.gameScore_ = gameScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = java.util.Collections.unmodifiableList(initDiPai_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.initDiPai_ = initDiPai_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = java.util.Collections.unmodifiableList(bankerMaiPai_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.bankerMaiPai_ = bankerMaiPai_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.zhuaFen_ = zhuaFen_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.beiShu_ = beiShu_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.jiaoFen_ = jiaoFen_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isManTouBao_ = isManTouBao_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.scoreReason_ = scoreReason_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.allEndScore_ = allEndScore_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.gameScore_.isEmpty()) {
          if (gameScore_.isEmpty()) {
            gameScore_ = other.gameScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureGameScoreIsMutable();
            gameScore_.addAll(other.gameScore_);
          }
          onChanged();
        }
        if (!other.initDiPai_.isEmpty()) {
          if (initDiPai_.isEmpty()) {
            initDiPai_ = other.initDiPai_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureInitDiPaiIsMutable();
            initDiPai_.addAll(other.initDiPai_);
          }
          onChanged();
        }
        if (!other.bankerMaiPai_.isEmpty()) {
          if (bankerMaiPai_.isEmpty()) {
            bankerMaiPai_ = other.bankerMaiPai_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBankerMaiPaiIsMutable();
            bankerMaiPai_.addAll(other.bankerMaiPai_);
          }
          onChanged();
        }
        if (other.hasZhuaFen()) {
          setZhuaFen(other.getZhuaFen());
        }
        if (other.hasBeiShu()) {
          setBeiShu(other.getBeiShu());
        }
        if (other.hasJiaoFen()) {
          setJiaoFen(other.getJiaoFen());
        }
        if (other.hasIsManTouBao()) {
          setIsManTouBao(other.getIsManTouBao());
        }
        if (other.hasScoreReason()) {
          setScoreReason(other.getScoreReason());
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.PukeGameEndXfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 player_num = 6;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000020;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000020);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 7;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000040;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 8;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000080;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 game_score = 9;
      private java.util.List<java.lang.Integer> gameScore_ = java.util.Collections.emptyList();
      private void ensureGameScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          gameScore_ = new java.util.ArrayList<java.lang.Integer>(gameScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameScoreList() {
        return java.util.Collections.unmodifiableList(gameScore_);
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getGameScoreCount() {
        return gameScore_.size();
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getGameScore(int index) {
        return gameScore_.get(index);
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setGameScore(
          int index, int value) {
        ensureGameScoreIsMutable();
        gameScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addGameScore(int value) {
        ensureGameScoreIsMutable();
        gameScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllGameScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameScoreIsMutable();
        super.addAll(values, gameScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearGameScore() {
        gameScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 init_di_pai = 18;
      private java.util.List<java.lang.Integer> initDiPai_ = java.util.Collections.emptyList();
      private void ensureInitDiPaiIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = new java.util.ArrayList<java.lang.Integer>(initDiPai_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInitDiPaiList() {
        return java.util.Collections.unmodifiableList(initDiPai_);
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public int getInitDiPaiCount() {
        return initDiPai_.size();
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public int getInitDiPai(int index) {
        return initDiPai_.get(index);
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder setInitDiPai(
          int index, int value) {
        ensureInitDiPaiIsMutable();
        initDiPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder addInitDiPai(int value) {
        ensureInitDiPaiIsMutable();
        initDiPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder addAllInitDiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInitDiPaiIsMutable();
        super.addAll(values, initDiPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 18;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder clearInitDiPai() {
        initDiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 banker_mai_pai = 19;
      private java.util.List<java.lang.Integer> bankerMaiPai_ = java.util.Collections.emptyList();
      private void ensureBankerMaiPaiIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>(bankerMaiPai_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBankerMaiPaiList() {
        return java.util.Collections.unmodifiableList(bankerMaiPai_);
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public int getBankerMaiPaiCount() {
        return bankerMaiPai_.size();
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public int getBankerMaiPai(int index) {
        return bankerMaiPai_.get(index);
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder setBankerMaiPai(
          int index, int value) {
        ensureBankerMaiPaiIsMutable();
        bankerMaiPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder addBankerMaiPai(int value) {
        ensureBankerMaiPaiIsMutable();
        bankerMaiPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder addAllBankerMaiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBankerMaiPaiIsMutable();
        super.addAll(values, bankerMaiPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 19;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder clearBankerMaiPai() {
        bankerMaiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 zhua_fen = 20;
      private int zhuaFen_ ;
      /**
       * <code>optional int32 zhua_fen = 20;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public boolean hasZhuaFen() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 zhua_fen = 20;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getZhuaFen() {
        return zhuaFen_;
      }
      /**
       * <code>optional int32 zhua_fen = 20;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setZhuaFen(int value) {
        bitField0_ |= 0x00000800;
        zhuaFen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhua_fen = 20;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearZhuaFen() {
        bitField0_ = (bitField0_ & ~0x00000800);
        zhuaFen_ = 0;
        onChanged();
        return this;
      }

      // optional int32 bei_shu = 21;
      private int beiShu_ ;
      /**
       * <code>optional int32 bei_shu = 21;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasBeiShu() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 bei_shu = 21;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getBeiShu() {
        return beiShu_;
      }
      /**
       * <code>optional int32 bei_shu = 21;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setBeiShu(int value) {
        bitField0_ |= 0x00001000;
        beiShu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bei_shu = 21;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearBeiShu() {
        bitField0_ = (bitField0_ & ~0x00001000);
        beiShu_ = 0;
        onChanged();
        return this;
      }

      // optional int32 jiao_fen = 22;
      private int jiaoFen_ ;
      /**
       * <code>optional int32 jiao_fen = 22;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public boolean hasJiaoFen() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 jiao_fen = 22;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public int getJiaoFen() {
        return jiaoFen_;
      }
      /**
       * <code>optional int32 jiao_fen = 22;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder setJiaoFen(int value) {
        bitField0_ |= 0x00002000;
        jiaoFen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 jiao_fen = 22;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder clearJiaoFen() {
        bitField0_ = (bitField0_ & ~0x00002000);
        jiaoFen_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_man_tou_bao = 23;
      private boolean isManTouBao_ ;
      /**
       * <code>optional bool is_man_tou_bao = 23;</code>
       *
       * <pre>
       *是否满头包
       * </pre>
       */
      public boolean hasIsManTouBao() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool is_man_tou_bao = 23;</code>
       *
       * <pre>
       *是否满头包
       * </pre>
       */
      public boolean getIsManTouBao() {
        return isManTouBao_;
      }
      /**
       * <code>optional bool is_man_tou_bao = 23;</code>
       *
       * <pre>
       *是否满头包
       * </pre>
       */
      public Builder setIsManTouBao(boolean value) {
        bitField0_ |= 0x00004000;
        isManTouBao_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_man_tou_bao = 23;</code>
       *
       * <pre>
       *是否满头包
       * </pre>
       */
      public Builder clearIsManTouBao() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isManTouBao_ = false;
        onChanged();
        return this;
      }

      // optional int32 score_reason = 24;
      private int scoreReason_ ;
      /**
       * <code>optional int32 score_reason = 24;</code>
       *
       * <pre>
       *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
       * </pre>
       */
      public boolean hasScoreReason() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 score_reason = 24;</code>
       *
       * <pre>
       *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
       * </pre>
       */
      public int getScoreReason() {
        return scoreReason_;
      }
      /**
       * <code>optional int32 score_reason = 24;</code>
       *
       * <pre>
       *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
       * </pre>
       */
      public Builder setScoreReason(int value) {
        bitField0_ |= 0x00008000;
        scoreReason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score_reason = 24;</code>
       *
       * <pre>
       *分数类型 0：平局 1：保底 2：破庄 3：倒光 4：大光 5：投降
       * </pre>
       */
      public Builder clearScoreReason() {
        bitField0_ = (bitField0_ & ~0x00008000);
        scoreReason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 10;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 17;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.PukeGameEndXfgd)
    }

    static {
      defaultInstance = new PukeGameEndXfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.PukeGameEndXfgd)
  }

  public interface TableResponse_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 out_cards_type = 7;
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsTypeList();
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    int getOutCardsTypeCount();
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    int getOutCardsType(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 11;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 12;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 13;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 14;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 15;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 17;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 18;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 19;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 20;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    int getUserCanOutCount();

    // optional int32 zhu_type = 21;
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // optional int32 max_card_seat = 22;
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    boolean hasMaxCardSeat();
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    int getMaxCardSeat();

    // repeated int32 select_dang = 23;
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    java.util.List<java.lang.Integer> getSelectDangList();
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    int getSelectDangCount();
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    int getSelectDang(int index);

    // optional int32 call_dang = 24;
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    boolean hasCallDang();
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    int getCallDang();
  }
  /**
   * Protobuf type {@code xfgd.TableResponse_Xfgd}
   */
  public static final class TableResponse_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_XfgdOrBuilder {
    // Use TableResponse_Xfgd.newBuilder() to construct.
    private TableResponse_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_Xfgd defaultInstance;
    public static TableResponse_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsType_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 138: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000400;
              zhuType_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00000800;
              maxCardSeat_ = input.readInt32();
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                selectDang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              selectDang_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                selectDang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                selectDang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00001000;
              callDang_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = java.util.Collections.unmodifiableList(outCardsType_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = java.util.Collections.unmodifiableList(selectDang_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableResponse_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableResponse_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_Xfgd>() {
      public TableResponse_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 out_cards_type = 7;
    public static final int OUT_CARDS_TYPE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsType_;
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsTypeList() {
      return outCardsType_;
    }
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public int getOutCardsTypeCount() {
      return outCardsType_.size();
    }
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public int getOutCardsType(int index) {
      return outCardsType_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 11;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 11;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 12;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 12;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 13;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 13;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 14;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 14;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 15;
    public static final int CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 16;
    public static final int CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 17;
    public static final int ROOM_INFO_FIELD_NUMBER = 17;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 18;
    public static final int PLAYERS_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 19;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 20;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 20;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // optional int32 zhu_type = 21;
    public static final int ZHU_TYPE_FIELD_NUMBER = 21;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // optional int32 max_card_seat = 22;
    public static final int MAX_CARD_SEAT_FIELD_NUMBER = 22;
    private int maxCardSeat_;
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public boolean hasMaxCardSeat() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public int getMaxCardSeat() {
      return maxCardSeat_;
    }

    // repeated int32 select_dang = 23;
    public static final int SELECT_DANG_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> selectDang_;
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSelectDangList() {
      return selectDang_;
    }
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public int getSelectDangCount() {
      return selectDang_.size();
    }
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public int getSelectDang(int index) {
      return selectDang_.get(index);
    }

    // optional int32 call_dang = 24;
    public static final int CALL_DANG_FIELD_NUMBER = 24;
    private int callDang_;
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    public boolean hasCallDang() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    public int getCallDang() {
      return callDang_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      outCardsType_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      zhuType_ = 0;
      maxCardSeat_ = 0;
      selectDang_ = java.util.Collections.emptyList();
      callDang_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < outCardsType_.size(); i++) {
        output.writeInt32(7, outCardsType_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(14, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(15, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(18, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(19, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(21, zhuType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(22, maxCardSeat_);
      }
      for (int i = 0; i < selectDang_.size(); i++) {
        output.writeInt32(23, selectDang_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(24, callDang_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsType_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, zhuType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, maxCardSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < selectDang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(selectDang_.get(i));
        }
        size += dataSize;
        size += 2 * getSelectDangList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, callDang_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.TableResponse_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.TableResponse_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableResponse_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableResponse_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        outCardsType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        maxCardSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        selectDang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        callDang_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableResponse_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = java.util.Collections.unmodifiableList(outCardsType_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsType_ = outCardsType_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.zhuType_ = zhuType_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.maxCardSeat_ = maxCardSeat_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = java.util.Collections.unmodifiableList(selectDang_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.selectDang_ = selectDang_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.callDang_ = callDang_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.outCardsType_.isEmpty()) {
          if (outCardsType_.isEmpty()) {
            outCardsType_ = other.outCardsType_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsTypeIsMutable();
            outCardsType_.addAll(other.outCardsType_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (other.hasMaxCardSeat()) {
          setMaxCardSeat(other.getMaxCardSeat());
        }
        if (!other.selectDang_.isEmpty()) {
          if (selectDang_.isEmpty()) {
            selectDang_ = other.selectDang_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureSelectDangIsMutable();
            selectDang_.addAll(other.selectDang_);
          }
          onChanged();
        }
        if (other.hasCallDang()) {
          setCallDang(other.getCallDang());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.TableResponse_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 out_cards_type = 7;
      private java.util.List<java.lang.Integer> outCardsType_ = java.util.Collections.emptyList();
      private void ensureOutCardsTypeIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = new java.util.ArrayList<java.lang.Integer>(outCardsType_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsTypeList() {
        return java.util.Collections.unmodifiableList(outCardsType_);
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public int getOutCardsTypeCount() {
        return outCardsType_.size();
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public int getOutCardsType(int index) {
        return outCardsType_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder setOutCardsType(
          int index, int value) {
        ensureOutCardsTypeIsMutable();
        outCardsType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder addOutCardsType(int value) {
        ensureOutCardsTypeIsMutable();
        outCardsType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder addAllOutCardsType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsTypeIsMutable();
        super.addAll(values, outCardsType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder clearOutCardsType() {
        outCardsType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 11;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000400;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 12;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000800;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 13;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00001000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 14;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00002000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 15;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 17;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 18;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 19;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 20;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00080000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 zhu_type = 21;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00100000;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00100000);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_card_seat = 22;
      private int maxCardSeat_ ;
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public boolean hasMaxCardSeat() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public int getMaxCardSeat() {
        return maxCardSeat_;
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder setMaxCardSeat(int value) {
        bitField0_ |= 0x00200000;
        maxCardSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder clearMaxCardSeat() {
        bitField0_ = (bitField0_ & ~0x00200000);
        maxCardSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 select_dang = 23;
      private java.util.List<java.lang.Integer> selectDang_ = java.util.Collections.emptyList();
      private void ensureSelectDangIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = new java.util.ArrayList<java.lang.Integer>(selectDang_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSelectDangList() {
        return java.util.Collections.unmodifiableList(selectDang_);
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public int getSelectDangCount() {
        return selectDang_.size();
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public int getSelectDang(int index) {
        return selectDang_.get(index);
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder setSelectDang(
          int index, int value) {
        ensureSelectDangIsMutable();
        selectDang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder addSelectDang(int value) {
        ensureSelectDangIsMutable();
        selectDang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder addAllSelectDang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSelectDangIsMutable();
        super.addAll(values, selectDang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder clearSelectDang() {
        selectDang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional int32 call_dang = 24;
      private int callDang_ ;
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public boolean hasCallDang() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public int getCallDang() {
        return callDang_;
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public Builder setCallDang(int value) {
        bitField0_ |= 0x00800000;
        callDang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public Builder clearCallDang() {
        bitField0_ = (bitField0_ & ~0x00800000);
        callDang_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.TableResponse_Xfgd)
    }

    static {
      defaultInstance = new TableResponse_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.TableResponse_Xfgd)
  }

  public interface GameStart_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional string strDetail = 4;
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    boolean hasStrDetail();
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    java.lang.String getStrDetail();
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getStrDetailBytes();
  }
  /**
   * Protobuf type {@code xfgd.GameStart_Xfgd}
   */
  public static final class GameStart_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_XfgdOrBuilder {
    // Use GameStart_Xfgd.newBuilder() to construct.
    private GameStart_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Xfgd defaultInstance;
    public static GameStart_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000004;
              strDetail_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_GameStart_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_GameStart_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Xfgd>() {
      public GameStart_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional string strDetail = 4;
    public static final int STRDETAIL_FIELD_NUMBER = 4;
    private java.lang.Object strDetail_;
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public boolean hasStrDetail() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public java.lang.String getStrDetail() {
      java.lang.Object ref = strDetail_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strDetail_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStrDetailBytes() {
      java.lang.Object ref = strDetail_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strDetail_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      currentPlayer_ = 0;
      strDetail_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, getStrDetailBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getStrDetailBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.GameStart_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.GameStart_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_GameStart_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_GameStart_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        strDetail_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_GameStart_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.strDetail_ = strDetail_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasStrDetail()) {
          bitField0_ |= 0x00000008;
          strDetail_ = other.strDetail_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.GameStart_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string strDetail = 4;
      private java.lang.Object strDetail_ = "";
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public boolean hasStrDetail() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public java.lang.String getStrDetail() {
        java.lang.Object ref = strDetail_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          strDetail_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStrDetailBytes() {
        java.lang.Object ref = strDetail_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strDetail_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setStrDetail(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        strDetail_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder clearStrDetail() {
        bitField0_ = (bitField0_ & ~0x00000008);
        strDetail_ = getDefaultInstance().getStrDetail();
        onChanged();
        return this;
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setStrDetailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        strDetail_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.GameStart_Xfgd)
    }

    static {
      defaultInstance = new GameStart_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.GameStart_Xfgd)
  }

  public interface SendCard_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code xfgd.SendCard_Xfgd}
   */
  public static final class SendCard_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements SendCard_XfgdOrBuilder {
    // Use SendCard_Xfgd.newBuilder() to construct.
    private SendCard_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SendCard_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SendCard_Xfgd defaultInstance;
    public static SendCard_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public SendCard_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SendCard_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_SendCard_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_SendCard_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<SendCard_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<SendCard_Xfgd>() {
      public SendCard_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendCard_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SendCard_Xfgd> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.SendCard_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.SendCard_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_SendCard_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_SendCard_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_SendCard_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.SendCard_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.SendCard_Xfgd)
    }

    static {
      defaultInstance = new SendCard_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.SendCard_Xfgd)
  }

  public interface RefreshCardData_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code xfgd.RefreshCardData_Xfgd}
   */
  public static final class RefreshCardData_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardData_XfgdOrBuilder {
    // Use RefreshCardData_Xfgd.newBuilder() to construct.
    private RefreshCardData_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData_Xfgd defaultInstance;
    public static RefreshCardData_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_RefreshCardData_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_RefreshCardData_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData_Xfgd>() {
      public RefreshCardData_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData_Xfgd> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.RefreshCardData_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_RefreshCardData_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_RefreshCardData_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_RefreshCardData_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.RefreshCardData_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.RefreshCardData_Xfgd)
    }

    static {
      defaultInstance = new RefreshCardData_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.RefreshCardData_Xfgd)
  }

  public interface CallBankerResponse_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 operete_dang_num = 1;
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    boolean hasOpereteDangNum();
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    int getOpereteDangNum();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    int getCallPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 banker_player = 4;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 dang_min = 7;
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    boolean hasDangMin();
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    int getDangMin();

    // optional int32 dang_max = 8;
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    boolean hasDangMax();
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    int getDangMax();

    // optional .RoomInfo room_info = 9;
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();
  }
  /**
   * Protobuf type {@code xfgd.CallBankerResponse_Xfgd}
   *
   * <pre>
   *叫庄结果
   * </pre>
   */
  public static final class CallBankerResponse_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_XfgdOrBuilder {
    // Use CallBankerResponse_Xfgd.newBuilder() to construct.
    private CallBankerResponse_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_Xfgd defaultInstance;
    public static CallBankerResponse_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opereteDangNum_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              dangMin_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              dangMax_ = input.readInt32();
              break;
            }
            case 74: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_CallBankerResponse_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_CallBankerResponse_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_Xfgd>() {
      public CallBankerResponse_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 operete_dang_num = 1;
    public static final int OPERETE_DANG_NUM_FIELD_NUMBER = 1;
    private int opereteDangNum_;
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    public boolean hasOpereteDangNum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    public int getOpereteDangNum() {
      return opereteDangNum_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 banker_player = 4;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 4;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 dang_min = 7;
    public static final int DANG_MIN_FIELD_NUMBER = 7;
    private int dangMin_;
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    public boolean hasDangMin() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    public int getDangMin() {
      return dangMin_;
    }

    // optional int32 dang_max = 8;
    public static final int DANG_MAX_FIELD_NUMBER = 8;
    private int dangMax_;
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    public boolean hasDangMax() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    public int getDangMax() {
      return dangMax_;
    }

    // optional .RoomInfo room_info = 9;
    public static final int ROOM_INFO_FIELD_NUMBER = 9;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    private void initFields() {
      opereteDangNum_ = 0;
      callPlayer_ = 0;
      currentPlayer_ = 0;
      bankerPlayer_ = 0;
      displayTime_ = 0;
      dangMin_ = 0;
      dangMax_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opereteDangNum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, dangMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, dangMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(9, roomInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opereteDangNum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, dangMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, dangMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, roomInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.CallBankerResponse_Xfgd}
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_CallBankerResponse_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_CallBankerResponse_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opereteDangNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        dangMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        dangMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_CallBankerResponse_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opereteDangNum_ = opereteDangNum_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dangMin_ = dangMin_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dangMax_ = dangMax_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd.getDefaultInstance()) return this;
        if (other.hasOpereteDangNum()) {
          setOpereteDangNum(other.getOpereteDangNum());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasDangMin()) {
          setDangMin(other.getDangMin());
        }
        if (other.hasDangMax()) {
          setDangMax(other.getDangMax());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.CallBankerResponse_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 operete_dang_num = 1;
      private int opereteDangNum_ ;
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public boolean hasOpereteDangNum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public int getOpereteDangNum() {
        return opereteDangNum_;
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public Builder setOpereteDangNum(int value) {
        bitField0_ |= 0x00000001;
        opereteDangNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public Builder clearOpereteDangNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opereteDangNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 4;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000008;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dang_min = 7;
      private int dangMin_ ;
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public boolean hasDangMin() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public int getDangMin() {
        return dangMin_;
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public Builder setDangMin(int value) {
        bitField0_ |= 0x00000020;
        dangMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public Builder clearDangMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dangMin_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dang_max = 8;
      private int dangMax_ ;
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public boolean hasDangMax() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public int getDangMax() {
        return dangMax_;
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public Builder setDangMax(int value) {
        bitField0_ |= 0x00000040;
        dangMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public Builder clearDangMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dangMax_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 9;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.CallBankerResponse_Xfgd)
    }

    static {
      defaultInstance = new CallBankerResponse_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.CallBankerResponse_Xfgd)
  }

  public interface JiaoZhuBegin_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    int getSeatIndex();

    // repeated int32 count = 2;
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    java.util.List<java.lang.Integer> getCountList();
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    int getCountCount();
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    int getCount(int index);

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code xfgd.JiaoZhuBegin_Xfgd}
   */
  public static final class JiaoZhuBegin_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements JiaoZhuBegin_XfgdOrBuilder {
    // Use JiaoZhuBegin_Xfgd.newBuilder() to construct.
    private JiaoZhuBegin_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JiaoZhuBegin_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JiaoZhuBegin_Xfgd defaultInstance;
    public static JiaoZhuBegin_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public JiaoZhuBegin_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JiaoZhuBegin_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                count_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              count_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                count_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                count_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = java.util.Collections.unmodifiableList(count_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_JiaoZhuBegin_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<JiaoZhuBegin_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<JiaoZhuBegin_Xfgd>() {
      public JiaoZhuBegin_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JiaoZhuBegin_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JiaoZhuBegin_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // repeated int32 count = 2;
    public static final int COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> count_;
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCountList() {
      return count_;
    }
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public int getCountCount() {
      return count_.size();
    }
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public int getCount(int index) {
      return count_.get(index);
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      seatIndex_ = 0;
      count_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      for (int i = 0; i < count_.size(); i++) {
        output.writeInt32(2, count_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < count_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(count_.get(i));
        }
        size += dataSize;
        size += 1 * getCountList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.JiaoZhuBegin_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_JiaoZhuBegin_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        count_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = java.util.Collections.unmodifiableList(count_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.count_ = count_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (!other.count_.isEmpty()) {
          if (count_.isEmpty()) {
            count_ = other.count_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCountIsMutable();
            count_.addAll(other.count_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.JiaoZhuBegin_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 count = 2;
      private java.util.List<java.lang.Integer> count_ = java.util.Collections.emptyList();
      private void ensureCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = new java.util.ArrayList<java.lang.Integer>(count_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCountList() {
        return java.util.Collections.unmodifiableList(count_);
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public int getCountCount() {
        return count_.size();
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public int getCount(int index) {
        return count_.get(index);
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setCount(
          int index, int value) {
        ensureCountIsMutable();
        count_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addCount(int value) {
        ensureCountIsMutable();
        count_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addAllCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCountIsMutable();
        super.addAll(values, count_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearCount() {
        count_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.JiaoZhuBegin_Xfgd)
    }

    static {
      defaultInstance = new JiaoZhuBegin_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.JiaoZhuBegin_Xfgd)
  }

  public interface MaiDiBegin_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    int getSeatIndex();

    // optional int32 card_count = 2;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 3;
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code xfgd.MaiDiBegin_Xfgd}
   */
  public static final class MaiDiBegin_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements MaiDiBegin_XfgdOrBuilder {
    // Use MaiDiBegin_Xfgd.newBuilder() to construct.
    private MaiDiBegin_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MaiDiBegin_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MaiDiBegin_Xfgd defaultInstance;
    public static MaiDiBegin_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public MaiDiBegin_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MaiDiBegin_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_MaiDiBegin_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_MaiDiBegin_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<MaiDiBegin_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<MaiDiBegin_Xfgd>() {
      public MaiDiBegin_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MaiDiBegin_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MaiDiBegin_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      seatIndex_ = 0;
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.MaiDiBegin_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_MaiDiBegin_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_MaiDiBegin_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_MaiDiBegin_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.MaiDiBegin_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_count = 2;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000002;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 3;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000008;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.MaiDiBegin_Xfgd)
    }

    static {
      defaultInstance = new MaiDiBegin_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.MaiDiBegin_Xfgd)
  }

  public interface TouXiangBegin_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 display_time = 1;
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    int getDisplayTime();

    // optional string deatil = 2;
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    boolean hasDeatil();
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    java.lang.String getDeatil();
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeatilBytes();
  }
  /**
   * Protobuf type {@code xfgd.TouXiangBegin_Xfgd}
   *
   * <pre>
   *投降开始
   * </pre>
   */
  public static final class TouXiangBegin_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements TouXiangBegin_XfgdOrBuilder {
    // Use TouXiangBegin_Xfgd.newBuilder() to construct.
    private TouXiangBegin_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiangBegin_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiangBegin_Xfgd defaultInstance;
    public static TouXiangBegin_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiangBegin_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiangBegin_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              displayTime_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              deatil_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangBegin_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangBegin_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiangBegin_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<TouXiangBegin_Xfgd>() {
      public TouXiangBegin_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiangBegin_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiangBegin_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 display_time = 1;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 1;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional string deatil = 2;
    public static final int DEATIL_FIELD_NUMBER = 2;
    private java.lang.Object deatil_;
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public boolean hasDeatil() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public java.lang.String getDeatil() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          deatil_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeatilBytes() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deatil_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      displayTime_ = 0;
      deatil_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getDeatilBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getDeatilBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.TouXiangBegin_Xfgd}
     *
     * <pre>
     *投降开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangBegin_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangBegin_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        deatil_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangBegin_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.deatil_ = deatil_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd.getDefaultInstance()) return this;
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasDeatil()) {
          bitField0_ |= 0x00000002;
          deatil_ = other.deatil_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.TouXiangBegin_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 display_time = 1;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000001;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional string deatil = 2;
      private java.lang.Object deatil_ = "";
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public boolean hasDeatil() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public java.lang.String getDeatil() {
        java.lang.Object ref = deatil_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          deatil_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeatilBytes() {
        java.lang.Object ref = deatil_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deatil_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatil(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        deatil_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder clearDeatil() {
        bitField0_ = (bitField0_ & ~0x00000002);
        deatil_ = getDefaultInstance().getDeatil();
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatilBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        deatil_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.TouXiangBegin_Xfgd)
    }

    static {
      defaultInstance = new TouXiangBegin_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.TouXiangBegin_Xfgd)
  }

  public interface TouXiangResult_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 is_agree = 1;
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    java.util.List<java.lang.Integer> getIsAgreeList();
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    int getIsAgreeCount();
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    int getIsAgree(int index);

    // optional int32 tou_xiang_seat = 2;
    /**
     * <code>optional int32 tou_xiang_seat = 2;</code>
     *
     * <pre>
     *投降玩家
     * </pre>
     */
    boolean hasTouXiangSeat();
    /**
     * <code>optional int32 tou_xiang_seat = 2;</code>
     *
     * <pre>
     *投降玩家
     * </pre>
     */
    int getTouXiangSeat();

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code xfgd.TouXiangResult_Xfgd}
   *
   * <pre>
   *投降结果
   * </pre>
   */
  public static final class TouXiangResult_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements TouXiangResult_XfgdOrBuilder {
    // Use TouXiangResult_Xfgd.newBuilder() to construct.
    private TouXiangResult_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiangResult_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiangResult_Xfgd defaultInstance;
    public static TouXiangResult_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiangResult_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiangResult_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                isAgree_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              isAgree_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                isAgree_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                isAgree_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              touXiangSeat_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          isAgree_ = java.util.Collections.unmodifiableList(isAgree_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangResult_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangResult_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiangResult_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<TouXiangResult_Xfgd>() {
      public TouXiangResult_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiangResult_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiangResult_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 is_agree = 1;
    public static final int IS_AGREE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> isAgree_;
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIsAgreeList() {
      return isAgree_;
    }
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    public int getIsAgreeCount() {
      return isAgree_.size();
    }
    /**
     * <code>repeated int32 is_agree = 1;</code>
     *
     * <pre>
     *是否同意 -1:未操作 0不同意 1同意
     * </pre>
     */
    public int getIsAgree(int index) {
      return isAgree_.get(index);
    }

    // optional int32 tou_xiang_seat = 2;
    public static final int TOU_XIANG_SEAT_FIELD_NUMBER = 2;
    private int touXiangSeat_;
    /**
     * <code>optional int32 tou_xiang_seat = 2;</code>
     *
     * <pre>
     *投降玩家
     * </pre>
     */
    public boolean hasTouXiangSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 tou_xiang_seat = 2;</code>
     *
     * <pre>
     *投降玩家
     * </pre>
     */
    public int getTouXiangSeat() {
      return touXiangSeat_;
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      isAgree_ = java.util.Collections.emptyList();
      touXiangSeat_ = 0;
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < isAgree_.size(); i++) {
        output.writeInt32(1, isAgree_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, touXiangSeat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < isAgree_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(isAgree_.get(i));
        }
        size += dataSize;
        size += 1 * getIsAgreeList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, touXiangSeat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.TouXiangResult_Xfgd}
     *
     * <pre>
     *投降结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangResult_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangResult_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isAgree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        touXiangSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TouXiangResult_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          isAgree_ = java.util.Collections.unmodifiableList(isAgree_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.isAgree_ = isAgree_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.touXiangSeat_ = touXiangSeat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd.getDefaultInstance()) return this;
        if (!other.isAgree_.isEmpty()) {
          if (isAgree_.isEmpty()) {
            isAgree_ = other.isAgree_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIsAgreeIsMutable();
            isAgree_.addAll(other.isAgree_);
          }
          onChanged();
        }
        if (other.hasTouXiangSeat()) {
          setTouXiangSeat(other.getTouXiangSeat());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.TouXiangResult_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 is_agree = 1;
      private java.util.List<java.lang.Integer> isAgree_ = java.util.Collections.emptyList();
      private void ensureIsAgreeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          isAgree_ = new java.util.ArrayList<java.lang.Integer>(isAgree_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIsAgreeList() {
        return java.util.Collections.unmodifiableList(isAgree_);
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public int getIsAgreeCount() {
        return isAgree_.size();
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public int getIsAgree(int index) {
        return isAgree_.get(index);
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public Builder setIsAgree(
          int index, int value) {
        ensureIsAgreeIsMutable();
        isAgree_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public Builder addIsAgree(int value) {
        ensureIsAgreeIsMutable();
        isAgree_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public Builder addAllIsAgree(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIsAgreeIsMutable();
        super.addAll(values, isAgree_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 1;</code>
       *
       * <pre>
       *是否同意 -1:未操作 0不同意 1同意
       * </pre>
       */
      public Builder clearIsAgree() {
        isAgree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 tou_xiang_seat = 2;
      private int touXiangSeat_ ;
      /**
       * <code>optional int32 tou_xiang_seat = 2;</code>
       *
       * <pre>
       *投降玩家
       * </pre>
       */
      public boolean hasTouXiangSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tou_xiang_seat = 2;</code>
       *
       * <pre>
       *投降玩家
       * </pre>
       */
      public int getTouXiangSeat() {
        return touXiangSeat_;
      }
      /**
       * <code>optional int32 tou_xiang_seat = 2;</code>
       *
       * <pre>
       *投降玩家
       * </pre>
       */
      public Builder setTouXiangSeat(int value) {
        bitField0_ |= 0x00000002;
        touXiangSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tou_xiang_seat = 2;</code>
       *
       * <pre>
       *投降玩家
       * </pre>
       */
      public Builder clearTouXiangSeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        touXiangSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.TouXiangResult_Xfgd)
    }

    static {
      defaultInstance = new TouXiangResult_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.TouXiangResult_Xfgd)
  }

  public interface Card_ArraryOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse card_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    int getCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code xfgd.Card_Arrary}
   *
   * <pre>
   *二维数组
   * </pre>
   */
  public static final class Card_Arrary extends
      com.google.protobuf.GeneratedMessage
      implements Card_ArraryOrBuilder {
    // Use Card_Arrary.newBuilder() to construct.
    private Card_Arrary(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Card_Arrary(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Card_Arrary defaultInstance;
    public static Card_Arrary getDefaultInstance() {
      return defaultInstance;
    }

    public Card_Arrary getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Card_Arrary(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Card_Arrary_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Card_Arrary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.class, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder.class);
    }

    public static com.google.protobuf.Parser<Card_Arrary> PARSER =
        new com.google.protobuf.AbstractParser<Card_Arrary>() {
      public Card_Arrary parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Card_Arrary(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Card_Arrary> getParserForType() {
      return PARSER;
    }

    // repeated .Int32ArrayResponse card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardData_;
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataOrBuilderList() {
      return cardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index) {
      return cardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
        int index) {
      return cardData_.get(index);
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeMessage(1, cardData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.Card_Arrary prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.Card_Arrary}
     *
     * <pre>
     *二维数组
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Card_Arrary_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Card_Arrary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.class, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Card_Arrary_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary build() {
        protobuf.clazz.xfgd.xfgdRsp.Card_Arrary result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.Card_Arrary result = new protobuf.clazz.xfgd.xfgdRsp.Card_Arrary(this);
        int from_bitField0_ = bitField0_;
        if (cardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardData_ = java.util.Collections.unmodifiableList(cardData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardData_ = cardData_;
        } else {
          result.cardData_ = cardDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.Card_Arrary) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.Card_Arrary)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.Card_Arrary other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.getDefaultInstance()) return this;
        if (cardDataBuilder_ == null) {
          if (!other.cardData_.isEmpty()) {
            if (cardData_.isEmpty()) {
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardDataIsMutable();
              cardData_.addAll(other.cardData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardData_.isEmpty()) {
            if (cardDataBuilder_.isEmpty()) {
              cardDataBuilder_.dispose();
              cardDataBuilder_ = null;
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardDataFieldBuilder() : null;
            } else {
              cardDataBuilder_.addAllMessages(other.cardData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.Card_Arrary parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.Card_Arrary) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse card_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardData_ =
        java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataList() {
        if (cardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardData_);
        } else {
          return cardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public int getCardDataCount() {
        if (cardDataBuilder_ == null) {
          return cardData_.size();
        } else {
          return cardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);
        } else {
          return cardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder setCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.set(index, value);
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder setCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(index, value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          super.addAll(values, cardData_);
          onChanged();
        } else {
          cardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder clearCardData() {
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder removeCardData(int index) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.remove(index);
          onChanged();
        } else {
          cardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
          int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);  } else {
          return cardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardDataOrBuilderList() {
        if (cardDataBuilder_ != null) {
          return cardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataBuilder() {
        return getCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardDataBuilderList() {
        return getCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardDataFieldBuilder() {
        if (cardDataBuilder_ == null) {
          cardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardData_ = null;
        }
        return cardDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.Card_Arrary)
    }

    static {
      defaultInstance = new Card_Arrary(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.Card_Arrary)
  }

  public interface DiPaiCard_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_data = 1;
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataList();
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardData(int index);
  }
  /**
   * Protobuf type {@code xfgd.DiPaiCard_Xfgd}
   */
  public static final class DiPaiCard_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements DiPaiCard_XfgdOrBuilder {
    // Use DiPaiCard_Xfgd.newBuilder() to construct.
    private DiPaiCard_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiPaiCard_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiPaiCard_Xfgd defaultInstance;
    public static DiPaiCard_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public DiPaiCard_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiPaiCard_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_DiPaiCard_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_DiPaiCard_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<DiPaiCard_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<DiPaiCard_Xfgd>() {
      public DiPaiCard_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiPaiCard_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiPaiCard_Xfgd> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardData_;
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardData(int index) {
      return cardData_.get(index);
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeInt32(1, cardData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.DiPaiCard_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_DiPaiCard_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_DiPaiCard_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_DiPaiCard_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardData_ = cardData_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd.getDefaultInstance()) return this;
        if (!other.cardData_.isEmpty()) {
          if (cardData_.isEmpty()) {
            cardData_ = other.cardData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardDataIsMutable();
            cardData_.addAll(other.cardData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.DiPaiCard_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_data = 1;
      private java.util.List<java.lang.Integer> cardData_ = java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<java.lang.Integer>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataList() {
        return java.util.Collections.unmodifiableList(cardData_);
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardDataCount() {
        return cardData_.size();
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardData(int index) {
        return cardData_.get(index);
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder setCardData(
          int index, int value) {
        ensureCardDataIsMutable();
        cardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addCardData(int value) {
        ensureCardDataIsMutable();
        cardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataIsMutable();
        super.addAll(values, cardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder clearCardData() {
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.DiPaiCard_Xfgd)
    }

    static {
      defaultInstance = new DiPaiCard_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.DiPaiCard_Xfgd)
  }

  public interface LiShiCard_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .xfgd.Card_Arrary card_data = 1;
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> 
        getCardDataList();
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    protobuf.clazz.xfgd.xfgdRsp.Card_Arrary getCardData(int index);
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder> 
        getCardDataOrBuilderList();
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder getCardDataOrBuilder(
        int index);

    // optional int32 banker_player = 2;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerPlayer();
  }
  /**
   * Protobuf type {@code xfgd.LiShiCard_Xfgd}
   */
  public static final class LiShiCard_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements LiShiCard_XfgdOrBuilder {
    // Use LiShiCard_Xfgd.newBuilder() to construct.
    private LiShiCard_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiShiCard_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiShiCard_Xfgd defaultInstance;
    public static LiShiCard_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public LiShiCard_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiShiCard_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readMessage(protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_LiShiCard_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_LiShiCard_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<LiShiCard_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<LiShiCard_Xfgd>() {
      public LiShiCard_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiShiCard_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiShiCard_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .xfgd.Card_Arrary card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> cardData_;
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder> 
        getCardDataOrBuilderList() {
      return cardData_;
    }
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary getCardData(int index) {
      return cardData_.get(index);
    }
    /**
     * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder getCardDataOrBuilder(
        int index) {
      return cardData_.get(index);
    }

    // optional int32 banker_player = 2;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 2;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
      bankerPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeMessage(1, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, bankerPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.LiShiCard_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.LiShiCard_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_LiShiCard_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_LiShiCard_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardDataBuilder_.clear();
        }
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_LiShiCard_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (cardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardData_ = java.util.Collections.unmodifiableList(cardData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardData_ = cardData_;
        } else {
          result.cardData_ = cardDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd.getDefaultInstance()) return this;
        if (cardDataBuilder_ == null) {
          if (!other.cardData_.isEmpty()) {
            if (cardData_.isEmpty()) {
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardDataIsMutable();
              cardData_.addAll(other.cardData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardData_.isEmpty()) {
            if (cardDataBuilder_.isEmpty()) {
              cardDataBuilder_.dispose();
              cardDataBuilder_ = null;
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardDataFieldBuilder() : null;
            } else {
              cardDataBuilder_.addAllMessages(other.cardData_);
            }
          }
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.LiShiCard_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .xfgd.Card_Arrary card_data = 1;
      private java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> cardData_ =
        java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.xfgd.xfgdRsp.Card_Arrary, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder, protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder> cardDataBuilder_;

      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> getCardDataList() {
        if (cardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardData_);
        } else {
          return cardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public int getCardDataCount() {
        if (cardDataBuilder_ == null) {
          return cardData_.size();
        } else {
          return cardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary getCardData(int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);
        } else {
          return cardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder setCardData(
          int index, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.set(index, value);
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder setCardData(
          int index, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(protobuf.clazz.xfgd.xfgdRsp.Card_Arrary value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          int index, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(index, value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          int index, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends protobuf.clazz.xfgd.xfgdRsp.Card_Arrary> values) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          super.addAll(values, cardData_);
          onChanged();
        } else {
          cardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder clearCardData() {
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder removeCardData(int index) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.remove(index);
          onChanged();
        } else {
          cardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder getCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder getCardDataOrBuilder(
          int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);  } else {
          return cardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder> 
           getCardDataOrBuilderList() {
        if (cardDataBuilder_ != null) {
          return cardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardData_);
        }
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder addCardDataBuilder() {
        return getCardDataFieldBuilder().addBuilder(
            protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.getDefaultInstance());
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder addCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.getDefaultInstance());
      }
      /**
       * <code>repeated .xfgd.Card_Arrary card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder> 
           getCardDataBuilderList() {
        return getCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.xfgd.xfgdRsp.Card_Arrary, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder, protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder> 
          getCardDataFieldBuilder() {
        if (cardDataBuilder_ == null) {
          cardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.xfgd.xfgdRsp.Card_Arrary, protobuf.clazz.xfgd.xfgdRsp.Card_Arrary.Builder, protobuf.clazz.xfgd.xfgdRsp.Card_ArraryOrBuilder>(
                  cardData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardData_ = null;
        }
        return cardDataBuilder_;
      }

      // optional int32 banker_player = 2;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000002;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.LiShiCard_Xfgd)
    }

    static {
      defaultInstance = new LiShiCard_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.LiShiCard_Xfgd)
  }

  public interface TableScore_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 get_score = 1;
    /**
     * <code>optional int32 get_score = 1;</code>
     */
    boolean hasGetScore();
    /**
     * <code>optional int32 get_score = 1;</code>
     */
    int getGetScore();

    // optional int32 yu_fen = 2;
    /**
     * <code>optional int32 yu_fen = 2;</code>
     */
    boolean hasYuFen();
    /**
     * <code>optional int32 yu_fen = 2;</code>
     */
    int getYuFen();
  }
  /**
   * Protobuf type {@code xfgd.TableScore_Xfgd}
   */
  public static final class TableScore_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements TableScore_XfgdOrBuilder {
    // Use TableScore_Xfgd.newBuilder() to construct.
    private TableScore_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableScore_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableScore_Xfgd defaultInstance;
    public static TableScore_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public TableScore_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableScore_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              getScore_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              yuFen_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableScore_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableScore_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<TableScore_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<TableScore_Xfgd>() {
      public TableScore_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableScore_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableScore_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 get_score = 1;
    public static final int GET_SCORE_FIELD_NUMBER = 1;
    private int getScore_;
    /**
     * <code>optional int32 get_score = 1;</code>
     */
    public boolean hasGetScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 get_score = 1;</code>
     */
    public int getGetScore() {
      return getScore_;
    }

    // optional int32 yu_fen = 2;
    public static final int YU_FEN_FIELD_NUMBER = 2;
    private int yuFen_;
    /**
     * <code>optional int32 yu_fen = 2;</code>
     */
    public boolean hasYuFen() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 yu_fen = 2;</code>
     */
    public int getYuFen() {
      return yuFen_;
    }

    private void initFields() {
      getScore_ = 0;
      yuFen_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, getScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, yuFen_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, yuFen_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.TableScore_Xfgd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.TableScore_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableScore_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableScore_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        getScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        yuFen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_TableScore_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.getScore_ = getScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.yuFen_ = yuFen_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd.getDefaultInstance()) return this;
        if (other.hasGetScore()) {
          setGetScore(other.getGetScore());
        }
        if (other.hasYuFen()) {
          setYuFen(other.getYuFen());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.TableScore_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 get_score = 1;
      private int getScore_ ;
      /**
       * <code>optional int32 get_score = 1;</code>
       */
      public boolean hasGetScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       */
      public int getGetScore() {
        return getScore_;
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       */
      public Builder setGetScore(int value) {
        bitField0_ |= 0x00000001;
        getScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       */
      public Builder clearGetScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        getScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 yu_fen = 2;
      private int yuFen_ ;
      /**
       * <code>optional int32 yu_fen = 2;</code>
       */
      public boolean hasYuFen() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 yu_fen = 2;</code>
       */
      public int getYuFen() {
        return yuFen_;
      }
      /**
       * <code>optional int32 yu_fen = 2;</code>
       */
      public Builder setYuFen(int value) {
        bitField0_ |= 0x00000002;
        yuFen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 yu_fen = 2;</code>
       */
      public Builder clearYuFen() {
        bitField0_ = (bitField0_ & ~0x00000002);
        yuFen_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.TableScore_Xfgd)
    }

    static {
      defaultInstance = new TableScore_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.TableScore_Xfgd)
  }

  public interface Zhu_pai_typeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 zhu_type = 1;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();
  }
  /**
   * Protobuf type {@code xfgd.Zhu_pai_type}
   */
  public static final class Zhu_pai_type extends
      com.google.protobuf.GeneratedMessage
      implements Zhu_pai_typeOrBuilder {
    // Use Zhu_pai_type.newBuilder() to construct.
    private Zhu_pai_type(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Zhu_pai_type(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Zhu_pai_type defaultInstance;
    public static Zhu_pai_type getDefaultInstance() {
      return defaultInstance;
    }

    public Zhu_pai_type getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Zhu_pai_type(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              zhuType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_pai_type_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_pai_type_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.class, protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.Builder.class);
    }

    public static com.google.protobuf.Parser<Zhu_pai_type> PARSER =
        new com.google.protobuf.AbstractParser<Zhu_pai_type>() {
      public Zhu_pai_type parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Zhu_pai_type(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Zhu_pai_type> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 zhu_type = 1;
    public static final int ZHU_TYPE_FIELD_NUMBER = 1;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    private void initFields() {
      zhuType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, zhuType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, zhuType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.Zhu_pai_type}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_typeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_pai_type_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_pai_type_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.class, protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_pai_type_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type build() {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type result = new protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.zhuType_ = zhuType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type.getDefaultInstance()) return this;
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.Zhu_pai_type) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 zhu_type = 1;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00000001;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.Zhu_pai_type)
    }

    static {
      defaultInstance = new Zhu_pai_type(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.Zhu_pai_type)
  }

  public interface Zhu_Pai_CardOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 zhu_type = 1;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // repeated int32 zhu_card_count = 2;
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuCardCountList();
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    int getZhuCardCountCount();
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    int getZhuCardCount(int index);

    // repeated int32 zhu_card_double_count = 3;
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuCardDoubleCountList();
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    int getZhuCardDoubleCountCount();
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    int getZhuCardDoubleCount(int index);
  }
  /**
   * Protobuf type {@code xfgd.Zhu_Pai_Card}
   */
  public static final class Zhu_Pai_Card extends
      com.google.protobuf.GeneratedMessage
      implements Zhu_Pai_CardOrBuilder {
    // Use Zhu_Pai_Card.newBuilder() to construct.
    private Zhu_Pai_Card(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Zhu_Pai_Card(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Zhu_Pai_Card defaultInstance;
    public static Zhu_Pai_Card getDefaultInstance() {
      return defaultInstance;
    }

    public Zhu_Pai_Card getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Zhu_Pai_Card(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              zhuType_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              zhuCardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              zhuCardDoubleCount_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuCardDoubleCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = java.util.Collections.unmodifiableList(zhuCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_Pai_Card_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_Pai_Card_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.class, protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.Builder.class);
    }

    public static com.google.protobuf.Parser<Zhu_Pai_Card> PARSER =
        new com.google.protobuf.AbstractParser<Zhu_Pai_Card>() {
      public Zhu_Pai_Card parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Zhu_Pai_Card(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Zhu_Pai_Card> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 zhu_type = 1;
    public static final int ZHU_TYPE_FIELD_NUMBER = 1;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // repeated int32 zhu_card_count = 2;
    public static final int ZHU_CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> zhuCardCount_;
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuCardCountList() {
      return zhuCardCount_;
    }
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public int getZhuCardCountCount() {
      return zhuCardCount_.size();
    }
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public int getZhuCardCount(int index) {
      return zhuCardCount_.get(index);
    }

    // repeated int32 zhu_card_double_count = 3;
    public static final int ZHU_CARD_DOUBLE_COUNT_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> zhuCardDoubleCount_;
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuCardDoubleCountList() {
      return zhuCardDoubleCount_;
    }
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public int getZhuCardDoubleCountCount() {
      return zhuCardDoubleCount_.size();
    }
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public int getZhuCardDoubleCount(int index) {
      return zhuCardDoubleCount_.get(index);
    }

    private void initFields() {
      zhuType_ = 0;
      zhuCardCount_ = java.util.Collections.emptyList();
      zhuCardDoubleCount_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, zhuType_);
      }
      for (int i = 0; i < zhuCardCount_.size(); i++) {
        output.writeInt32(2, zhuCardCount_.get(i));
      }
      for (int i = 0; i < zhuCardDoubleCount_.size(); i++) {
        output.writeInt32(3, zhuCardDoubleCount_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, zhuType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuCardCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuCardDoubleCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuCardDoubleCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuCardDoubleCountList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.Zhu_Pai_Card}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_CardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_Pai_Card_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_Pai_Card_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.class, protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        zhuCardDoubleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Zhu_Pai_Card_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card build() {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card result = new protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.zhuType_ = zhuType_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = java.util.Collections.unmodifiableList(zhuCardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.zhuCardCount_ = zhuCardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.zhuCardDoubleCount_ = zhuCardDoubleCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card.getDefaultInstance()) return this;
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (!other.zhuCardCount_.isEmpty()) {
          if (zhuCardCount_.isEmpty()) {
            zhuCardCount_ = other.zhuCardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureZhuCardCountIsMutable();
            zhuCardCount_.addAll(other.zhuCardCount_);
          }
          onChanged();
        }
        if (!other.zhuCardDoubleCount_.isEmpty()) {
          if (zhuCardDoubleCount_.isEmpty()) {
            zhuCardDoubleCount_ = other.zhuCardDoubleCount_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureZhuCardDoubleCountIsMutable();
            zhuCardDoubleCount_.addAll(other.zhuCardDoubleCount_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.Zhu_Pai_Card) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 zhu_type = 1;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00000001;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 zhu_card_count = 2;
      private java.util.List<java.lang.Integer> zhuCardCount_ = java.util.Collections.emptyList();
      private void ensureZhuCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>(zhuCardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuCardCountList() {
        return java.util.Collections.unmodifiableList(zhuCardCount_);
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public int getZhuCardCountCount() {
        return zhuCardCount_.size();
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public int getZhuCardCount(int index) {
        return zhuCardCount_.get(index);
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder setZhuCardCount(
          int index, int value) {
        ensureZhuCardCountIsMutable();
        zhuCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder addZhuCardCount(int value) {
        ensureZhuCardCountIsMutable();
        zhuCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder addAllZhuCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuCardCountIsMutable();
        super.addAll(values, zhuCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder clearZhuCardCount() {
        zhuCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 zhu_card_double_count = 3;
      private java.util.List<java.lang.Integer> zhuCardDoubleCount_ = java.util.Collections.emptyList();
      private void ensureZhuCardDoubleCountIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>(zhuCardDoubleCount_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuCardDoubleCountList() {
        return java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public int getZhuCardDoubleCountCount() {
        return zhuCardDoubleCount_.size();
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public int getZhuCardDoubleCount(int index) {
        return zhuCardDoubleCount_.get(index);
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder setZhuCardDoubleCount(
          int index, int value) {
        ensureZhuCardDoubleCountIsMutable();
        zhuCardDoubleCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder addZhuCardDoubleCount(int value) {
        ensureZhuCardDoubleCountIsMutable();
        zhuCardDoubleCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder addAllZhuCardDoubleCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuCardDoubleCountIsMutable();
        super.addAll(values, zhuCardDoubleCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder clearZhuCardDoubleCount() {
        zhuCardDoubleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.Zhu_Pai_Card)
    }

    static {
      defaultInstance = new Zhu_Pai_Card(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.Zhu_Pai_Card)
  }

  public interface Qie_Pai_EndOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_index = 1;
    /**
     * <code>optional int32 card_index = 1;</code>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 1;</code>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code xfgd.Qie_Pai_End}
   */
  public static final class Qie_Pai_End extends
      com.google.protobuf.GeneratedMessage
      implements Qie_Pai_EndOrBuilder {
    // Use Qie_Pai_End.newBuilder() to construct.
    private Qie_Pai_End(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Qie_Pai_End(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Qie_Pai_End defaultInstance;
    public static Qie_Pai_End getDefaultInstance() {
      return defaultInstance;
    }

    public Qie_Pai_End getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Qie_Pai_End(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Qie_Pai_End_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Qie_Pai_End_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.class, protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.Builder.class);
    }

    public static com.google.protobuf.Parser<Qie_Pai_End> PARSER =
        new com.google.protobuf.AbstractParser<Qie_Pai_End>() {
      public Qie_Pai_End parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Qie_Pai_End(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Qie_Pai_End> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_index = 1;
    public static final int CARD_INDEX_FIELD_NUMBER = 1;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 1;</code>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_index = 1;</code>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.Qie_Pai_End}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_EndOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Qie_Pai_End_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Qie_Pai_End_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.class, protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Qie_Pai_End_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End build() {
        protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End result = new protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End.getDefaultInstance()) return this;
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.Qie_Pai_End) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_index = 1;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 1;</code>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000001;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.Qie_Pai_End)
    }

    static {
      defaultInstance = new Qie_Pai_End(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.Qie_Pai_End)
  }

  public interface Opreate_RequestWsk_XfgdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
     * </pre>
     */
    int getOpreateType();

    // optional int32 select_dang = 2;
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    boolean hasSelectDang();
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    int getSelectDang();

    // optional int32 select_type = 3;
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    boolean hasSelectType();
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    int getSelectType();

    // repeated int32 cards_data = 4;
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 card_index = 5;
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code xfgd.Opreate_RequestWsk_Xfgd}
   *
   * <pre>
   *请求
   * </pre>
   */
  public static final class Opreate_RequestWsk_Xfgd extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_XfgdOrBuilder {
    // Use Opreate_RequestWsk_Xfgd.newBuilder() to construct.
    private Opreate_RequestWsk_Xfgd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_Xfgd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_Xfgd defaultInstance;
    public static Opreate_RequestWsk_Xfgd getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_Xfgd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_Xfgd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              selectDang_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              selectType_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Opreate_RequestWsk_Xfgd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_Xfgd> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_Xfgd>() {
      public Opreate_RequestWsk_Xfgd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_Xfgd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_Xfgd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 select_dang = 2;
    public static final int SELECT_DANG_FIELD_NUMBER = 2;
    private int selectDang_;
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    public boolean hasSelectDang() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    public int getSelectDang() {
      return selectDang_;
    }

    // optional int32 select_type = 3;
    public static final int SELECT_TYPE_FIELD_NUMBER = 3;
    private int selectType_;
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    public boolean hasSelectType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    public int getSelectType() {
      return selectType_;
    }

    // repeated int32 cards_data = 4;
    public static final int CARDS_DATA_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 card_index = 5;
    public static final int CARD_INDEX_FIELD_NUMBER = 5;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      opreateType_ = 0;
      selectDang_ = 0;
      selectType_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, selectDang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, selectType_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(4, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, selectDang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, selectType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code xfgd.Opreate_RequestWsk_Xfgd}
     *
     * <pre>
     *请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_XfgdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Opreate_RequestWsk_Xfgd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.class, protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.Builder.class);
      }

      // Construct using protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        selectDang_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        selectType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.xfgd.xfgdRsp.internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd getDefaultInstanceForType() {
        return protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.getDefaultInstance();
      }

      public protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd build() {
        protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd buildPartial() {
        protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd result = new protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.selectDang_ = selectDang_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.selectType_ = selectType_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd) {
          return mergeFrom((protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd other) {
        if (other == protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasSelectDang()) {
          setSelectDang(other.getSelectDang());
        }
        if (other.hasSelectType()) {
          setSelectType(other.getSelectType());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.xfgd.xfgdRsp.Opreate_RequestWsk_Xfgd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据，9：切牌消息
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 select_dang = 2;
      private int selectDang_ ;
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public boolean hasSelectDang() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public int getSelectDang() {
        return selectDang_;
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public Builder setSelectDang(int value) {
        bitField0_ |= 0x00000002;
        selectDang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public Builder clearSelectDang() {
        bitField0_ = (bitField0_ & ~0x00000002);
        selectDang_ = 0;
        onChanged();
        return this;
      }

      // optional int32 select_type = 3;
      private int selectType_ ;
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public boolean hasSelectType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public int getSelectType() {
        return selectType_;
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public Builder setSelectType(int value) {
        bitField0_ |= 0x00000004;
        selectType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public Builder clearSelectType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        selectType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 4;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 card_index = 5;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000010;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xfgd.Opreate_RequestWsk_Xfgd)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_Xfgd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:xfgd.Opreate_RequestWsk_Xfgd)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_OutCardDataXfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_OutCardDataXfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_PukeGameEndXfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_PukeGameEndXfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_TableResponse_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_TableResponse_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_GameStart_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_GameStart_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_SendCard_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_SendCard_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_RefreshCardData_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_RefreshCardData_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_CallBankerResponse_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_CallBankerResponse_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_JiaoZhuBegin_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_MaiDiBegin_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_MaiDiBegin_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_TouXiangBegin_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_TouXiangBegin_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_TouXiangResult_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_TouXiangResult_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_Card_Arrary_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_Card_Arrary_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_DiPaiCard_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_DiPaiCard_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_LiShiCard_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_LiShiCard_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_TableScore_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_TableScore_Xfgd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_Zhu_pai_type_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_Zhu_pai_type_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_Zhu_Pai_Card_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_Zhu_Pai_Card_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_Qie_Pai_End_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_Qie_Pai_End_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xfgd_Opreate_RequestWsk_Xfgd_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rsj/xfgd.proto\022\004xfgd\032\024basic/protocol.pr" +
      "oto\"\343\003\n\017OutCardDataXfgd\022\027\n\017out_card_play" +
      "er\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013cards_co" +
      "unt\030\003 \001(\005\022\021\n\tcard_type\030\004 \001(\005\022\022\n\ncur_play" +
      "er\030\005 \001(\005\022\025\n\rpr_cards_data\030\006 \003(\005\022\026\n\016pr_ca" +
      "rds_count\030\007 \001(\005\022\030\n\020pr_out_card_type\030\010 \001(" +
      "\005\022\024\n\014display_time\030\t \001(\005\022+\n\016hand_card_dat" +
      "a\030\n \003(\0132\023.Int32ArrayResponse\022\027\n\017hand_car" +
      "d_count\030\013 \003(\005\022\026\n\016max_value_seat\030\014 \001(\005\022\031\n" +
      "\021user_can_out_data\030\r \003(\005\022\032\n\022user_can_out",
      "_count\030\016 \001(\005\022\034\n\024is_current_first_out\030\017 \001" +
      "(\005\022\024\n\014killing_seat\030\020 \001(\005\022\023\n\013killed_seat\030" +
      "\021 \001(\005\022\017\n\007isround\030\022 \001(\010\022\031\n\021card_data_fail" +
      "ure\030\023 \003(\005\"\257\003\n\017PukeGameEndXfgd\022\034\n\troom_in" +
      "fo\030\001 \001(\0132\t.RoomInfo\022\021\n\tcur_round\030\002 \001(\005\022\022" +
      "\n\ngame_round\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'" +
      "\n\ncards_data\030\005 \003(\0132\023.Int32ArrayResponse\022" +
      "\022\n\nplayer_num\030\006 \001(\005\022\025\n\rbanker_player\030\007 \001" +
      "(\005\022\016\n\006reason\030\010 \001(\005\022\022\n\ngame_score\030\t \003(\005\022\023" +
      "\n\013init_di_pai\030\022 \003(\005\022\026\n\016banker_mai_pai\030\023 ",
      "\003(\005\022\020\n\010zhua_fen\030\024 \001(\005\022\017\n\007bei_shu\030\025 \001(\005\022\020" +
      "\n\010jiao_fen\030\026 \001(\005\022\026\n\016is_man_tou_bao\030\027 \001(\010" +
      "\022\024\n\014score_reason\030\030 \001(\005\022\025\n\rall_end_score\030" +
      "\n \003(\005\022$\n\007players\030\021 \003(\0132\023.RoomPlayerRespo" +
      "nse\"\364\004\n\022TableResponse_Xfgd\022\025\n\rbanker_pla" +
      "yer\030\001 \001(\005\022\026\n\016current_player\030\002 \001(\005\022\023\n\013pre" +
      "v_player\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016out_c" +
      "ards_data\030\005 \003(\0132\023.Int32ArrayResponse\022\027\n\017" +
      "out_cards_count\030\006 \003(\005\022\026\n\016out_cards_type\030" +
      "\007 \003(\005\022\021\n\tcard_type\030\010 \003(\005\022\032\n\022pr_out_card_",
      "player\030\t \001(\005\022\025\n\rpr_cards_data\030\n \003(\005\022\026\n\016p" +
      "r_cards_count\030\013 \001(\005\022\030\n\020pr_out_card_type\030" +
      "\014 \001(\005\022\024\n\014is_first_out\030\r \001(\005\022\024\n\014display_t" +
      "ime\030\016 \001(\005\022\022\n\ncard_count\030\017 \003(\005\022\'\n\ncards_d" +
      "ata\030\020 \003(\0132\023.Int32ArrayResponse\022\034\n\troom_i" +
      "nfo\030\021 \001(\0132\t.RoomInfo\022$\n\007players\030\022 \003(\0132\023." +
      "RoomPlayerResponse\022\031\n\021user_can_out_data\030" +
      "\023 \003(\005\022\032\n\022user_can_out_count\030\024 \001(\005\022\020\n\010zhu" +
      "_type\030\025 \001(\005\022\025\n\rmax_card_seat\030\026 \001(\005\022\023\n\013se" +
      "lect_dang\030\027 \003(\005\022\021\n\tcall_dang\030\030 \001(\005\"\177\n\016Ga",
      "meStart_Xfgd\022\034\n\troom_info\030\001 \001(\0132\t.RoomIn" +
      "fo\022$\n\007players\030\002 \003(\0132\023.RoomPlayerResponse" +
      "\022\026\n\016current_player\030\003 \001(\005\022\021\n\tstrDetail\030\004 " +
      "\001(\t\"L\n\rSendCard_Xfgd\022\022\n\ncard_count\030\001 \003(\005" +
      "\022\'\n\ncards_data\030\002 \003(\0132\023.Int32ArrayRespons" +
      "e\"]\n\024RefreshCardData_Xfgd\022\027\n\017hand_card_c" +
      "ount\030\001 \003(\005\022,\n\017hand_cards_data\030\002 \003(\0132\023.In" +
      "t32ArrayResponse\"\317\001\n\027CallBankerResponse_" +
      "Xfgd\022\030\n\020operete_dang_num\030\001 \001(\005\022\023\n\013call_p" +
      "layer\030\002 \001(\005\022\026\n\016current_player\030\003 \001(\005\022\025\n\rb",
      "anker_player\030\004 \001(\005\022\024\n\014display_time\030\005 \001(\005" +
      "\022\020\n\010dang_min\030\007 \001(\005\022\020\n\010dang_max\030\010 \001(\005\022\034\n\t" +
      "room_info\030\t \001(\0132\t.RoomInfo\"L\n\021JiaoZhuBeg" +
      "in_Xfgd\022\022\n\nseat_index\030\001 \001(\005\022\r\n\005count\030\002 \003" +
      "(\005\022\024\n\014display_time\030\003 \001(\005\"c\n\017MaiDiBegin_X" +
      "fgd\022\022\n\nseat_index\030\001 \001(\005\022\022\n\ncard_count\030\002 " +
      "\001(\005\022\022\n\ncards_data\030\003 \003(\005\022\024\n\014display_time\030" +
      "\004 \001(\005\":\n\022TouXiangBegin_Xfgd\022\024\n\014display_t" +
      "ime\030\001 \001(\005\022\016\n\006deatil\030\002 \001(\t\"U\n\023TouXiangRes" +
      "ult_Xfgd\022\020\n\010is_agree\030\001 \003(\005\022\026\n\016tou_xiang_",
      "seat\030\002 \001(\005\022\024\n\014display_time\030\003 \001(\005\"5\n\013Card" +
      "_Arrary\022&\n\tcard_data\030\001 \003(\0132\023.Int32ArrayR" +
      "esponse\"#\n\016DiPaiCard_Xfgd\022\021\n\tcard_data\030\001" +
      " \003(\005\"M\n\016LiShiCard_Xfgd\022$\n\tcard_data\030\001 \003(" +
      "\0132\021.xfgd.Card_Arrary\022\025\n\rbanker_player\030\002 " +
      "\001(\005\"4\n\017TableScore_Xfgd\022\021\n\tget_score\030\001 \001(" +
      "\005\022\016\n\006yu_fen\030\002 \001(\005\" \n\014Zhu_pai_type\022\020\n\010zhu" +
      "_type\030\001 \001(\005\"W\n\014Zhu_Pai_Card\022\020\n\010zhu_type\030" +
      "\001 \001(\005\022\026\n\016zhu_card_count\030\002 \003(\005\022\035\n\025zhu_car" +
      "d_double_count\030\003 \003(\005\"!\n\013Qie_Pai_End\022\022\n\nc",
      "ard_index\030\001 \001(\005\"\201\001\n\027Opreate_RequestWsk_X" +
      "fgd\022\024\n\014opreate_type\030\001 \001(\005\022\023\n\013select_dang" +
      "\030\002 \001(\005\022\023\n\013select_type\030\003 \001(\005\022\022\n\ncards_dat" +
      "a\030\004 \003(\005\022\022\n\ncard_index\030\005 \001(\005B\036\n\023protobuf." +
      "clazz.xfgdB\007xfgdRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_xfgd_OutCardDataXfgd_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_xfgd_OutCardDataXfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_OutCardDataXfgd_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "DisplayTime", "HandCardData", "HandCardCount", "MaxValueSeat", "UserCanOutData", "UserCanOutCount", "IsCurrentFirstOut", "KillingSeat", "KilledSeat", "Isround", "CardDataFailure", });
          internal_static_xfgd_PukeGameEndXfgd_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_xfgd_PukeGameEndXfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_PukeGameEndXfgd_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "PlayerNum", "BankerPlayer", "Reason", "GameScore", "InitDiPai", "BankerMaiPai", "ZhuaFen", "BeiShu", "JiaoFen", "IsManTouBao", "ScoreReason", "AllEndScore", "Players", });
          internal_static_xfgd_TableResponse_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_xfgd_TableResponse_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_TableResponse_Xfgd_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "OutCardsType", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "ZhuType", "MaxCardSeat", "SelectDang", "CallDang", });
          internal_static_xfgd_GameStart_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_xfgd_GameStart_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_GameStart_Xfgd_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurrentPlayer", "StrDetail", });
          internal_static_xfgd_SendCard_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_xfgd_SendCard_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_SendCard_Xfgd_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_xfgd_RefreshCardData_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_xfgd_RefreshCardData_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_RefreshCardData_Xfgd_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_xfgd_CallBankerResponse_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_xfgd_CallBankerResponse_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_CallBankerResponse_Xfgd_descriptor,
              new java.lang.String[] { "OpereteDangNum", "CallPlayer", "CurrentPlayer", "BankerPlayer", "DisplayTime", "DangMin", "DangMax", "RoomInfo", });
          internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_xfgd_JiaoZhuBegin_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_JiaoZhuBegin_Xfgd_descriptor,
              new java.lang.String[] { "SeatIndex", "Count", "DisplayTime", });
          internal_static_xfgd_MaiDiBegin_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_xfgd_MaiDiBegin_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_MaiDiBegin_Xfgd_descriptor,
              new java.lang.String[] { "SeatIndex", "CardCount", "CardsData", "DisplayTime", });
          internal_static_xfgd_TouXiangBegin_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_xfgd_TouXiangBegin_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_TouXiangBegin_Xfgd_descriptor,
              new java.lang.String[] { "DisplayTime", "Deatil", });
          internal_static_xfgd_TouXiangResult_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_xfgd_TouXiangResult_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_TouXiangResult_Xfgd_descriptor,
              new java.lang.String[] { "IsAgree", "TouXiangSeat", "DisplayTime", });
          internal_static_xfgd_Card_Arrary_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_xfgd_Card_Arrary_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_Card_Arrary_descriptor,
              new java.lang.String[] { "CardData", });
          internal_static_xfgd_DiPaiCard_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_xfgd_DiPaiCard_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_DiPaiCard_Xfgd_descriptor,
              new java.lang.String[] { "CardData", });
          internal_static_xfgd_LiShiCard_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_xfgd_LiShiCard_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_LiShiCard_Xfgd_descriptor,
              new java.lang.String[] { "CardData", "BankerPlayer", });
          internal_static_xfgd_TableScore_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_xfgd_TableScore_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_TableScore_Xfgd_descriptor,
              new java.lang.String[] { "GetScore", "YuFen", });
          internal_static_xfgd_Zhu_pai_type_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_xfgd_Zhu_pai_type_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_Zhu_pai_type_descriptor,
              new java.lang.String[] { "ZhuType", });
          internal_static_xfgd_Zhu_Pai_Card_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_xfgd_Zhu_Pai_Card_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_Zhu_Pai_Card_descriptor,
              new java.lang.String[] { "ZhuType", "ZhuCardCount", "ZhuCardDoubleCount", });
          internal_static_xfgd_Qie_Pai_End_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_xfgd_Qie_Pai_End_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_Qie_Pai_End_descriptor,
              new java.lang.String[] { "CardIndex", });
          internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_xfgd_Opreate_RequestWsk_Xfgd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_xfgd_Opreate_RequestWsk_Xfgd_descriptor,
              new java.lang.String[] { "OpreateType", "SelectDang", "SelectType", "CardsData", "CardIndex", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
