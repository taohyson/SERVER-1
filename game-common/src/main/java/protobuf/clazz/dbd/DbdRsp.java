// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbd/dbdProto.proto

package protobuf.clazz.dbd;

public final class DbdRsp {
  private DbdRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomInfoDbdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 room_id = 1;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    int getRoomId();

    // optional int32 game_type_index = 4;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameTypeIndex();
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameTypeIndex();

    // optional int32 game_rule_index = 2;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameRuleIndex();
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameRuleIndex();

    // repeated int32 game_rule_index_ex = 12;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameRuleIndexExList();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexExCount();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexEx(int index);

    // optional string game_rule_des = 3;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    boolean hasGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getGameRuleDesBytes();

    // optional int32 game_round = 5;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    int getGameRound();

    // optional int32 cur_round = 6;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    int getCurRound();

    // optional int32 game_status = 7;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    boolean hasGameStatus();
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    int getGameStatus();

    // optional int64 create_player_id = 8;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    boolean hasCreatePlayerId();
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    long getCreatePlayerId();

    // optional int32 begin_left_card = 9;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    boolean hasBeginLeftCard();
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    int getBeginLeftCard();

    // optional int32 _banker_player = 10;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional string create_name = 11;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    boolean hasCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    java.lang.String getCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    com.google.protobuf.ByteString
        getCreateNameBytes();
  }
  /**
   * Protobuf type {@code dbd.RoomInfoDbd}
   *
   * <pre>
   *房间信息
   * </pre>
   */
  public static final class RoomInfoDbd extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoDbdOrBuilder {
    // Use RoomInfoDbd.newBuilder() to construct.
    private RoomInfoDbd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoDbd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoDbd defaultInstance;
    public static RoomInfoDbd getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoDbd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoDbd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              gameRuleIndex_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000008;
              gameRuleDes_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              gameTypeIndex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gameRound_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              curRound_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              gameStatus_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              createPlayerId_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              beginLeftCard_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              BankerPlayer_ = input.readInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              createName_ = input.readBytes();
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              gameRuleIndexEx_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomInfoDbd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomInfoDbd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.class, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoDbd> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoDbd>() {
      public RoomInfoDbd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoDbd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoDbd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 room_id = 1;
    public static final int ROOM_ID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional int32 game_type_index = 4;
    public static final int GAME_TYPE_INDEX_FIELD_NUMBER = 4;
    private int gameTypeIndex_;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameTypeIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameTypeIndex() {
      return gameTypeIndex_;
    }

    // optional int32 game_rule_index = 2;
    public static final int GAME_RULE_INDEX_FIELD_NUMBER = 2;
    private int gameRuleIndex_;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameRuleIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameRuleIndex() {
      return gameRuleIndex_;
    }

    // repeated int32 game_rule_index_ex = 12;
    public static final int GAME_RULE_INDEX_EX_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> gameRuleIndexEx_;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameRuleIndexExList() {
      return gameRuleIndexEx_;
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexExCount() {
      return gameRuleIndexEx_.size();
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexEx(int index) {
      return gameRuleIndexEx_.get(index);
    }

    // optional string game_rule_des = 3;
    public static final int GAME_RULE_DES_FIELD_NUMBER = 3;
    private java.lang.Object gameRuleDes_;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public boolean hasGameRuleDes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getGameRuleDes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gameRuleDes_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGameRuleDesBytes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gameRuleDes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 game_round = 5;
    public static final int GAME_ROUND_FIELD_NUMBER = 5;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // optional int32 cur_round = 6;
    public static final int CUR_ROUND_FIELD_NUMBER = 6;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_status = 7;
    public static final int GAME_STATUS_FIELD_NUMBER = 7;
    private int gameStatus_;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public boolean hasGameStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public int getGameStatus() {
      return gameStatus_;
    }

    // optional int64 create_player_id = 8;
    public static final int CREATE_PLAYER_ID_FIELD_NUMBER = 8;
    private long createPlayerId_;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public boolean hasCreatePlayerId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public long getCreatePlayerId() {
      return createPlayerId_;
    }

    // optional int32 begin_left_card = 9;
    public static final int BEGIN_LEFT_CARD_FIELD_NUMBER = 9;
    private int beginLeftCard_;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public boolean hasBeginLeftCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public int getBeginLeftCard() {
      return beginLeftCard_;
    }

    // optional int32 _banker_player = 10;
    public static final int _BANKER_PLAYER_FIELD_NUMBER = 10;
    private int BankerPlayer_;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return BankerPlayer_;
    }

    // optional string create_name = 11;
    public static final int CREATE_NAME_FIELD_NUMBER = 11;
    private java.lang.Object createName_;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public boolean hasCreateName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public java.lang.String getCreateName() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          createName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCreateNameBytes() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomId_ = 0;
      gameTypeIndex_ = 0;
      gameRuleIndex_ = 0;
      gameRuleIndexEx_ = java.util.Collections.emptyList();
      gameRuleDes_ = "";
      gameRound_ = 0;
      curRound_ = 0;
      gameStatus_ = 0;
      createPlayerId_ = 0L;
      beginLeftCard_ = 0;
      BankerPlayer_ = 0;
      createName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCreateNameBytes());
      }
      for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
        output.writeInt32(12, gameRuleIndexEx_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCreateNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameRuleIndexEx_.get(i));
        }
        size += dataSize;
        size += 1 * getGameRuleIndexExList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.RoomInfoDbd}
     *
     * <pre>
     *房间信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomInfoDbd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomInfoDbd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.class, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameTypeIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRuleIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        gameRuleDes_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gameStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        createPlayerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        beginLeftCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        BankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        createName_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomInfoDbd_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd build() {
        protobuf.clazz.dbd.DbdRsp.RoomInfoDbd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd buildPartial() {
        protobuf.clazz.dbd.DbdRsp.RoomInfoDbd result = new protobuf.clazz.dbd.DbdRsp.RoomInfoDbd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameTypeIndex_ = gameTypeIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRuleIndex_ = gameRuleIndex_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.gameRuleIndexEx_ = gameRuleIndexEx_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gameRuleDes_ = gameRuleDes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameRound_ = gameRound_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gameStatus_ = gameStatus_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.createPlayerId_ = createPlayerId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.beginLeftCard_ = beginLeftCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.BankerPlayer_ = BankerPlayer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.createName_ = createName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.RoomInfoDbd) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.RoomInfoDbd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd other) {
        if (other == protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasGameTypeIndex()) {
          setGameTypeIndex(other.getGameTypeIndex());
        }
        if (other.hasGameRuleIndex()) {
          setGameRuleIndex(other.getGameRuleIndex());
        }
        if (!other.gameRuleIndexEx_.isEmpty()) {
          if (gameRuleIndexEx_.isEmpty()) {
            gameRuleIndexEx_ = other.gameRuleIndexEx_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGameRuleIndexExIsMutable();
            gameRuleIndexEx_.addAll(other.gameRuleIndexEx_);
          }
          onChanged();
        }
        if (other.hasGameRuleDes()) {
          bitField0_ |= 0x00000010;
          gameRuleDes_ = other.gameRuleDes_;
          onChanged();
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameStatus()) {
          setGameStatus(other.getGameStatus());
        }
        if (other.hasCreatePlayerId()) {
          setCreatePlayerId(other.getCreatePlayerId());
        }
        if (other.hasBeginLeftCard()) {
          setBeginLeftCard(other.getBeginLeftCard());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCreateName()) {
          bitField0_ |= 0x00000800;
          createName_ = other.createName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.RoomInfoDbd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.RoomInfoDbd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 room_id = 1;
      private int roomId_ ;
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_type_index = 4;
      private int gameTypeIndex_ ;
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameTypeIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameTypeIndex() {
        return gameTypeIndex_;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameTypeIndex(int value) {
        bitField0_ |= 0x00000002;
        gameTypeIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameTypeIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameTypeIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_rule_index = 2;
      private int gameRuleIndex_ ;
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameRuleIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameRuleIndex() {
        return gameRuleIndex_;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameRuleIndex(int value) {
        bitField0_ |= 0x00000004;
        gameRuleIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameRuleIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 game_rule_index_ex = 12;
      private java.util.List<java.lang.Integer> gameRuleIndexEx_ = java.util.Collections.emptyList();
      private void ensureGameRuleIndexExIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>(gameRuleIndexEx_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameRuleIndexExList() {
        return java.util.Collections.unmodifiableList(gameRuleIndexEx_);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexExCount() {
        return gameRuleIndexEx_.size();
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexEx(int index) {
        return gameRuleIndexEx_.get(index);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder setGameRuleIndexEx(
          int index, int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addGameRuleIndexEx(int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addAllGameRuleIndexEx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameRuleIndexExIsMutable();
        super.addAll(values, gameRuleIndexEx_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder clearGameRuleIndexEx() {
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional string game_rule_des = 3;
      private java.lang.Object gameRuleDes_ = "";
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public boolean hasGameRuleDes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getGameRuleDes() {
        java.lang.Object ref = gameRuleDes_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          gameRuleDes_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGameRuleDesBytes() {
        java.lang.Object ref = gameRuleDes_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gameRuleDes_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearGameRuleDes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRuleDes_ = getDefaultInstance().getGameRuleDes();
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }

      // optional int32 game_round = 5;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000020;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_round = 6;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000040;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_status = 7;
      private int gameStatus_ ;
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public boolean hasGameStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public int getGameStatus() {
        return gameStatus_;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder setGameStatus(int value) {
        bitField0_ |= 0x00000080;
        gameStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder clearGameStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gameStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int64 create_player_id = 8;
      private long createPlayerId_ ;
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public boolean hasCreatePlayerId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public long getCreatePlayerId() {
        return createPlayerId_;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder setCreatePlayerId(long value) {
        bitField0_ |= 0x00000100;
        createPlayerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder clearCreatePlayerId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        createPlayerId_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 begin_left_card = 9;
      private int beginLeftCard_ ;
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public boolean hasBeginLeftCard() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public int getBeginLeftCard() {
        return beginLeftCard_;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder setBeginLeftCard(int value) {
        bitField0_ |= 0x00000200;
        beginLeftCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder clearBeginLeftCard() {
        bitField0_ = (bitField0_ & ~0x00000200);
        beginLeftCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 _banker_player = 10;
      private int BankerPlayer_ ;
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return BankerPlayer_;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000400;
        BankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000400);
        BankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string create_name = 11;
      private java.lang.Object createName_ = "";
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public boolean hasCreateName() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public java.lang.String getCreateName() {
        java.lang.Object ref = createName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          createName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCreateNameBytes() {
        java.lang.Object ref = createName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          createName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder clearCreateName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        createName_ = getDefaultInstance().getCreateName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.RoomInfoDbd)
    }

    static {
      defaultInstance = new RoomInfoDbd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.RoomInfoDbd)
  }

  public interface RoomPlayerResponseDbdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 account_id = 1;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    boolean hasAccountId();
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    long getAccountId();

    // optional string user_name = 2;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // optional string head_img_url = 3;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImgUrlBytes();

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    int getSeatIndex();

    // optional string ip = 5;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    java.lang.String getIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // optional int32 online = 6;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    boolean hasOnline();
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    int getOnline();

    // optional int32 sex = 7;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    boolean hasSex();
    /**
     * <code>optional int32 sex = 7;</code>
     */
    int getSex();

    // optional float score = 8;
    /**
     * <code>optional float score = 8;</code>
     */
    boolean hasScore();
    /**
     * <code>optional float score = 8;</code>
     */
    float getScore();

    // optional int32 ready = 9;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    boolean hasReady();
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    int getReady();

    // optional string ip_addr = 10;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    boolean hasIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    java.lang.String getIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddrBytes();

    // optional .LocationInfor locationInfor = 11;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    boolean hasLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInfor getLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder();

    // optional bool is_trustee = 12;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean getIsTrustee();

    // optional int64 money = 13;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    boolean hasMoney();
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    long getMoney();

    // optional int64 gold = 14;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    long getGold();
  }
  /**
   * Protobuf type {@code dbd.RoomPlayerResponseDbd}
   */
  public static final class RoomPlayerResponseDbd extends
      com.google.protobuf.GeneratedMessage
      implements RoomPlayerResponseDbdOrBuilder {
    // Use RoomPlayerResponseDbd.newBuilder() to construct.
    private RoomPlayerResponseDbd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomPlayerResponseDbd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomPlayerResponseDbd defaultInstance;
    public static RoomPlayerResponseDbd getDefaultInstance() {
      return defaultInstance;
    }

    public RoomPlayerResponseDbd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomPlayerResponseDbd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accountId_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              headImgUrl_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seatIndex_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              ip_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              online_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sex_ = input.readInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              score_ = input.readFloat();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              ready_ = input.readInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              ipAddr_ = input.readBytes();
              break;
            }
            case 90: {
              protobuf.clazz.Protocol.LocationInfor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = locationInfor_.toBuilder();
              }
              locationInfor_ = input.readMessage(protobuf.clazz.Protocol.LocationInfor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationInfor_);
                locationInfor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isTrustee_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              money_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gold_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomPlayerResponseDbd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomPlayerResponseDbd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.class, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomPlayerResponseDbd> PARSER =
        new com.google.protobuf.AbstractParser<RoomPlayerResponseDbd>() {
      public RoomPlayerResponseDbd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomPlayerResponseDbd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomPlayerResponseDbd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private long accountId_;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public boolean hasAccountId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public long getAccountId() {
      return accountId_;
    }

    // optional string user_name = 2;
    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string head_img_url = 3;
    public static final int HEAD_IMG_URL_FIELD_NUMBER = 3;
    private java.lang.Object headImgUrl_;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImgUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImgUrl() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImgUrlBytes() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImgUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional string ip = 5;
    public static final int IP_FIELD_NUMBER = 5;
    private java.lang.Object ip_;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 online = 6;
    public static final int ONLINE_FIELD_NUMBER = 6;
    private int online_;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public boolean hasOnline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public int getOnline() {
      return online_;
    }

    // optional int32 sex = 7;
    public static final int SEX_FIELD_NUMBER = 7;
    private int sex_;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional float score = 8;
    public static final int SCORE_FIELD_NUMBER = 8;
    private float score_;
    /**
     * <code>optional float score = 8;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float score = 8;</code>
     */
    public float getScore() {
      return score_;
    }

    // optional int32 ready = 9;
    public static final int READY_FIELD_NUMBER = 9;
    private int ready_;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public boolean hasReady() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public int getReady() {
      return ready_;
    }

    // optional string ip_addr = 10;
    public static final int IP_ADDR_FIELD_NUMBER = 10;
    private java.lang.Object ipAddr_;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public boolean hasIpAddr() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public java.lang.String getIpAddr() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddrBytes() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .LocationInfor locationInfor = 11;
    public static final int LOCATIONINFOR_FIELD_NUMBER = 11;
    private protobuf.clazz.Protocol.LocationInfor locationInfor_;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public boolean hasLocationInfor() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
      return locationInfor_;
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
      return locationInfor_;
    }

    // optional bool is_trustee = 12;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 12;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    // optional int64 money = 13;
    public static final int MONEY_FIELD_NUMBER = 13;
    private long money_;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public boolean hasMoney() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public long getMoney() {
      return money_;
    }

    // optional int64 gold = 14;
    public static final int GOLD_FIELD_NUMBER = 14;
    private long gold_;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public long getGold() {
      return gold_;
    }

    private void initFields() {
      accountId_ = 0L;
      userName_ = "";
      headImgUrl_ = "";
      seatIndex_ = 0;
      ip_ = "";
      online_ = 0;
      sex_ = 0;
      score_ = 0F;
      ready_ = 0;
      ipAddr_ = "";
      locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      isTrustee_ = false;
      money_ = 0L;
      gold_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, gold_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, gold_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.RoomPlayerResponseDbd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomPlayerResponseDbd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomPlayerResponseDbd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.class, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationInforFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accountId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        headImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        online_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        ready_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ipAddr_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        money_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        gold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_RoomPlayerResponseDbd_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd build() {
        protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd buildPartial() {
        protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd result = new protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accountId_ = accountId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headImgUrl_ = headImgUrl_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.online_ = online_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ready_ = ready_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ipAddr_ = ipAddr_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (locationInforBuilder_ == null) {
          result.locationInfor_ = locationInfor_;
        } else {
          result.locationInfor_ = locationInforBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isTrustee_ = isTrustee_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.money_ = money_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gold_ = gold_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd other) {
        if (other == protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          setAccountId(other.getAccountId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasHeadImgUrl()) {
          bitField0_ |= 0x00000004;
          headImgUrl_ = other.headImgUrl_;
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000010;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasIpAddr()) {
          bitField0_ |= 0x00000200;
          ipAddr_ = other.ipAddr_;
          onChanged();
        }
        if (other.hasLocationInfor()) {
          mergeLocationInfor(other.getLocationInfor());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 account_id = 1;
      private long accountId_ ;
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public boolean hasAccountId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public long getAccountId() {
        return accountId_;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder setAccountId(long value) {
        bitField0_ |= 0x00000001;
        accountId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder clearAccountId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accountId_ = 0L;
        onChanged();
        return this;
      }

      // optional string user_name = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      // optional string head_img_url = 3;
      private java.lang.Object headImgUrl_ = "";
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImgUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImgUrl() {
        java.lang.Object ref = headImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImgUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImgUrlBytes() {
        java.lang.Object ref = headImgUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImgUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string ip = 5;
      private java.lang.Object ip_ = "";
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }

      // optional int32 online = 6;
      private int online_ ;
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public boolean hasOnline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public int getOnline() {
        return online_;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder setOnline(int value) {
        bitField0_ |= 0x00000020;
        online_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder clearOnline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        online_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sex = 7;
      private int sex_ ;
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000040;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional float score = 8;
      private float score_ ;
      /**
       * <code>optional float score = 8;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public float getScore() {
        return score_;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder setScore(float value) {
        bitField0_ |= 0x00000080;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 ready = 9;
      private int ready_ ;
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public boolean hasReady() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public int getReady() {
        return ready_;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder setReady(int value) {
        bitField0_ |= 0x00000100;
        ready_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder clearReady() {
        bitField0_ = (bitField0_ & ~0x00000100);
        ready_ = 0;
        onChanged();
        return this;
      }

      // optional string ip_addr = 10;
      private java.lang.Object ipAddr_ = "";
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public boolean hasIpAddr() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public java.lang.String getIpAddr() {
        java.lang.Object ref = ipAddr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddrBytes() {
        java.lang.Object ref = ipAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder clearIpAddr() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ipAddr_ = getDefaultInstance().getIpAddr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }

      // optional .LocationInfor locationInfor = 11;
      private protobuf.clazz.Protocol.LocationInfor locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> locationInforBuilder_;
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public boolean hasLocationInfor() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
        if (locationInforBuilder_ == null) {
          return locationInfor_;
        } else {
          return locationInforBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationInfor_ = value;
          onChanged();
        } else {
          locationInforBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(
          protobuf.clazz.Protocol.LocationInfor.Builder builderForValue) {
        if (locationInforBuilder_ == null) {
          locationInfor_ = builderForValue.build();
          onChanged();
        } else {
          locationInforBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder mergeLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              locationInfor_ != protobuf.clazz.Protocol.LocationInfor.getDefaultInstance()) {
            locationInfor_ =
              protobuf.clazz.Protocol.LocationInfor.newBuilder(locationInfor_).mergeFrom(value).buildPartial();
          } else {
            locationInfor_ = value;
          }
          onChanged();
        } else {
          locationInforBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder clearLocationInfor() {
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
          onChanged();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor.Builder getLocationInforBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getLocationInforFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
        if (locationInforBuilder_ != null) {
          return locationInforBuilder_.getMessageOrBuilder();
        } else {
          return locationInfor_;
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> 
          getLocationInforFieldBuilder() {
        if (locationInforBuilder_ == null) {
          locationInforBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder>(
                  locationInfor_,
                  getParentForChildren(),
                  isClean());
          locationInfor_ = null;
        }
        return locationInforBuilder_;
      }

      // optional bool is_trustee = 12;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000800;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // optional int64 money = 13;
      private long money_ ;
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public boolean hasMoney() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public long getMoney() {
        return money_;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder setMoney(long value) {
        bitField0_ |= 0x00001000;
        money_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder clearMoney() {
        bitField0_ = (bitField0_ & ~0x00001000);
        money_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 gold = 14;
      private long gold_ ;
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public long getGold() {
        return gold_;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder setGold(long value) {
        bitField0_ |= 0x00002000;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gold_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.RoomPlayerResponseDbd)
    }

    static {
      defaultInstance = new RoomPlayerResponseDbd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.RoomPlayerResponseDbd)
  }

  public interface OutCardDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // optional int32 cur_player_ya_pai = 7;
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 pr_cards_data = 8;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 9;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 10;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 11;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 12;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 13;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated string difen_bomb_des = 14;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // repeated int32 user_card_count = 15;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardCountList();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCountCount();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount(int index);

    // repeated .Int32ArrayResponse user_cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index);

    // optional int32 bomb_score = 17;
    /**
     * <code>optional int32 bomb_score = 17;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    boolean hasBombScore();
    /**
     * <code>optional int32 bomb_score = 17;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    int getBombScore();
  }
  /**
   * Protobuf type {@code dbd.OutCardData}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardData extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataOrBuilder {
    // Use OutCardData.newBuilder() to construct.
    private OutCardData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardData defaultInstance;
    public static OutCardData getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00002000;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              userCardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              userCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              bitField0_ |= 0x00000200;
              bombScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.OutCardData.class, protobuf.clazz.dbd.DbdRsp.OutCardData.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardData> PARSER =
        new com.google.protobuf.AbstractParser<OutCardData>() {
      public OutCardData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional int32 cur_player_ya_pai = 7;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 7;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 pr_cards_data = 8;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 9;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 10;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 10;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 11;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 11;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 12;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 12;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 13;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 13;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated string difen_bomb_des = 14;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 14;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // repeated int32 user_card_count = 15;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> userCardCount_;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardCountList() {
      return userCardCount_;
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCountCount() {
      return userCardCount_.size();
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount(int index) {
      return userCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse user_cards_data = 16;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
      return userCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index) {
      return userCardsData_.get(index);
    }

    // optional int32 bomb_score = 17;
    public static final int BOMB_SCORE_FIELD_NUMBER = 17;
    private int bombScore_;
    /**
     * <code>optional int32 bomb_score = 17;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public boolean hasBombScore() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 bomb_score = 17;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public int getBombScore() {
      return bombScore_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      curPlayerYaPai_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      userCardCount_ = java.util.Collections.emptyList();
      userCardsData_ = java.util.Collections.emptyList();
      bombScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, curPlayerYaPai_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(8, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(9, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, displayTime_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(14, difenBombDes_.getByteString(i));
      }
      for (int i = 0; i < userCardCount_.size(); i++) {
        output.writeInt32(15, userCardCount_.get(i));
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeMessage(16, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(17, bombScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardCountList().size();
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, bombScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.OutCardData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.OutCardData}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.OutCardDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.OutCardData.class, protobuf.clazz.dbd.DbdRsp.OutCardData.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.OutCardData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          userCardsDataBuilder_.clear();
        }
        bombScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.OutCardData.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData build() {
        protobuf.clazz.dbd.DbdRsp.OutCardData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData buildPartial() {
        protobuf.clazz.dbd.DbdRsp.OutCardData result = new protobuf.clazz.dbd.DbdRsp.OutCardData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.userCardCount_ = userCardCount_;
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.bombScore_ = bombScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.OutCardData) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.OutCardData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.OutCardData other) {
        if (other == protobuf.clazz.dbd.DbdRsp.OutCardData.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (!other.userCardCount_.isEmpty()) {
          if (userCardCount_.isEmpty()) {
            userCardCount_ = other.userCardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureUserCardCountIsMutable();
            userCardCount_.addAll(other.userCardCount_);
          }
          onChanged();
        }
        if (userCardsDataBuilder_ == null) {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsData_.isEmpty()) {
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureUserCardsDataIsMutable();
              userCardsData_.addAll(other.userCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsDataBuilder_.isEmpty()) {
              userCardsDataBuilder_.dispose();
              userCardsDataBuilder_ = null;
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              userCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCardsDataFieldBuilder() : null;
            } else {
              userCardsDataBuilder_.addAllMessages(other.userCardsData_);
            }
          }
        }
        if (other.hasBombScore()) {
          setBombScore(other.getBombScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.OutCardData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.OutCardData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 7;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x00000040;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 8;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 9;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 10;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000200;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 11;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000400;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 12;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00000800;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 13;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00001000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 14;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // repeated int32 user_card_count = 15;
      private java.util.List<java.lang.Integer> userCardCount_ = java.util.Collections.emptyList();
      private void ensureUserCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = new java.util.ArrayList<java.lang.Integer>(userCardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardCountList() {
        return java.util.Collections.unmodifiableList(userCardCount_);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCountCount() {
        return userCardCount_.size();
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount(int index) {
        return userCardCount_.get(index);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(
          int index, int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addUserCardCount(int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllUserCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardCountIsMutable();
        super.addAll(values, userCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_ =
        java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
        if (userCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCardsData_);
        } else {
          return userCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.size();
        } else {
          return userCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);
        } else {
          return userCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          super.addAll(values, userCardsData_);
          onChanged();
        } else {
          userCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.remove(index);
          onChanged();
        } else {
          userCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
          int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);  } else {
          return userCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCardsDataOrBuilderList() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder() {
        return getUserCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCardsDataBuilderList() {
        return getUserCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // optional int32 bomb_score = 17;
      private int bombScore_ ;
      /**
       * <code>optional int32 bomb_score = 17;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public boolean hasBombScore() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 bomb_score = 17;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public int getBombScore() {
        return bombScore_;
      }
      /**
       * <code>optional int32 bomb_score = 17;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder setBombScore(int value) {
        bitField0_ |= 0x00010000;
        bombScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bomb_score = 17;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder clearBombScore() {
        bitField0_ = (bitField0_ & ~0x00010000);
        bombScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.OutCardData)
    }

    static {
      defaultInstance = new OutCardData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.OutCardData)
  }

  public interface PukeGameEndDbdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .dbd.RoomInfoDbd room_info = 1;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 6;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // repeated .Int32ArrayResponse end_score = 7;
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getEndScoreList();
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getEndScore(int index);
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getEndScoreOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getEndScoreOrBuilder(
        int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 9;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 10;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 chun_tian_player = 11;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    java.util.List<java.lang.Integer> getChunTianPlayerList();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayerCount();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayer(int index);

    // optional int32 di_chi_score = 19;
    /**
     * <code>optional int32 di_chi_score = 19;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    boolean hasDiChiScore();
    /**
     * <code>optional int32 di_chi_score = 19;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    int getDiChiScore();

    // optional int32 init_di_chi_score = 20;
    /**
     * <code>optional int32 init_di_chi_score = 20;</code>
     *
     * <pre>
     *初始底池
     * </pre>
     */
    boolean hasInitDiChiScore();
    /**
     * <code>optional int32 init_di_chi_score = 20;</code>
     *
     * <pre>
     *初始底池
     * </pre>
     */
    int getInitDiChiScore();

    // repeated int32 boom_score = 21;
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomScoreList();
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    int getBoomScoreCount();
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    int getBoomScore(int index);

    // repeated int32 di_score = 22;
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiScoreList();
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getDiScoreCount();
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getDiScore(int index);

    // repeated int32 bu_tang_score = 23;
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    java.util.List<java.lang.Integer> getBuTangScoreList();
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    int getBuTangScoreCount();
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    int getBuTangScore(int index);

    // repeated int32 tang_zi_score = 24;
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    java.util.List<java.lang.Integer> getTangZiScoreList();
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    int getTangZiScoreCount();
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    int getTangZiScore(int index);

    // repeated int32 cal_score = 25;
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    java.util.List<java.lang.Integer> getCalScoreList();
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    int getCalScoreCount();
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    int getCalScore(int index);

    // repeated int32 all_boom_card_num = 12;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBoomCardNumList();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNumCount();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNum(int index);

    // repeated float all_end_score = 13;
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    java.util.List<java.lang.Float> getAllEndScoreList();
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    float getAllEndScore(int index);

    // repeated int32 end_score_max = 14;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 15;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 16;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .dbd.RoomPlayerResponseDbd players = 17;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> 
        getPlayersList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index);
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dbd.PukeGameEndDbd}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndDbd extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndDbdOrBuilder {
    // Use PukeGameEndDbd.newBuilder() to construct.
    private PukeGameEndDbd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndDbd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndDbd defaultInstance;
    public static PukeGameEndDbd getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndDbd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndDbd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              chunTianPlayer_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                chunTianPlayer_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              allBoomCardNum_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBoomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 109: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00080000;
              }
              allEndScore_.add(input.readFloat());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>();
                mutable_bitField0_ |= 0x00800000;
              }
              players_.add(input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              bitField0_ |= 0x00000040;
              diChiScore_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000080;
              initDiChiScore_ = input.readInt32();
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                boomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              boomScore_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                boomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                diScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              diScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                diScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                buTangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              buTangScore_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                buTangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                buTangScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                tangZiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              tangZiScore_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                tangZiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                tangZiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                calScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              calScore_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                calScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                calScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          boomScore_ = java.util.Collections.unmodifiableList(boomScore_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          diScore_ = java.util.Collections.unmodifiableList(diScore_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          buTangScore_ = java.util.Collections.unmodifiableList(buTangScore_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          tangZiScore_ = java.util.Collections.unmodifiableList(tangZiScore_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          calScore_ = java.util.Collections.unmodifiableList(calScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_PukeGameEndDbd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_PukeGameEndDbd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.class, protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndDbd> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndDbd>() {
      public PukeGameEndDbd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndDbd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndDbd> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .dbd.RoomInfoDbd room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 6;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // repeated .Int32ArrayResponse end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> endScore_;
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getEndScoreOrBuilderList() {
      return endScore_;
    }
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getEndScore(int index) {
      return endScore_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getEndScoreOrBuilder(
        int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 9;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 9;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 10;
    public static final int REASON_FIELD_NUMBER = 10;
    private int reason_;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 chun_tian_player = 11;
    public static final int CHUN_TIAN_PLAYER_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> chunTianPlayer_;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChunTianPlayerList() {
      return chunTianPlayer_;
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayerCount() {
      return chunTianPlayer_.size();
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayer(int index) {
      return chunTianPlayer_.get(index);
    }

    // optional int32 di_chi_score = 19;
    public static final int DI_CHI_SCORE_FIELD_NUMBER = 19;
    private int diChiScore_;
    /**
     * <code>optional int32 di_chi_score = 19;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public boolean hasDiChiScore() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 di_chi_score = 19;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public int getDiChiScore() {
      return diChiScore_;
    }

    // optional int32 init_di_chi_score = 20;
    public static final int INIT_DI_CHI_SCORE_FIELD_NUMBER = 20;
    private int initDiChiScore_;
    /**
     * <code>optional int32 init_di_chi_score = 20;</code>
     *
     * <pre>
     *初始底池
     * </pre>
     */
    public boolean hasInitDiChiScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 init_di_chi_score = 20;</code>
     *
     * <pre>
     *初始底池
     * </pre>
     */
    public int getInitDiChiScore() {
      return initDiChiScore_;
    }

    // repeated int32 boom_score = 21;
    public static final int BOOM_SCORE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> boomScore_;
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomScoreList() {
      return boomScore_;
    }
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public int getBoomScoreCount() {
      return boomScore_.size();
    }
    /**
     * <code>repeated int32 boom_score = 21;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public int getBoomScore(int index) {
      return boomScore_.get(index);
    }

    // repeated int32 di_score = 22;
    public static final int DI_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> diScore_;
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiScoreList() {
      return diScore_;
    }
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getDiScoreCount() {
      return diScore_.size();
    }
    /**
     * <code>repeated int32 di_score = 22;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getDiScore(int index) {
      return diScore_.get(index);
    }

    // repeated int32 bu_tang_score = 23;
    public static final int BU_TANG_SCORE_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> buTangScore_;
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBuTangScoreList() {
      return buTangScore_;
    }
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    public int getBuTangScoreCount() {
      return buTangScore_.size();
    }
    /**
     * <code>repeated int32 bu_tang_score = 23;</code>
     *
     * <pre>
     *开局补堂
     * </pre>
     */
    public int getBuTangScore(int index) {
      return buTangScore_.get(index);
    }

    // repeated int32 tang_zi_score = 24;
    public static final int TANG_ZI_SCORE_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> tangZiScore_;
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTangZiScoreList() {
      return tangZiScore_;
    }
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    public int getTangZiScoreCount() {
      return tangZiScore_.size();
    }
    /**
     * <code>repeated int32 tang_zi_score = 24;</code>
     *
     * <pre>
     *堂分
     * </pre>
     */
    public int getTangZiScore(int index) {
      return tangZiScore_.get(index);
    }

    // repeated int32 cal_score = 25;
    public static final int CAL_SCORE_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> calScore_;
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCalScoreList() {
      return calScore_;
    }
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    public int getCalScoreCount() {
      return calScore_.size();
    }
    /**
     * <code>repeated int32 cal_score = 25;</code>
     *
     * <pre>
     *单句结算分
     * </pre>
     */
    public int getCalScore(int index) {
      return calScore_.get(index);
    }

    // repeated int32 all_boom_card_num = 12;
    public static final int ALL_BOOM_CARD_NUM_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> allBoomCardNum_;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBoomCardNumList() {
      return allBoomCardNum_;
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNumCount() {
      return allBoomCardNum_.size();
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNum(int index) {
      return allBoomCardNum_.get(index);
    }

    // repeated float all_end_score = 13;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Float> allEndScore_;
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated float all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public float getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 14;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 15;
    public static final int WIN_NUM_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 16;
    public static final int LOSE_NUM_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .dbd.RoomPlayerResponseDbd players = 17;
    public static final int PLAYERS_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      chunTianPlayer_ = java.util.Collections.emptyList();
      diChiScore_ = 0;
      initDiChiScore_ = 0;
      boomScore_ = java.util.Collections.emptyList();
      diScore_ = java.util.Collections.emptyList();
      buTangScore_ = java.util.Collections.emptyList();
      tangZiScore_ = java.util.Collections.emptyList();
      calScore_ = java.util.Collections.emptyList();
      allBoomCardNum_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(6, boomCardNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeMessage(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, reason_);
      }
      for (int i = 0; i < chunTianPlayer_.size(); i++) {
        output.writeInt32(11, chunTianPlayer_.get(i));
      }
      for (int i = 0; i < allBoomCardNum_.size(); i++) {
        output.writeInt32(12, allBoomCardNum_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeFloat(13, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(14, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(15, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(16, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(17, players_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(19, diChiScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(20, initDiChiScore_);
      }
      for (int i = 0; i < boomScore_.size(); i++) {
        output.writeInt32(21, boomScore_.get(i));
      }
      for (int i = 0; i < diScore_.size(); i++) {
        output.writeInt32(22, diScore_.get(i));
      }
      for (int i = 0; i < buTangScore_.size(); i++) {
        output.writeInt32(23, buTangScore_.get(i));
      }
      for (int i = 0; i < tangZiScore_.size(); i++) {
        output.writeInt32(24, tangZiScore_.get(i));
      }
      for (int i = 0; i < calScore_.size(); i++) {
        output.writeInt32(25, calScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      for (int i = 0; i < endScore_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chunTianPlayer_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chunTianPlayer_.get(i));
        }
        size += dataSize;
        size += 1 * getChunTianPlayerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBoomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBoomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getAllBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAllEndScoreList().size();
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, players_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, diChiScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, initDiChiScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomScore_.get(i));
        }
        size += dataSize;
        size += 2 * getBoomScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diScore_.get(i));
        }
        size += dataSize;
        size += 2 * getDiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buTangScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(buTangScore_.get(i));
        }
        size += dataSize;
        size += 2 * getBuTangScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tangZiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(tangZiScore_.get(i));
        }
        size += dataSize;
        size += 2 * getTangZiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < calScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(calScore_.get(i));
        }
        size += dataSize;
        size += 2 * getCalScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.PukeGameEndDbd}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.PukeGameEndDbdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_PukeGameEndDbd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_PukeGameEndDbd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.class, protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getEndScoreFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        if (endScoreBuilder_ == null) {
          endScore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          endScoreBuilder_.clear();
        }
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        diChiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        initDiChiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        boomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        diScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        buTangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        tangZiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        calScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_PukeGameEndDbd_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd build() {
        protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd buildPartial() {
        protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd result = new protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.boomCardNum_ = boomCardNum_;
        if (endScoreBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            endScore_ = java.util.Collections.unmodifiableList(endScore_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.endScore_ = endScore_;
        } else {
          result.endScore_ = endScoreBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.chunTianPlayer_ = chunTianPlayer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.diChiScore_ = diChiScore_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.initDiChiScore_ = initDiChiScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          boomScore_ = java.util.Collections.unmodifiableList(boomScore_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.boomScore_ = boomScore_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          diScore_ = java.util.Collections.unmodifiableList(diScore_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.diScore_ = diScore_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          buTangScore_ = java.util.Collections.unmodifiableList(buTangScore_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.buTangScore_ = buTangScore_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          tangZiScore_ = java.util.Collections.unmodifiableList(tangZiScore_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.tangZiScore_ = tangZiScore_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          calScore_ = java.util.Collections.unmodifiableList(calScore_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.calScore_ = calScore_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.allBoomCardNum_ = allBoomCardNum_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00800000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd other) {
        if (other == protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (endScoreBuilder_ == null) {
          if (!other.endScore_.isEmpty()) {
            if (endScore_.isEmpty()) {
              endScore_ = other.endScore_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureEndScoreIsMutable();
              endScore_.addAll(other.endScore_);
            }
            onChanged();
          }
        } else {
          if (!other.endScore_.isEmpty()) {
            if (endScoreBuilder_.isEmpty()) {
              endScoreBuilder_.dispose();
              endScoreBuilder_ = null;
              endScore_ = other.endScore_;
              bitField0_ = (bitField0_ & ~0x00000040);
              endScoreBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEndScoreFieldBuilder() : null;
            } else {
              endScoreBuilder_.addAllMessages(other.endScore_);
            }
          }
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.chunTianPlayer_.isEmpty()) {
          if (chunTianPlayer_.isEmpty()) {
            chunTianPlayer_ = other.chunTianPlayer_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureChunTianPlayerIsMutable();
            chunTianPlayer_.addAll(other.chunTianPlayer_);
          }
          onChanged();
        }
        if (other.hasDiChiScore()) {
          setDiChiScore(other.getDiChiScore());
        }
        if (other.hasInitDiChiScore()) {
          setInitDiChiScore(other.getInitDiChiScore());
        }
        if (!other.boomScore_.isEmpty()) {
          if (boomScore_.isEmpty()) {
            boomScore_ = other.boomScore_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureBoomScoreIsMutable();
            boomScore_.addAll(other.boomScore_);
          }
          onChanged();
        }
        if (!other.diScore_.isEmpty()) {
          if (diScore_.isEmpty()) {
            diScore_ = other.diScore_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureDiScoreIsMutable();
            diScore_.addAll(other.diScore_);
          }
          onChanged();
        }
        if (!other.buTangScore_.isEmpty()) {
          if (buTangScore_.isEmpty()) {
            buTangScore_ = other.buTangScore_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureBuTangScoreIsMutable();
            buTangScore_.addAll(other.buTangScore_);
          }
          onChanged();
        }
        if (!other.tangZiScore_.isEmpty()) {
          if (tangZiScore_.isEmpty()) {
            tangZiScore_ = other.tangZiScore_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureTangZiScoreIsMutable();
            tangZiScore_.addAll(other.tangZiScore_);
          }
          onChanged();
        }
        if (!other.calScore_.isEmpty()) {
          if (calScore_.isEmpty()) {
            calScore_ = other.calScore_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureCalScoreIsMutable();
            calScore_.addAll(other.calScore_);
          }
          onChanged();
        }
        if (!other.allBoomCardNum_.isEmpty()) {
          if (allBoomCardNum_.isEmpty()) {
            allBoomCardNum_ = other.allBoomCardNum_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureAllBoomCardNumIsMutable();
            allBoomCardNum_.addAll(other.allBoomCardNum_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.PukeGameEndDbd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .dbd.RoomInfoDbd room_info = 1;
      private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 6;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse end_score = 7;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> endScore_ =
        java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> endScoreBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getEndScoreList() {
        if (endScoreBuilder_ == null) {
          return java.util.Collections.unmodifiableList(endScore_);
        } else {
          return endScoreBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScoreCount() {
        if (endScoreBuilder_ == null) {
          return endScore_.size();
        } else {
          return endScoreBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getEndScore(int index) {
        if (endScoreBuilder_ == null) {
          return endScore_.get(index);
        } else {
          return endScoreBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (endScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEndScoreIsMutable();
          endScore_.set(index, value);
          onChanged();
        } else {
          endScoreBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (endScoreBuilder_ == null) {
          ensureEndScoreIsMutable();
          endScore_.set(index, builderForValue.build());
          onChanged();
        } else {
          endScoreBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (endScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEndScoreIsMutable();
          endScore_.add(value);
          onChanged();
        } else {
          endScoreBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (endScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEndScoreIsMutable();
          endScore_.add(index, value);
          onChanged();
        } else {
          endScoreBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (endScoreBuilder_ == null) {
          ensureEndScoreIsMutable();
          endScore_.add(builderForValue.build());
          onChanged();
        } else {
          endScoreBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (endScoreBuilder_ == null) {
          ensureEndScoreIsMutable();
          endScore_.add(index, builderForValue.build());
          onChanged();
        } else {
          endScoreBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (endScoreBuilder_ == null) {
          ensureEndScoreIsMutable();
          super.addAll(values, endScore_);
          onChanged();
        } else {
          endScoreBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder clearEndScore() {
        if (endScoreBuilder_ == null) {
          endScore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          endScoreBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder removeEndScore(int index) {
        if (endScoreBuilder_ == null) {
          ensureEndScoreIsMutable();
          endScore_.remove(index);
          onChanged();
        } else {
          endScoreBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getEndScoreBuilder(
          int index) {
        return getEndScoreFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getEndScoreOrBuilder(
          int index) {
        if (endScoreBuilder_ == null) {
          return endScore_.get(index);  } else {
          return endScoreBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getEndScoreOrBuilderList() {
        if (endScoreBuilder_ != null) {
          return endScoreBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(endScore_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addEndScoreBuilder() {
        return getEndScoreFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addEndScoreBuilder(
          int index) {
        return getEndScoreFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getEndScoreBuilderList() {
        return getEndScoreFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getEndScoreFieldBuilder() {
        if (endScoreBuilder_ == null) {
          endScoreBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  endScore_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          endScore_ = null;
        }
        return endScoreBuilder_;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000080;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 9;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000100;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 10;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000200;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 chun_tian_player = 11;
      private java.util.List<java.lang.Integer> chunTianPlayer_ = java.util.Collections.emptyList();
      private void ensureChunTianPlayerIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>(chunTianPlayer_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChunTianPlayerList() {
        return java.util.Collections.unmodifiableList(chunTianPlayer_);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayerCount() {
        return chunTianPlayer_.size();
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayer(int index) {
        return chunTianPlayer_.get(index);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder setChunTianPlayer(
          int index, int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addChunTianPlayer(int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addAllChunTianPlayer(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChunTianPlayerIsMutable();
        super.addAll(values, chunTianPlayer_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder clearChunTianPlayer() {
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 di_chi_score = 19;
      private int diChiScore_ ;
      /**
       * <code>optional int32 di_chi_score = 19;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public boolean hasDiChiScore() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 di_chi_score = 19;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public int getDiChiScore() {
        return diChiScore_;
      }
      /**
       * <code>optional int32 di_chi_score = 19;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder setDiChiScore(int value) {
        bitField0_ |= 0x00000800;
        diChiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_chi_score = 19;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder clearDiChiScore() {
        bitField0_ = (bitField0_ & ~0x00000800);
        diChiScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 init_di_chi_score = 20;
      private int initDiChiScore_ ;
      /**
       * <code>optional int32 init_di_chi_score = 20;</code>
       *
       * <pre>
       *初始底池
       * </pre>
       */
      public boolean hasInitDiChiScore() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 init_di_chi_score = 20;</code>
       *
       * <pre>
       *初始底池
       * </pre>
       */
      public int getInitDiChiScore() {
        return initDiChiScore_;
      }
      /**
       * <code>optional int32 init_di_chi_score = 20;</code>
       *
       * <pre>
       *初始底池
       * </pre>
       */
      public Builder setInitDiChiScore(int value) {
        bitField0_ |= 0x00001000;
        initDiChiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 init_di_chi_score = 20;</code>
       *
       * <pre>
       *初始底池
       * </pre>
       */
      public Builder clearInitDiChiScore() {
        bitField0_ = (bitField0_ & ~0x00001000);
        initDiChiScore_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 boom_score = 21;
      private java.util.List<java.lang.Integer> boomScore_ = java.util.Collections.emptyList();
      private void ensureBoomScoreIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          boomScore_ = new java.util.ArrayList<java.lang.Integer>(boomScore_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomScoreList() {
        return java.util.Collections.unmodifiableList(boomScore_);
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public int getBoomScoreCount() {
        return boomScore_.size();
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public int getBoomScore(int index) {
        return boomScore_.get(index);
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder setBoomScore(
          int index, int value) {
        ensureBoomScoreIsMutable();
        boomScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder addBoomScore(int value) {
        ensureBoomScoreIsMutable();
        boomScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder addAllBoomScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomScoreIsMutable();
        super.addAll(values, boomScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 21;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder clearBoomScore() {
        boomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 di_score = 22;
      private java.util.List<java.lang.Integer> diScore_ = java.util.Collections.emptyList();
      private void ensureDiScoreIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          diScore_ = new java.util.ArrayList<java.lang.Integer>(diScore_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiScoreList() {
        return java.util.Collections.unmodifiableList(diScore_);
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getDiScoreCount() {
        return diScore_.size();
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getDiScore(int index) {
        return diScore_.get(index);
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setDiScore(
          int index, int value) {
        ensureDiScoreIsMutable();
        diScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder addDiScore(int value) {
        ensureDiScoreIsMutable();
        diScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder addAllDiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiScoreIsMutable();
        super.addAll(values, diScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_score = 22;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearDiScore() {
        diScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 bu_tang_score = 23;
      private java.util.List<java.lang.Integer> buTangScore_ = java.util.Collections.emptyList();
      private void ensureBuTangScoreIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          buTangScore_ = new java.util.ArrayList<java.lang.Integer>(buTangScore_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBuTangScoreList() {
        return java.util.Collections.unmodifiableList(buTangScore_);
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public int getBuTangScoreCount() {
        return buTangScore_.size();
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public int getBuTangScore(int index) {
        return buTangScore_.get(index);
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public Builder setBuTangScore(
          int index, int value) {
        ensureBuTangScoreIsMutable();
        buTangScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public Builder addBuTangScore(int value) {
        ensureBuTangScoreIsMutable();
        buTangScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public Builder addAllBuTangScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBuTangScoreIsMutable();
        super.addAll(values, buTangScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bu_tang_score = 23;</code>
       *
       * <pre>
       *开局补堂
       * </pre>
       */
      public Builder clearBuTangScore() {
        buTangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated int32 tang_zi_score = 24;
      private java.util.List<java.lang.Integer> tangZiScore_ = java.util.Collections.emptyList();
      private void ensureTangZiScoreIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          tangZiScore_ = new java.util.ArrayList<java.lang.Integer>(tangZiScore_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTangZiScoreList() {
        return java.util.Collections.unmodifiableList(tangZiScore_);
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public int getTangZiScoreCount() {
        return tangZiScore_.size();
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public int getTangZiScore(int index) {
        return tangZiScore_.get(index);
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public Builder setTangZiScore(
          int index, int value) {
        ensureTangZiScoreIsMutable();
        tangZiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public Builder addTangZiScore(int value) {
        ensureTangZiScoreIsMutable();
        tangZiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public Builder addAllTangZiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTangZiScoreIsMutable();
        super.addAll(values, tangZiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tang_zi_score = 24;</code>
       *
       * <pre>
       *堂分
       * </pre>
       */
      public Builder clearTangZiScore() {
        tangZiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 cal_score = 25;
      private java.util.List<java.lang.Integer> calScore_ = java.util.Collections.emptyList();
      private void ensureCalScoreIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          calScore_ = new java.util.ArrayList<java.lang.Integer>(calScore_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCalScoreList() {
        return java.util.Collections.unmodifiableList(calScore_);
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public int getCalScoreCount() {
        return calScore_.size();
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public int getCalScore(int index) {
        return calScore_.get(index);
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public Builder setCalScore(
          int index, int value) {
        ensureCalScoreIsMutable();
        calScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public Builder addCalScore(int value) {
        ensureCalScoreIsMutable();
        calScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public Builder addAllCalScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCalScoreIsMutable();
        super.addAll(values, calScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cal_score = 25;</code>
       *
       * <pre>
       *单句结算分
       * </pre>
       */
      public Builder clearCalScore() {
        calScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 all_boom_card_num = 12;
      private java.util.List<java.lang.Integer> allBoomCardNum_ = java.util.Collections.emptyList();
      private void ensureAllBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>(allBoomCardNum_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBoomCardNumList() {
        return java.util.Collections.unmodifiableList(allBoomCardNum_);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNumCount() {
        return allBoomCardNum_.size();
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNum(int index) {
        return allBoomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllBoomCardNum(
          int index, int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllBoomCardNum(int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBoomCardNumIsMutable();
        super.addAll(values, allBoomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllBoomCardNum() {
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated float all_end_score = 13;
      private java.util.List<java.lang.Float> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Float>(allEndScore_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public float getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder setAllEndScore(
          int index, float value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllEndScore(float value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 14;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 15;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 16;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated .dbd.RoomPlayerResponseDbd players = 17;
      private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>(players_);
          bitField0_ |= 0x00800000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder addPlayers(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 17;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00800000) == 0x00800000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dbd.PukeGameEndDbd)
    }

    static {
      defaultInstance = new PukeGameEndDbd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.PukeGameEndDbd)
  }

  public interface TableResponseDBDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse out_change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    int getOutChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 11;
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 12;
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 15;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .dbd.RoomInfoDbd room_info = 18;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder();

    // repeated .dbd.RoomPlayerResponseDbd players = 19;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> 
        getPlayersList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index);
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 is_current_first_out = 20;
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    int getIsCurrentFirstOut();

    // optional int32 cur_player_ya_pai = 21;
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 hand_card_count = 22;
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 23;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // repeated int32 user_call_banker_score = 24;
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCallBankerScoreList();
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    int getUserCallBankerScoreCount();
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    int getUserCallBankerScore(int index);

    // optional int32 call_score_max = 25;
    /**
     * <code>optional int32 call_score_max = 25;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    boolean hasCallScoreMax();
    /**
     * <code>optional int32 call_score_max = 25;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    int getCallScoreMax();

    // optional int32 call_score_min = 26;
    /**
     * <code>optional int32 call_score_min = 26;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    boolean hasCallScoreMin();
    /**
     * <code>optional int32 call_score_min = 26;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    int getCallScoreMin();

    // optional int32 times = 27;
    /**
     * <code>optional int32 times = 27;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimes();
    /**
     * <code>optional int32 times = 27;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimes();

    // optional int32 di_card_count = 28;
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiCardCount();
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiCardCount();

    // repeated int32 di_cards_data = 29;
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiCardsDataList();
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsDataCount();
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsData(int index);

    // optional int32 di_chi_score = 30;
    /**
     * <code>optional int32 di_chi_score = 30;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    boolean hasDiChiScore();
    /**
     * <code>optional int32 di_chi_score = 30;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    int getDiChiScore();

    // optional int32 tang_zi_score = 31;
    /**
     * <code>optional int32 tang_zi_score = 31;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    boolean hasTangZiScore();
    /**
     * <code>optional int32 tang_zi_score = 31;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    int getTangZiScore();

    // optional int32 bomb_score = 32;
    /**
     * <code>optional int32 bomb_score = 32;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    boolean hasBombScore();
    /**
     * <code>optional int32 bomb_score = 32;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    int getBombScore();

    // optional int32 banker_score = 16;
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    boolean hasBankerScore();
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    int getBankerScore();

    // optional int32 call_score_current = 33;
    /**
     * <code>optional int32 call_score_current = 33;</code>
     */
    boolean hasCallScoreCurrent();
    /**
     * <code>optional int32 call_score_current = 33;</code>
     */
    int getCallScoreCurrent();
  }
  /**
   * Protobuf type {@code dbd.TableResponseDBD}
   */
  public static final class TableResponseDBD extends
      com.google.protobuf.GeneratedMessage
      implements TableResponseDBDOrBuilder {
    // Use TableResponseDBD.newBuilder() to construct.
    private TableResponseDBD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponseDBD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponseDBD defaultInstance;
    public static TableResponseDBD getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponseDBD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponseDBD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outChangeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              outChangeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00040000;
              bankerScore_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 146: {
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000400;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 186: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00200000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                userCallBankerScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              userCallBankerScore_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                userCallBankerScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCallBankerScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              bitField0_ |= 0x00000800;
              callScoreMax_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x00001000;
              callScoreMin_ = input.readInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x00002000;
              times_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x00004000;
              diCardCount_ = input.readInt32();
              break;
            }
            case 232: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              diCardsData_.add(input.readInt32());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 240: {
              bitField0_ |= 0x00008000;
              diChiScore_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00010000;
              tangZiScore_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x00020000;
              bombScore_ = input.readInt32();
              break;
            }
            case 264: {
              bitField0_ |= 0x00080000;
              callScoreCurrent_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outChangeCardsData_ = java.util.Collections.unmodifiableList(outChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          userCallBankerScore_ = java.util.Collections.unmodifiableList(userCallBankerScore_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_TableResponseDBD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_TableResponseDBD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.TableResponseDBD.class, protobuf.clazz.dbd.DbdRsp.TableResponseDBD.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponseDBD> PARSER =
        new com.google.protobuf.AbstractParser<TableResponseDBD>() {
      public TableResponseDBD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponseDBD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponseDBD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse out_change_cards_data = 6;
    public static final int OUT_CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outChangeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutChangeCardsDataList() {
      return outChangeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutChangeCardsDataOrBuilderList() {
      return outChangeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public int getOutChangeCardsDataCount() {
      return outChangeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index) {
      return outChangeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
        int index) {
      return outChangeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 11;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 12;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 15;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 15;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .dbd.RoomInfoDbd room_info = 18;
    public static final int ROOM_INFO_FIELD_NUMBER = 18;
    private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .dbd.RoomPlayerResponseDbd players = 19;
    public static final int PLAYERS_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 is_current_first_out = 20;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 20;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 cur_player_ya_pai = 21;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 21;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 hand_card_count = 22;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 23;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 23;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // repeated int32 user_call_banker_score = 24;
    public static final int USER_CALL_BANKER_SCORE_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> userCallBankerScore_;
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCallBankerScoreList() {
      return userCallBankerScore_;
    }
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    public int getUserCallBankerScoreCount() {
      return userCallBankerScore_.size();
    }
    /**
     * <code>repeated int32 user_call_banker_score = 24;</code>
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    public int getUserCallBankerScore(int index) {
      return userCallBankerScore_.get(index);
    }

    // optional int32 call_score_max = 25;
    public static final int CALL_SCORE_MAX_FIELD_NUMBER = 25;
    private int callScoreMax_;
    /**
     * <code>optional int32 call_score_max = 25;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    public boolean hasCallScoreMax() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 call_score_max = 25;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    public int getCallScoreMax() {
      return callScoreMax_;
    }

    // optional int32 call_score_min = 26;
    public static final int CALL_SCORE_MIN_FIELD_NUMBER = 26;
    private int callScoreMin_;
    /**
     * <code>optional int32 call_score_min = 26;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    public boolean hasCallScoreMin() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 call_score_min = 26;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    public int getCallScoreMin() {
      return callScoreMin_;
    }

    // optional int32 times = 27;
    public static final int TIMES_FIELD_NUMBER = 27;
    private int times_;
    /**
     * <code>optional int32 times = 27;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimes() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 times = 27;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimes() {
      return times_;
    }

    // optional int32 di_card_count = 28;
    public static final int DI_CARD_COUNT_FIELD_NUMBER = 28;
    private int diCardCount_;
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiCardCount() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiCardCount() {
      return diCardCount_;
    }

    // repeated int32 di_cards_data = 29;
    public static final int DI_CARDS_DATA_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Integer> diCardsData_;
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiCardsDataList() {
      return diCardsData_;
    }
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsDataCount() {
      return diCardsData_.size();
    }
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsData(int index) {
      return diCardsData_.get(index);
    }

    // optional int32 di_chi_score = 30;
    public static final int DI_CHI_SCORE_FIELD_NUMBER = 30;
    private int diChiScore_;
    /**
     * <code>optional int32 di_chi_score = 30;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public boolean hasDiChiScore() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 di_chi_score = 30;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public int getDiChiScore() {
      return diChiScore_;
    }

    // optional int32 tang_zi_score = 31;
    public static final int TANG_ZI_SCORE_FIELD_NUMBER = 31;
    private int tangZiScore_;
    /**
     * <code>optional int32 tang_zi_score = 31;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    public boolean hasTangZiScore() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 tang_zi_score = 31;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    public int getTangZiScore() {
      return tangZiScore_;
    }

    // optional int32 bomb_score = 32;
    public static final int BOMB_SCORE_FIELD_NUMBER = 32;
    private int bombScore_;
    /**
     * <code>optional int32 bomb_score = 32;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public boolean hasBombScore() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 bomb_score = 32;</code>
     *
     * <pre>
     *炸弹分
     * </pre>
     */
    public int getBombScore() {
      return bombScore_;
    }

    // optional int32 banker_score = 16;
    public static final int BANKER_SCORE_FIELD_NUMBER = 16;
    private int bankerScore_;
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public boolean hasBankerScore() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public int getBankerScore() {
      return bankerScore_;
    }

    // optional int32 call_score_current = 33;
    public static final int CALL_SCORE_CURRENT_FIELD_NUMBER = 33;
    private int callScoreCurrent_;
    /**
     * <code>optional int32 call_score_current = 33;</code>
     */
    public boolean hasCallScoreCurrent() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 call_score_current = 33;</code>
     */
    public int getCallScoreCurrent() {
      return callScoreCurrent_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outChangeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
      curPlayerYaPai_ = 0;
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      userCallBankerScore_ = java.util.Collections.emptyList();
      callScoreMax_ = 0;
      callScoreMin_ = 0;
      times_ = 0;
      diCardCount_ = 0;
      diCardsData_ = java.util.Collections.emptyList();
      diChiScore_ = 0;
      tangZiScore_ = 0;
      bombScore_ = 0;
      bankerScore_ = 0;
      callScoreCurrent_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outChangeCardsData_.size(); i++) {
        output.writeMessage(6, outChangeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(11, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(12, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(16, bankerScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(17, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(19, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(21, curPlayerYaPai_);
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(22, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(23, handCardsData_.get(i));
      }
      for (int i = 0; i < userCallBankerScore_.size(); i++) {
        output.writeInt32(24, userCallBankerScore_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(25, callScoreMax_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(26, callScoreMin_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(27, times_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(28, diCardCount_);
      }
      for (int i = 0; i < diCardsData_.size(); i++) {
        output.writeInt32(29, diCardsData_.get(i));
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(30, diChiScore_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(31, tangZiScore_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(32, bombScore_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(33, callScoreCurrent_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outChangeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, outChangeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, bankerScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, handCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCallBankerScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCallBankerScore_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCallBankerScoreList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, callScoreMax_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, callScoreMin_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, times_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, diCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getDiCardsDataList().size();
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, diChiScore_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, tangZiScore_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, bombScore_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(33, callScoreCurrent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.TableResponseDBD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.TableResponseDBD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.TableResponseDBD}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.TableResponseDBDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_TableResponseDBD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_TableResponseDBD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.TableResponseDBD.class, protobuf.clazz.dbd.DbdRsp.TableResponseDBD.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.TableResponseDBD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getOutChangeCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          outChangeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          handCardsDataBuilder_.clear();
        }
        userCallBankerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        callScoreMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        callScoreMin_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        times_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        diCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        diChiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        tangZiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        bombScore_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        bankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        callScoreCurrent_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_TableResponseDBD_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.TableResponseDBD getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.TableResponseDBD.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.TableResponseDBD build() {
        protobuf.clazz.dbd.DbdRsp.TableResponseDBD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.TableResponseDBD buildPartial() {
        protobuf.clazz.dbd.DbdRsp.TableResponseDBD result = new protobuf.clazz.dbd.DbdRsp.TableResponseDBD(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (outChangeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            outChangeCardsData_ = java.util.Collections.unmodifiableList(outChangeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.outChangeCardsData_ = outChangeCardsData_;
        } else {
          result.outChangeCardsData_ = outChangeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          userCallBankerScore_ = java.util.Collections.unmodifiableList(userCallBankerScore_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.userCallBankerScore_ = userCallBankerScore_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.callScoreMax_ = callScoreMax_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.callScoreMin_ = callScoreMin_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.times_ = times_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.diCardCount_ = diCardCount_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.diCardsData_ = diCardsData_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.diChiScore_ = diChiScore_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.tangZiScore_ = tangZiScore_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.bombScore_ = bombScore_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.bankerScore_ = bankerScore_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00080000;
        }
        result.callScoreCurrent_ = callScoreCurrent_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.TableResponseDBD) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.TableResponseDBD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.TableResponseDBD other) {
        if (other == protobuf.clazz.dbd.DbdRsp.TableResponseDBD.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (outChangeCardsDataBuilder_ == null) {
          if (!other.outChangeCardsData_.isEmpty()) {
            if (outChangeCardsData_.isEmpty()) {
              outChangeCardsData_ = other.outChangeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureOutChangeCardsDataIsMutable();
              outChangeCardsData_.addAll(other.outChangeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outChangeCardsData_.isEmpty()) {
            if (outChangeCardsDataBuilder_.isEmpty()) {
              outChangeCardsDataBuilder_.dispose();
              outChangeCardsDataBuilder_ = null;
              outChangeCardsData_ = other.outChangeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              outChangeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutChangeCardsDataFieldBuilder() : null;
            } else {
              outChangeCardsDataBuilder_.addAllMessages(other.outChangeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00200000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (!other.userCallBankerScore_.isEmpty()) {
          if (userCallBankerScore_.isEmpty()) {
            userCallBankerScore_ = other.userCallBankerScore_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureUserCallBankerScoreIsMutable();
            userCallBankerScore_.addAll(other.userCallBankerScore_);
          }
          onChanged();
        }
        if (other.hasCallScoreMax()) {
          setCallScoreMax(other.getCallScoreMax());
        }
        if (other.hasCallScoreMin()) {
          setCallScoreMin(other.getCallScoreMin());
        }
        if (other.hasTimes()) {
          setTimes(other.getTimes());
        }
        if (other.hasDiCardCount()) {
          setDiCardCount(other.getDiCardCount());
        }
        if (!other.diCardsData_.isEmpty()) {
          if (diCardsData_.isEmpty()) {
            diCardsData_ = other.diCardsData_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureDiCardsDataIsMutable();
            diCardsData_.addAll(other.diCardsData_);
          }
          onChanged();
        }
        if (other.hasDiChiScore()) {
          setDiChiScore(other.getDiChiScore());
        }
        if (other.hasTangZiScore()) {
          setTangZiScore(other.getTangZiScore());
        }
        if (other.hasBombScore()) {
          setBombScore(other.getBombScore());
        }
        if (other.hasBankerScore()) {
          setBankerScore(other.getBankerScore());
        }
        if (other.hasCallScoreCurrent()) {
          setCallScoreCurrent(other.getCallScoreCurrent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.TableResponseDBD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.TableResponseDBD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse out_change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outChangeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outChangeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outChangeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outChangeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutChangeCardsDataList() {
        if (outChangeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outChangeCardsData_);
        } else {
          return outChangeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public int getOutChangeCardsDataCount() {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.size();
        } else {
          return outChangeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index) {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.get(index);
        } else {
          return outChangeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.set(index, value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(index, value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addAllOutChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          super.addAll(values, outChangeCardsData_);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder clearOutChangeCardsData() {
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder removeOutChangeCardsData(int index) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.remove(index);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutChangeCardsDataBuilder(
          int index) {
        return getOutChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
          int index) {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.get(index);  } else {
          return outChangeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutChangeCardsDataOrBuilderList() {
        if (outChangeCardsDataBuilder_ != null) {
          return outChangeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outChangeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutChangeCardsDataBuilder() {
        return getOutChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutChangeCardsDataBuilder(
          int index) {
        return getOutChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutChangeCardsDataBuilderList() {
        return getOutChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutChangeCardsDataFieldBuilder() {
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outChangeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          outChangeCardsData_ = null;
        }
        return outChangeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 11;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 12;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 15;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00004000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00008000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .dbd.RoomInfoDbd room_info = 18;
      private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .dbd.RoomPlayerResponseDbd players = 19;
      private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder addPlayers(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 19;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 is_current_first_out = 20;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00040000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 21;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x00080000;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x00080000);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 22;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 23;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // repeated int32 user_call_banker_score = 24;
      private java.util.List<java.lang.Integer> userCallBankerScore_ = java.util.Collections.emptyList();
      private void ensureUserCallBankerScoreIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          userCallBankerScore_ = new java.util.ArrayList<java.lang.Integer>(userCallBankerScore_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCallBankerScoreList() {
        return java.util.Collections.unmodifiableList(userCallBankerScore_);
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public int getUserCallBankerScoreCount() {
        return userCallBankerScore_.size();
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public int getUserCallBankerScore(int index) {
        return userCallBankerScore_.get(index);
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public Builder setUserCallBankerScore(
          int index, int value) {
        ensureUserCallBankerScoreIsMutable();
        userCallBankerScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public Builder addUserCallBankerScore(int value) {
        ensureUserCallBankerScoreIsMutable();
        userCallBankerScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public Builder addAllUserCallBankerScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCallBankerScoreIsMutable();
        super.addAll(values, userCallBankerScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_call_banker_score = 24;</code>
       *
       * <pre>
       *用户叫庄
       * </pre>
       */
      public Builder clearUserCallBankerScore() {
        userCallBankerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional int32 call_score_max = 25;
      private int callScoreMax_ ;
      /**
       * <code>optional int32 call_score_max = 25;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public boolean hasCallScoreMax() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 call_score_max = 25;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public int getCallScoreMax() {
        return callScoreMax_;
      }
      /**
       * <code>optional int32 call_score_max = 25;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public Builder setCallScoreMax(int value) {
        bitField0_ |= 0x00800000;
        callScoreMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_max = 25;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public Builder clearCallScoreMax() {
        bitField0_ = (bitField0_ & ~0x00800000);
        callScoreMax_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score_min = 26;
      private int callScoreMin_ ;
      /**
       * <code>optional int32 call_score_min = 26;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public boolean hasCallScoreMin() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 call_score_min = 26;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public int getCallScoreMin() {
        return callScoreMin_;
      }
      /**
       * <code>optional int32 call_score_min = 26;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public Builder setCallScoreMin(int value) {
        bitField0_ |= 0x01000000;
        callScoreMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_min = 26;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public Builder clearCallScoreMin() {
        bitField0_ = (bitField0_ & ~0x01000000);
        callScoreMin_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times = 27;
      private int times_ ;
      /**
       * <code>optional int32 times = 27;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimes() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 times = 27;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimes() {
        return times_;
      }
      /**
       * <code>optional int32 times = 27;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimes(int value) {
        bitField0_ |= 0x02000000;
        times_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times = 27;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimes() {
        bitField0_ = (bitField0_ & ~0x02000000);
        times_ = 0;
        onChanged();
        return this;
      }

      // optional int32 di_card_count = 28;
      private int diCardCount_ ;
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiCardCount() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiCardCount() {
        return diCardCount_;
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiCardCount(int value) {
        bitField0_ |= 0x04000000;
        diCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiCardCount() {
        bitField0_ = (bitField0_ & ~0x04000000);
        diCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 di_cards_data = 29;
      private java.util.List<java.lang.Integer> diCardsData_ = java.util.Collections.emptyList();
      private void ensureDiCardsDataIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          diCardsData_ = new java.util.ArrayList<java.lang.Integer>(diCardsData_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiCardsDataList() {
        return java.util.Collections.unmodifiableList(diCardsData_);
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsDataCount() {
        return diCardsData_.size();
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsData(int index) {
        return diCardsData_.get(index);
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setDiCardsData(
          int index, int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addDiCardsData(int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllDiCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiCardsDataIsMutable();
        super.addAll(values, diCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearDiCardsData() {
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      // optional int32 di_chi_score = 30;
      private int diChiScore_ ;
      /**
       * <code>optional int32 di_chi_score = 30;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public boolean hasDiChiScore() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 di_chi_score = 30;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public int getDiChiScore() {
        return diChiScore_;
      }
      /**
       * <code>optional int32 di_chi_score = 30;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder setDiChiScore(int value) {
        bitField0_ |= 0x10000000;
        diChiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_chi_score = 30;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder clearDiChiScore() {
        bitField0_ = (bitField0_ & ~0x10000000);
        diChiScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 tang_zi_score = 31;
      private int tangZiScore_ ;
      /**
       * <code>optional int32 tang_zi_score = 31;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public boolean hasTangZiScore() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 tang_zi_score = 31;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public int getTangZiScore() {
        return tangZiScore_;
      }
      /**
       * <code>optional int32 tang_zi_score = 31;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public Builder setTangZiScore(int value) {
        bitField0_ |= 0x20000000;
        tangZiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tang_zi_score = 31;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public Builder clearTangZiScore() {
        bitField0_ = (bitField0_ & ~0x20000000);
        tangZiScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 bomb_score = 32;
      private int bombScore_ ;
      /**
       * <code>optional int32 bomb_score = 32;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public boolean hasBombScore() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 bomb_score = 32;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public int getBombScore() {
        return bombScore_;
      }
      /**
       * <code>optional int32 bomb_score = 32;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder setBombScore(int value) {
        bitField0_ |= 0x40000000;
        bombScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bomb_score = 32;</code>
       *
       * <pre>
       *炸弹分
       * </pre>
       */
      public Builder clearBombScore() {
        bitField0_ = (bitField0_ & ~0x40000000);
        bombScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_score = 16;
      private int bankerScore_ ;
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public boolean hasBankerScore() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public int getBankerScore() {
        return bankerScore_;
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder setBankerScore(int value) {
        bitField0_ |= 0x80000000;
        bankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder clearBankerScore() {
        bitField0_ = (bitField0_ & ~0x80000000);
        bankerScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score_current = 33;
      private int callScoreCurrent_ ;
      /**
       * <code>optional int32 call_score_current = 33;</code>
       */
      public boolean hasCallScoreCurrent() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 call_score_current = 33;</code>
       */
      public int getCallScoreCurrent() {
        return callScoreCurrent_;
      }
      /**
       * <code>optional int32 call_score_current = 33;</code>
       */
      public Builder setCallScoreCurrent(int value) {
        bitField1_ |= 0x00000001;
        callScoreCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_current = 33;</code>
       */
      public Builder clearCallScoreCurrent() {
        bitField1_ = (bitField1_ & ~0x00000001);
        callScoreCurrent_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.TableResponseDBD)
    }

    static {
      defaultInstance = new TableResponseDBD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.TableResponseDBD)
  }

  public interface GameStartDBDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .dbd.RoomInfoDbd room_info = 1;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo();
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated .dbd.RoomPlayerResponseDbd players = 4;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> 
        getPlayersList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index);
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 di_pai_card_count = 5;
    /**
     * <code>optional int32 di_pai_card_count = 5;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiPaiCardCount();
    /**
     * <code>optional int32 di_pai_card_count = 5;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiPaiCardCount();

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 times = 7;
    /**
     * <code>optional int32 times = 7;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimes();
    /**
     * <code>optional int32 times = 7;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimes();
  }
  /**
   * Protobuf type {@code dbd.GameStartDBD}
   */
  public static final class GameStartDBD extends
      com.google.protobuf.GeneratedMessage
      implements GameStartDBDOrBuilder {
    // Use GameStartDBD.newBuilder() to construct.
    private GameStartDBD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartDBD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartDBD defaultInstance;
    public static GameStartDBD getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartDBD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartDBD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>();
                mutable_bitField0_ |= 0x00000008;
              }
              players_.add(input.readMessage(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              diPaiCardCount_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              times_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_GameStartDBD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_GameStartDBD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.GameStartDBD.class, protobuf.clazz.dbd.DbdRsp.GameStartDBD.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartDBD> PARSER =
        new com.google.protobuf.AbstractParser<GameStartDBD>() {
      public GameStartDBD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartDBD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartDBD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .dbd.RoomInfoDbd room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_;
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated .dbd.RoomPlayerResponseDbd players = 4;
    public static final int PLAYERS_FIELD_NUMBER = 4;
    private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_;
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
     */
    public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 di_pai_card_count = 5;
    public static final int DI_PAI_CARD_COUNT_FIELD_NUMBER = 5;
    private int diPaiCardCount_;
    /**
     * <code>optional int32 di_pai_card_count = 5;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiPaiCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 di_pai_card_count = 5;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiPaiCardCount() {
      return diPaiCardCount_;
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 times = 7;
    public static final int TIMES_FIELD_NUMBER = 7;
    private int times_;
    /**
     * <code>optional int32 times = 7;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 times = 7;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimes() {
      return times_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      diPaiCardCount_ = 0;
      displayTime_ = 0;
      times_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(4, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(5, diPaiCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, displayTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, times_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, diPaiCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, times_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.GameStartDBD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.GameStartDBD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.GameStartDBD}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.GameStartDBDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_GameStartDBD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_GameStartDBD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.GameStartDBD.class, protobuf.clazz.dbd.DbdRsp.GameStartDBD.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.GameStartDBD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          playersBuilder_.clear();
        }
        diPaiCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        times_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_GameStartDBD_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.GameStartDBD getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.GameStartDBD.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.GameStartDBD build() {
        protobuf.clazz.dbd.DbdRsp.GameStartDBD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.GameStartDBD buildPartial() {
        protobuf.clazz.dbd.DbdRsp.GameStartDBD result = new protobuf.clazz.dbd.DbdRsp.GameStartDBD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.diPaiCardCount_ = diPaiCardCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.times_ = times_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.GameStartDBD) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.GameStartDBD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.GameStartDBD other) {
        if (other == protobuf.clazz.dbd.DbdRsp.GameStartDBD.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000008);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasDiPaiCardCount()) {
          setDiPaiCardCount(other.getDiPaiCardCount());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasTimes()) {
          setTimes(other.getTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.GameStartDBD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.GameStartDBD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .dbd.RoomInfoDbd room_info = 1;
      private protobuf.clazz.dbd.DbdRsp.RoomInfoDbd roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dbd.DbdRsp.RoomInfoDbd value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dbd.RoomInfoDbd room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomInfoDbd, protobuf.clazz.dbd.DbdRsp.RoomInfoDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomInfoDbdOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated .dbd.RoomPlayerResponseDbd players = 4;
      private java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd>(players_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder addPlayers(protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public java.util.List<? extends protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.getDefaultInstance());
      }
      /**
       * <code>repeated .dbd.RoomPlayerResponseDbd players = 4;</code>
       */
      public java.util.List<protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbd.Builder, protobuf.clazz.dbd.DbdRsp.RoomPlayerResponseDbdOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 di_pai_card_count = 5;
      private int diPaiCardCount_ ;
      /**
       * <code>optional int32 di_pai_card_count = 5;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiPaiCardCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 di_pai_card_count = 5;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiPaiCardCount() {
        return diPaiCardCount_;
      }
      /**
       * <code>optional int32 di_pai_card_count = 5;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiPaiCardCount(int value) {
        bitField0_ |= 0x00000010;
        diPaiCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_pai_card_count = 5;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiPaiCardCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        diPaiCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times = 7;
      private int times_ ;
      /**
       * <code>optional int32 times = 7;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimes() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 times = 7;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimes() {
        return times_;
      }
      /**
       * <code>optional int32 times = 7;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimes(int value) {
        bitField0_ |= 0x00000040;
        times_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times = 7;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimes() {
        bitField0_ = (bitField0_ & ~0x00000040);
        times_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.GameStartDBD)
    }

    static {
      defaultInstance = new GameStartDBD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.GameStartDBD)
  }

  public interface ReDispathOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dbd.ReDispath}
   */
  public static final class ReDispath extends
      com.google.protobuf.GeneratedMessage
      implements ReDispathOrBuilder {
    // Use ReDispath.newBuilder() to construct.
    private ReDispath(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReDispath(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReDispath defaultInstance;
    public static ReDispath getDefaultInstance() {
      return defaultInstance;
    }

    public ReDispath getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReDispath(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_ReDispath_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_ReDispath_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.ReDispath.class, protobuf.clazz.dbd.DbdRsp.ReDispath.Builder.class);
    }

    public static com.google.protobuf.Parser<ReDispath> PARSER =
        new com.google.protobuf.AbstractParser<ReDispath>() {
      public ReDispath parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReDispath(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReDispath> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.ReDispath parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.ReDispath prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.ReDispath}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.ReDispathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_ReDispath_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_ReDispath_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.ReDispath.class, protobuf.clazz.dbd.DbdRsp.ReDispath.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.ReDispath.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_ReDispath_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.ReDispath getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.ReDispath.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.ReDispath build() {
        protobuf.clazz.dbd.DbdRsp.ReDispath result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.ReDispath buildPartial() {
        protobuf.clazz.dbd.DbdRsp.ReDispath result = new protobuf.clazz.dbd.DbdRsp.ReDispath(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.ReDispath) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.ReDispath)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.ReDispath other) {
        if (other == protobuf.clazz.dbd.DbdRsp.ReDispath.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.ReDispath parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.ReDispath) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dbd.ReDispath)
    }

    static {
      defaultInstance = new ReDispath(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.ReDispath)
  }

  public interface CallBankerResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 call_player = 1;
    /**
     * <code>optional int32 call_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    int getCallPlayer();

    // optional int32 banker_player = 2;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 9;
    /**
     * <code>optional int32 current_player = 9;</code>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 9;</code>
     */
    int getCurrentPlayer();

    // optional int32 call_score = 11;
    /**
     * <code>optional int32 call_score = 11;</code>
     *
     * <pre>
     *当前叫庄分数
     * </pre>
     */
    boolean hasCallScore();
    /**
     * <code>optional int32 call_score = 11;</code>
     *
     * <pre>
     *当前叫庄分数
     * </pre>
     */
    int getCallScore();

    // optional int32 call_score_max = 3;
    /**
     * <code>optional int32 call_score_max = 3;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    boolean hasCallScoreMax();
    /**
     * <code>optional int32 call_score_max = 3;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    int getCallScoreMax();

    // optional int32 call_score_min = 10;
    /**
     * <code>optional int32 call_score_min = 10;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    boolean hasCallScoreMin();
    /**
     * <code>optional int32 call_score_min = 10;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    int getCallScoreMin();

    // optional int32 card_count = 4;
    /**
     * <code>optional int32 card_count = 4;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 4;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 5;
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_type = 6;
    /**
     * <code>optional int32 cards_type = 6;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    boolean hasCardsType();
    /**
     * <code>optional int32 cards_type = 6;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    int getCardsType();

    // repeated int32 user_card_count = 7;
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardCountList();
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCountCount();
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount(int index);

    // repeated .Int32ArrayResponse user_cards_data = 8;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 times = 13;
    /**
     * <code>optional int32 times = 13;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimes();
    /**
     * <code>optional int32 times = 13;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimes();

    // optional int32 di_chi_score = 14;
    /**
     * <code>optional int32 di_chi_score = 14;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    boolean hasDiChiScore();
    /**
     * <code>optional int32 di_chi_score = 14;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    int getDiChiScore();

    // optional int32 tang_zi_score = 15;
    /**
     * <code>optional int32 tang_zi_score = 15;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    boolean hasTangZiScore();
    /**
     * <code>optional int32 tang_zi_score = 15;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    int getTangZiScore();

    // optional int32 banker_score = 16;
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *当局叫分
     * </pre>
     */
    boolean hasBankerScore();
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *当局叫分
     * </pre>
     */
    int getBankerScore();

    // optional int32 call_score_current = 17;
    /**
     * <code>optional int32 call_score_current = 17;</code>
     */
    boolean hasCallScoreCurrent();
    /**
     * <code>optional int32 call_score_current = 17;</code>
     */
    int getCallScoreCurrent();
  }
  /**
   * Protobuf type {@code dbd.CallBankerResult}
   *
   * <pre>
   *叫庄结果
   * </pre>
   */
  public static final class CallBankerResult extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResultOrBuilder {
    // Use CallBankerResult.newBuilder() to construct.
    private CallBankerResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResult defaultInstance;
    public static CallBankerResult getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              callPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000010;
              callScoreMax_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000040;
              cardCount_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000080;
              cardsType_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              userCardCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000400;
              }
              userCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              callScoreMin_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000008;
              callScore_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000200;
              times_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000400;
              diChiScore_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000800;
              tangZiScore_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00001000;
              bankerScore_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00002000;
              callScoreCurrent_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_CallBankerResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_CallBankerResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.CallBankerResult.class, protobuf.clazz.dbd.DbdRsp.CallBankerResult.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResult> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResult>() {
      public CallBankerResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 call_player = 1;
    public static final int CALL_PLAYER_FIELD_NUMBER = 1;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 call_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 banker_player = 2;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 2;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 9;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 9;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 9;</code>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 9;</code>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 call_score = 11;
    public static final int CALL_SCORE_FIELD_NUMBER = 11;
    private int callScore_;
    /**
     * <code>optional int32 call_score = 11;</code>
     *
     * <pre>
     *当前叫庄分数
     * </pre>
     */
    public boolean hasCallScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 call_score = 11;</code>
     *
     * <pre>
     *当前叫庄分数
     * </pre>
     */
    public int getCallScore() {
      return callScore_;
    }

    // optional int32 call_score_max = 3;
    public static final int CALL_SCORE_MAX_FIELD_NUMBER = 3;
    private int callScoreMax_;
    /**
     * <code>optional int32 call_score_max = 3;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    public boolean hasCallScoreMax() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 call_score_max = 3;</code>
     *
     * <pre>
     *叫分上限
     * </pre>
     */
    public int getCallScoreMax() {
      return callScoreMax_;
    }

    // optional int32 call_score_min = 10;
    public static final int CALL_SCORE_MIN_FIELD_NUMBER = 10;
    private int callScoreMin_;
    /**
     * <code>optional int32 call_score_min = 10;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    public boolean hasCallScoreMin() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 call_score_min = 10;</code>
     *
     * <pre>
     *叫分下限
     * </pre>
     */
    public int getCallScoreMin() {
      return callScoreMin_;
    }

    // optional int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 4;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 card_count = 4;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 5;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_type = 6;
    public static final int CARDS_TYPE_FIELD_NUMBER = 6;
    private int cardsType_;
    /**
     * <code>optional int32 cards_type = 6;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public boolean hasCardsType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 cards_type = 6;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public int getCardsType() {
      return cardsType_;
    }

    // repeated int32 user_card_count = 7;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> userCardCount_;
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardCountList() {
      return userCardCount_;
    }
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCountCount() {
      return userCardCount_.size();
    }
    /**
     * <code>repeated int32 user_card_count = 7;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount(int index) {
      return userCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse user_cards_data = 8;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
      return userCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index) {
      return userCardsData_.get(index);
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 times = 13;
    public static final int TIMES_FIELD_NUMBER = 13;
    private int times_;
    /**
     * <code>optional int32 times = 13;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimes() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 times = 13;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimes() {
      return times_;
    }

    // optional int32 di_chi_score = 14;
    public static final int DI_CHI_SCORE_FIELD_NUMBER = 14;
    private int diChiScore_;
    /**
     * <code>optional int32 di_chi_score = 14;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public boolean hasDiChiScore() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 di_chi_score = 14;</code>
     *
     * <pre>
     *底池分数
     * </pre>
     */
    public int getDiChiScore() {
      return diChiScore_;
    }

    // optional int32 tang_zi_score = 15;
    public static final int TANG_ZI_SCORE_FIELD_NUMBER = 15;
    private int tangZiScore_;
    /**
     * <code>optional int32 tang_zi_score = 15;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    public boolean hasTangZiScore() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 tang_zi_score = 15;</code>
     *
     * <pre>
     *堂子分数
     * </pre>
     */
    public int getTangZiScore() {
      return tangZiScore_;
    }

    // optional int32 banker_score = 16;
    public static final int BANKER_SCORE_FIELD_NUMBER = 16;
    private int bankerScore_;
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *当局叫分
     * </pre>
     */
    public boolean hasBankerScore() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 banker_score = 16;</code>
     *
     * <pre>
     *当局叫分
     * </pre>
     */
    public int getBankerScore() {
      return bankerScore_;
    }

    // optional int32 call_score_current = 17;
    public static final int CALL_SCORE_CURRENT_FIELD_NUMBER = 17;
    private int callScoreCurrent_;
    /**
     * <code>optional int32 call_score_current = 17;</code>
     */
    public boolean hasCallScoreCurrent() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 call_score_current = 17;</code>
     */
    public int getCallScoreCurrent() {
      return callScoreCurrent_;
    }

    private void initFields() {
      callPlayer_ = 0;
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      callScore_ = 0;
      callScoreMax_ = 0;
      callScoreMin_ = 0;
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsType_ = 0;
      userCardCount_ = java.util.Collections.emptyList();
      userCardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      times_ = 0;
      diChiScore_ = 0;
      tangZiScore_ = 0;
      bankerScore_ = 0;
      callScoreCurrent_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, callPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(3, callScoreMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(4, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(6, cardsType_);
      }
      for (int i = 0; i < userCardCount_.size(); i++) {
        output.writeInt32(7, userCardCount_.get(i));
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeMessage(8, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(9, currentPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, callScoreMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(11, callScore_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(12, displayTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(13, times_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(14, diChiScore_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(15, tangZiScore_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(16, bankerScore_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(17, callScoreCurrent_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, callPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, callScoreMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, cardsType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardCountList().size();
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, currentPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, callScoreMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, callScore_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, times_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, diChiScore_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, tangZiScore_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, bankerScore_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, callScoreCurrent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.CallBankerResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.CallBankerResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.CallBankerResult}
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.CallBankerResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_CallBankerResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_CallBankerResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.CallBankerResult.class, protobuf.clazz.dbd.DbdRsp.CallBankerResult.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.CallBankerResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        callScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        callScoreMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        callScoreMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardsType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          userCardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        times_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        diChiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        tangZiScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        bankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        callScoreCurrent_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_CallBankerResult_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.CallBankerResult getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.CallBankerResult.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.CallBankerResult build() {
        protobuf.clazz.dbd.DbdRsp.CallBankerResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.CallBankerResult buildPartial() {
        protobuf.clazz.dbd.DbdRsp.CallBankerResult result = new protobuf.clazz.dbd.DbdRsp.CallBankerResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.callScore_ = callScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.callScoreMax_ = callScoreMax_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.callScoreMin_ = callScoreMin_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cardsType_ = cardsType_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.userCardCount_ = userCardCount_;
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.times_ = times_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.diChiScore_ = diChiScore_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.tangZiScore_ = tangZiScore_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bankerScore_ = bankerScore_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.callScoreCurrent_ = callScoreCurrent_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.CallBankerResult) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.CallBankerResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.CallBankerResult other) {
        if (other == protobuf.clazz.dbd.DbdRsp.CallBankerResult.getDefaultInstance()) return this;
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasCallScore()) {
          setCallScore(other.getCallScore());
        }
        if (other.hasCallScoreMax()) {
          setCallScoreMax(other.getCallScoreMax());
        }
        if (other.hasCallScoreMin()) {
          setCallScoreMin(other.getCallScoreMin());
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsType()) {
          setCardsType(other.getCardsType());
        }
        if (!other.userCardCount_.isEmpty()) {
          if (userCardCount_.isEmpty()) {
            userCardCount_ = other.userCardCount_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureUserCardCountIsMutable();
            userCardCount_.addAll(other.userCardCount_);
          }
          onChanged();
        }
        if (userCardsDataBuilder_ == null) {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsData_.isEmpty()) {
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureUserCardsDataIsMutable();
              userCardsData_.addAll(other.userCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsDataBuilder_.isEmpty()) {
              userCardsDataBuilder_.dispose();
              userCardsDataBuilder_ = null;
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
              userCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCardsDataFieldBuilder() : null;
            } else {
              userCardsDataBuilder_.addAllMessages(other.userCardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasTimes()) {
          setTimes(other.getTimes());
        }
        if (other.hasDiChiScore()) {
          setDiChiScore(other.getDiChiScore());
        }
        if (other.hasTangZiScore()) {
          setTangZiScore(other.getTangZiScore());
        }
        if (other.hasBankerScore()) {
          setBankerScore(other.getBankerScore());
        }
        if (other.hasCallScoreCurrent()) {
          setCallScoreCurrent(other.getCallScoreCurrent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.CallBankerResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.CallBankerResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 call_player = 1;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 call_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000001;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 2;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000002;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 9;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 9;</code>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 9;</code>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 9;</code>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 9;</code>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score = 11;
      private int callScore_ ;
      /**
       * <code>optional int32 call_score = 11;</code>
       *
       * <pre>
       *当前叫庄分数
       * </pre>
       */
      public boolean hasCallScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 call_score = 11;</code>
       *
       * <pre>
       *当前叫庄分数
       * </pre>
       */
      public int getCallScore() {
        return callScore_;
      }
      /**
       * <code>optional int32 call_score = 11;</code>
       *
       * <pre>
       *当前叫庄分数
       * </pre>
       */
      public Builder setCallScore(int value) {
        bitField0_ |= 0x00000008;
        callScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score = 11;</code>
       *
       * <pre>
       *当前叫庄分数
       * </pre>
       */
      public Builder clearCallScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        callScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score_max = 3;
      private int callScoreMax_ ;
      /**
       * <code>optional int32 call_score_max = 3;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public boolean hasCallScoreMax() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 call_score_max = 3;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public int getCallScoreMax() {
        return callScoreMax_;
      }
      /**
       * <code>optional int32 call_score_max = 3;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public Builder setCallScoreMax(int value) {
        bitField0_ |= 0x00000010;
        callScoreMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_max = 3;</code>
       *
       * <pre>
       *叫分上限
       * </pre>
       */
      public Builder clearCallScoreMax() {
        bitField0_ = (bitField0_ & ~0x00000010);
        callScoreMax_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score_min = 10;
      private int callScoreMin_ ;
      /**
       * <code>optional int32 call_score_min = 10;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public boolean hasCallScoreMin() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 call_score_min = 10;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public int getCallScoreMin() {
        return callScoreMin_;
      }
      /**
       * <code>optional int32 call_score_min = 10;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public Builder setCallScoreMin(int value) {
        bitField0_ |= 0x00000020;
        callScoreMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_min = 10;</code>
       *
       * <pre>
       *叫分下限
       * </pre>
       */
      public Builder clearCallScoreMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        callScoreMin_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_count = 4;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 4;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 card_count = 4;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 4;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000040;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 4;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 5;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 5;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 cards_type = 6;
      private int cardsType_ ;
      /**
       * <code>optional int32 cards_type = 6;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public boolean hasCardsType() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 cards_type = 6;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public int getCardsType() {
        return cardsType_;
      }
      /**
       * <code>optional int32 cards_type = 6;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder setCardsType(int value) {
        bitField0_ |= 0x00000100;
        cardsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_type = 6;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder clearCardsType() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cardsType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_card_count = 7;
      private java.util.List<java.lang.Integer> userCardCount_ = java.util.Collections.emptyList();
      private void ensureUserCardCountIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = new java.util.ArrayList<java.lang.Integer>(userCardCount_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardCountList() {
        return java.util.Collections.unmodifiableList(userCardCount_);
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCountCount() {
        return userCardCount_.size();
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount(int index) {
        return userCardCount_.get(index);
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(
          int index, int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addUserCardCount(int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllUserCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardCountIsMutable();
        super.addAll(values, userCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 7;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_cards_data = 8;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_ =
        java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCardsData_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
        if (userCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCardsData_);
        } else {
          return userCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.size();
        } else {
          return userCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);
        } else {
          return userCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          super.addAll(values, userCardsData_);
          onChanged();
        } else {
          userCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.remove(index);
          onChanged();
        } else {
          userCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
          int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);  } else {
          return userCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCardsDataOrBuilderList() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder() {
        return getUserCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 8;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCardsDataBuilderList() {
        return getUserCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times = 13;
      private int times_ ;
      /**
       * <code>optional int32 times = 13;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimes() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 times = 13;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimes() {
        return times_;
      }
      /**
       * <code>optional int32 times = 13;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimes(int value) {
        bitField0_ |= 0x00001000;
        times_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times = 13;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimes() {
        bitField0_ = (bitField0_ & ~0x00001000);
        times_ = 0;
        onChanged();
        return this;
      }

      // optional int32 di_chi_score = 14;
      private int diChiScore_ ;
      /**
       * <code>optional int32 di_chi_score = 14;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public boolean hasDiChiScore() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 di_chi_score = 14;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public int getDiChiScore() {
        return diChiScore_;
      }
      /**
       * <code>optional int32 di_chi_score = 14;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder setDiChiScore(int value) {
        bitField0_ |= 0x00002000;
        diChiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_chi_score = 14;</code>
       *
       * <pre>
       *底池分数
       * </pre>
       */
      public Builder clearDiChiScore() {
        bitField0_ = (bitField0_ & ~0x00002000);
        diChiScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 tang_zi_score = 15;
      private int tangZiScore_ ;
      /**
       * <code>optional int32 tang_zi_score = 15;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public boolean hasTangZiScore() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 tang_zi_score = 15;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public int getTangZiScore() {
        return tangZiScore_;
      }
      /**
       * <code>optional int32 tang_zi_score = 15;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public Builder setTangZiScore(int value) {
        bitField0_ |= 0x00004000;
        tangZiScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tang_zi_score = 15;</code>
       *
       * <pre>
       *堂子分数
       * </pre>
       */
      public Builder clearTangZiScore() {
        bitField0_ = (bitField0_ & ~0x00004000);
        tangZiScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_score = 16;
      private int bankerScore_ ;
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *当局叫分
       * </pre>
       */
      public boolean hasBankerScore() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *当局叫分
       * </pre>
       */
      public int getBankerScore() {
        return bankerScore_;
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *当局叫分
       * </pre>
       */
      public Builder setBankerScore(int value) {
        bitField0_ |= 0x00008000;
        bankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_score = 16;</code>
       *
       * <pre>
       *当局叫分
       * </pre>
       */
      public Builder clearBankerScore() {
        bitField0_ = (bitField0_ & ~0x00008000);
        bankerScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score_current = 17;
      private int callScoreCurrent_ ;
      /**
       * <code>optional int32 call_score_current = 17;</code>
       */
      public boolean hasCallScoreCurrent() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 call_score_current = 17;</code>
       */
      public int getCallScoreCurrent() {
        return callScoreCurrent_;
      }
      /**
       * <code>optional int32 call_score_current = 17;</code>
       */
      public Builder setCallScoreCurrent(int value) {
        bitField0_ |= 0x00010000;
        callScoreCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score_current = 17;</code>
       */
      public Builder clearCallScoreCurrent() {
        bitField0_ = (bitField0_ & ~0x00010000);
        callScoreCurrent_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.CallBankerResult)
    }

    static {
      defaultInstance = new CallBankerResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.CallBankerResult)
  }

  public interface OutCardData_Request_DBDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 out_cards = 1;
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsList();
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getOutCardsCount();
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getOutCards(int index);

    // optional int32 out_card_count = 2;
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    boolean hasOutCardCount();
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    int getOutCardCount();

    // repeated int32 change_out_cards = 3;
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeOutCardsList();
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getChangeOutCardsCount();
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getChangeOutCards(int index);

    // optional int32 b_out_card_type = 4;
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    boolean hasBOutCardType();
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    int getBOutCardType();
  }
  /**
   * Protobuf type {@code dbd.OutCardData_Request_DBD}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardData_Request_DBD extends
      com.google.protobuf.GeneratedMessage
      implements OutCardData_Request_DBDOrBuilder {
    // Use OutCardData_Request_DBD.newBuilder() to construct.
    private OutCardData_Request_DBD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardData_Request_DBD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardData_Request_DBD defaultInstance;
    public static OutCardData_Request_DBD getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardData_Request_DBD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardData_Request_DBD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                outCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              outCards_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                outCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              outCardCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeOutCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeOutCards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeOutCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeOutCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              bOutCardType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = java.util.Collections.unmodifiableList(outCards_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = java.util.Collections.unmodifiableList(changeOutCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_Request_DBD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_Request_DBD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.class, protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardData_Request_DBD> PARSER =
        new com.google.protobuf.AbstractParser<OutCardData_Request_DBD>() {
      public OutCardData_Request_DBD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardData_Request_DBD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardData_Request_DBD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 out_cards = 1;
    public static final int OUT_CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> outCards_;
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsList() {
      return outCards_;
    }
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getOutCardsCount() {
      return outCards_.size();
    }
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getOutCards(int index) {
      return outCards_.get(index);
    }

    // optional int32 out_card_count = 2;
    public static final int OUT_CARD_COUNT_FIELD_NUMBER = 2;
    private int outCardCount_;
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    public boolean hasOutCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    public int getOutCardCount() {
      return outCardCount_;
    }

    // repeated int32 change_out_cards = 3;
    public static final int CHANGE_OUT_CARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeOutCards_;
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeOutCardsList() {
      return changeOutCards_;
    }
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getChangeOutCardsCount() {
      return changeOutCards_.size();
    }
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getChangeOutCards(int index) {
      return changeOutCards_.get(index);
    }

    // optional int32 b_out_card_type = 4;
    public static final int B_OUT_CARD_TYPE_FIELD_NUMBER = 4;
    private int bOutCardType_;
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    public boolean hasBOutCardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    public int getBOutCardType() {
      return bOutCardType_;
    }

    private void initFields() {
      outCards_ = java.util.Collections.emptyList();
      outCardCount_ = 0;
      changeOutCards_ = java.util.Collections.emptyList();
      bOutCardType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < outCards_.size(); i++) {
        output.writeInt32(1, outCards_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, outCardCount_);
      }
      for (int i = 0; i < changeOutCards_.size(); i++) {
        output.writeInt32(3, changeOutCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, bOutCardType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < outCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCards_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, outCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeOutCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeOutCards_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeOutCardsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bOutCardType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.OutCardData_Request_DBD}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_Request_DBD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_Request_DBD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.class, protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        changeOutCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        bOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_OutCardData_Request_DBD_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD build() {
        protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD buildPartial() {
        protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD result = new protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = java.util.Collections.unmodifiableList(outCards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.outCards_ = outCards_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardCount_ = outCardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = java.util.Collections.unmodifiableList(changeOutCards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeOutCards_ = changeOutCards_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bOutCardType_ = bOutCardType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD other) {
        if (other == protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD.getDefaultInstance()) return this;
        if (!other.outCards_.isEmpty()) {
          if (outCards_.isEmpty()) {
            outCards_ = other.outCards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOutCardsIsMutable();
            outCards_.addAll(other.outCards_);
          }
          onChanged();
        }
        if (other.hasOutCardCount()) {
          setOutCardCount(other.getOutCardCount());
        }
        if (!other.changeOutCards_.isEmpty()) {
          if (changeOutCards_.isEmpty()) {
            changeOutCards_ = other.changeOutCards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeOutCardsIsMutable();
            changeOutCards_.addAll(other.changeOutCards_);
          }
          onChanged();
        }
        if (other.hasBOutCardType()) {
          setBOutCardType(other.getBOutCardType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.OutCardData_Request_DBD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 out_cards = 1;
      private java.util.List<java.lang.Integer> outCards_ = java.util.Collections.emptyList();
      private void ensureOutCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = new java.util.ArrayList<java.lang.Integer>(outCards_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsList() {
        return java.util.Collections.unmodifiableList(outCards_);
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getOutCardsCount() {
        return outCards_.size();
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getOutCards(int index) {
        return outCards_.get(index);
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder setOutCards(
          int index, int value) {
        ensureOutCardsIsMutable();
        outCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addOutCards(int value) {
        ensureOutCardsIsMutable();
        outCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addAllOutCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsIsMutable();
        super.addAll(values, outCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder clearOutCards() {
        outCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 out_card_count = 2;
      private int outCardCount_ ;
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public boolean hasOutCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public int getOutCardCount() {
        return outCardCount_;
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public Builder setOutCardCount(int value) {
        bitField0_ |= 0x00000002;
        outCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public Builder clearOutCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        outCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 change_out_cards = 3;
      private java.util.List<java.lang.Integer> changeOutCards_ = java.util.Collections.emptyList();
      private void ensureChangeOutCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = new java.util.ArrayList<java.lang.Integer>(changeOutCards_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeOutCardsList() {
        return java.util.Collections.unmodifiableList(changeOutCards_);
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getChangeOutCardsCount() {
        return changeOutCards_.size();
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getChangeOutCards(int index) {
        return changeOutCards_.get(index);
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder setChangeOutCards(
          int index, int value) {
        ensureChangeOutCardsIsMutable();
        changeOutCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addChangeOutCards(int value) {
        ensureChangeOutCardsIsMutable();
        changeOutCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addAllChangeOutCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeOutCardsIsMutable();
        super.addAll(values, changeOutCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder clearChangeOutCards() {
        changeOutCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 b_out_card_type = 4;
      private int bOutCardType_ ;
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public boolean hasBOutCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public int getBOutCardType() {
        return bOutCardType_;
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public Builder setBOutCardType(int value) {
        bitField0_ |= 0x00000008;
        bOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public Builder clearBOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bOutCardType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.OutCardData_Request_DBD)
    }

    static {
      defaultInstance = new OutCardData_Request_DBD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.OutCardData_Request_DBD)
  }

  public interface Call_Banker_DBD_RequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 select_call_banker_score = 1;
    /**
     * <code>optional int32 select_call_banker_score = 1;</code>
     */
    boolean hasSelectCallBankerScore();
    /**
     * <code>optional int32 select_call_banker_score = 1;</code>
     */
    int getSelectCallBankerScore();
  }
  /**
   * Protobuf type {@code dbd.Call_Banker_DBD_Request}
   */
  public static final class Call_Banker_DBD_Request extends
      com.google.protobuf.GeneratedMessage
      implements Call_Banker_DBD_RequestOrBuilder {
    // Use Call_Banker_DBD_Request.newBuilder() to construct.
    private Call_Banker_DBD_Request(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Call_Banker_DBD_Request(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Call_Banker_DBD_Request defaultInstance;
    public static Call_Banker_DBD_Request getDefaultInstance() {
      return defaultInstance;
    }

    public Call_Banker_DBD_Request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Call_Banker_DBD_Request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              selectCallBankerScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_Call_Banker_DBD_Request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_Call_Banker_DBD_Request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.class, protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.Builder.class);
    }

    public static com.google.protobuf.Parser<Call_Banker_DBD_Request> PARSER =
        new com.google.protobuf.AbstractParser<Call_Banker_DBD_Request>() {
      public Call_Banker_DBD_Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Call_Banker_DBD_Request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Call_Banker_DBD_Request> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 select_call_banker_score = 1;
    public static final int SELECT_CALL_BANKER_SCORE_FIELD_NUMBER = 1;
    private int selectCallBankerScore_;
    /**
     * <code>optional int32 select_call_banker_score = 1;</code>
     */
    public boolean hasSelectCallBankerScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 select_call_banker_score = 1;</code>
     */
    public int getSelectCallBankerScore() {
      return selectCallBankerScore_;
    }

    private void initFields() {
      selectCallBankerScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, selectCallBankerScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, selectCallBankerScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dbd.Call_Banker_DBD_Request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_RequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_Call_Banker_DBD_Request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_Call_Banker_DBD_Request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.class, protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.Builder.class);
      }

      // Construct using protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        selectCallBankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dbd.DbdRsp.internal_static_dbd_Call_Banker_DBD_Request_descriptor;
      }

      public protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request getDefaultInstanceForType() {
        return protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.getDefaultInstance();
      }

      public protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request build() {
        protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request buildPartial() {
        protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request result = new protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.selectCallBankerScore_ = selectCallBankerScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request) {
          return mergeFrom((protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request other) {
        if (other == protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request.getDefaultInstance()) return this;
        if (other.hasSelectCallBankerScore()) {
          setSelectCallBankerScore(other.getSelectCallBankerScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dbd.DbdRsp.Call_Banker_DBD_Request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 select_call_banker_score = 1;
      private int selectCallBankerScore_ ;
      /**
       * <code>optional int32 select_call_banker_score = 1;</code>
       */
      public boolean hasSelectCallBankerScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 select_call_banker_score = 1;</code>
       */
      public int getSelectCallBankerScore() {
        return selectCallBankerScore_;
      }
      /**
       * <code>optional int32 select_call_banker_score = 1;</code>
       */
      public Builder setSelectCallBankerScore(int value) {
        bitField0_ |= 0x00000001;
        selectCallBankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_call_banker_score = 1;</code>
       */
      public Builder clearSelectCallBankerScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        selectCallBankerScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dbd.Call_Banker_DBD_Request)
    }

    static {
      defaultInstance = new Call_Banker_DBD_Request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dbd.Call_Banker_DBD_Request)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_RoomInfoDbd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_RoomInfoDbd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_RoomPlayerResponseDbd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_RoomPlayerResponseDbd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_OutCardData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_OutCardData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_PukeGameEndDbd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_PukeGameEndDbd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_TableResponseDBD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_TableResponseDBD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_GameStartDBD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_GameStartDBD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_ReDispath_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_ReDispath_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_CallBankerResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_CallBankerResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_OutCardData_Request_DBD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_OutCardData_Request_DBD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dbd_Call_Banker_DBD_Request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dbd_Call_Banker_DBD_Request_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022dbd/dbdProto.proto\022\003dbd\032\024basic/protoco" +
      "l.proto\"\237\002\n\013RoomInfoDbd\022\017\n\007room_id\030\001 \001(\005" +
      "\022\027\n\017game_type_index\030\004 \001(\005\022\027\n\017game_rule_i" +
      "ndex\030\002 \001(\005\022\032\n\022game_rule_index_ex\030\014 \003(\005\022\025" +
      "\n\rgame_rule_des\030\003 \001(\t\022\022\n\ngame_round\030\005 \001(" +
      "\005\022\021\n\tcur_round\030\006 \001(\005\022\023\n\013game_status\030\007 \001(" +
      "\005\022\030\n\020create_player_id\030\010 \001(\003\022\027\n\017begin_lef" +
      "t_card\030\t \001(\005\022\026\n\016_banker_player\030\n \001(\005\022\023\n\013" +
      "create_name\030\013 \001(\t\"\230\002\n\025RoomPlayerResponse" +
      "Dbd\022\022\n\naccount_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001",
      "(\t\022\024\n\014head_img_url\030\003 \001(\t\022\022\n\nseat_index\030\004" +
      " \001(\005\022\n\n\002ip\030\005 \001(\t\022\016\n\006online\030\006 \001(\005\022\013\n\003sex\030" +
      "\007 \001(\005\022\r\n\005score\030\010 \001(\002\022\r\n\005ready\030\t \001(\005\022\017\n\007i" +
      "p_addr\030\n \001(\t\022%\n\rlocationInfor\030\013 \001(\0132\016.Lo" +
      "cationInfor\022\022\n\nis_trustee\030\014 \001(\010\022\r\n\005money" +
      "\030\r \001(\003\022\014\n\004gold\030\016 \001(\003\"\262\003\n\013OutCardData\022\027\n\017" +
      "out_card_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(" +
      "\005\022\031\n\021change_cards_data\030\003 \003(\005\022\023\n\013cards_co" +
      "unt\030\004 \001(\005\022\021\n\tcard_type\030\005 \001(\005\022\022\n\ncur_play" +
      "er\030\006 \001(\005\022\031\n\021cur_player_ya_pai\030\007 \001(\005\022\025\n\rp",
      "r_cards_data\030\010 \003(\005\022\034\n\024pr_change_cards_da" +
      "ta\030\t \003(\005\022\026\n\016pr_cards_count\030\n \001(\005\022\030\n\020pr_o" +
      "ut_card_type\030\013 \001(\005\022\024\n\014is_first_out\030\014 \001(\005" +
      "\022\024\n\014display_time\030\r \001(\005\022\026\n\016difen_bomb_des" +
      "\030\016 \003(\t\022\027\n\017user_card_count\030\017 \003(\005\022,\n\017user_" +
      "cards_data\030\020 \003(\0132\023.Int32ArrayResponse\022\022\n" +
      "\nbomb_score\030\021 \001(\005\"\336\004\n\016PukeGameEndDbd\022#\n\t" +
      "room_info\030\001 \001(\0132\020.dbd.RoomInfoDbd\022\021\n\tcur" +
      "_round\030\002 \001(\005\022\022\n\ngame_round\030\003 \001(\005\022\022\n\ncard" +
      "_count\030\004 \003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.Int32",
      "ArrayResponse\022\025\n\rboom_card_num\030\006 \003(\005\022&\n\t" +
      "end_score\030\007 \003(\0132\023.Int32ArrayResponse\022\022\n\n" +
      "player_num\030\010 \001(\005\022\025\n\rbanker_player\030\t \001(\005\022" +
      "\016\n\006reason\030\n \001(\005\022\030\n\020chun_tian_player\030\013 \003(" +
      "\005\022\024\n\014di_chi_score\030\023 \001(\005\022\031\n\021init_di_chi_s" +
      "core\030\024 \001(\005\022\022\n\nboom_score\030\025 \003(\005\022\020\n\010di_sco" +
      "re\030\026 \003(\005\022\025\n\rbu_tang_score\030\027 \003(\005\022\025\n\rtang_" +
      "zi_score\030\030 \003(\005\022\021\n\tcal_score\030\031 \003(\005\022\031\n\021all" +
      "_boom_card_num\030\014 \003(\005\022\025\n\rall_end_score\030\r " +
      "\003(\002\022\025\n\rend_score_max\030\016 \003(\005\022\017\n\007win_num\030\017 ",
      "\003(\005\022\020\n\010lose_num\030\020 \003(\005\022+\n\007players\030\021 \003(\0132\032" +
      ".dbd.RoomPlayerResponseDbd\"\212\007\n\020TableResp" +
      "onseDBD\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016curren" +
      "t_player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007t" +
      "rustee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132\023.I" +
      "nt32ArrayResponse\0222\n\025out_change_cards_da" +
      "ta\030\006 \003(\0132\023.Int32ArrayResponse\022\027\n\017out_car" +
      "ds_count\030\007 \003(\005\022\023\n\013player_pass\030\010 \003(\005\022\021\n\tc" +
      "ard_type\030\t \003(\005\022\032\n\022pr_out_card_player\030\n \001" +
      "(\005\022\025\n\rpr_cards_data\030\013 \003(\005\022\034\n\024pr_change_c",
      "ards_data\030\014 \003(\005\022\026\n\016pr_cards_count\030\r \001(\005\022" +
      "\030\n\020pr_out_card_type\030\016 \001(\005\022\024\n\014is_first_ou" +
      "t\030\017 \001(\005\022\024\n\014display_time\030\021 \001(\005\022#\n\troom_in" +
      "fo\030\022 \001(\0132\020.dbd.RoomInfoDbd\022+\n\007players\030\023 " +
      "\003(\0132\032.dbd.RoomPlayerResponseDbd\022\034\n\024is_cu" +
      "rrent_first_out\030\024 \001(\005\022\031\n\021cur_player_ya_p" +
      "ai\030\025 \001(\005\022\027\n\017hand_card_count\030\026 \003(\005\022,\n\017han" +
      "d_cards_data\030\027 \003(\0132\023.Int32ArrayResponse\022" +
      "\036\n\026user_call_banker_score\030\030 \003(\005\022\026\n\016call_" +
      "score_max\030\031 \001(\005\022\026\n\016call_score_min\030\032 \001(\005\022",
      "\r\n\005times\030\033 \001(\005\022\025\n\rdi_card_count\030\034 \001(\005\022\025\n" +
      "\rdi_cards_data\030\035 \003(\005\022\024\n\014di_chi_score\030\036 \001" +
      "(\005\022\025\n\rtang_zi_score\030\037 \001(\005\022\022\n\nbomb_score\030" +
      "  \001(\005\022\024\n\014banker_score\030\020 \001(\005\022\032\n\022call_scor" +
      "e_current\030! \001(\005\"\335\001\n\014GameStartDBD\022#\n\troom" +
      "_info\030\001 \001(\0132\020.dbd.RoomInfoDbd\022\022\n\ncard_co" +
      "unt\030\002 \003(\005\022\'\n\ncards_data\030\003 \003(\0132\023.Int32Arr" +
      "ayResponse\022+\n\007players\030\004 \003(\0132\032.dbd.RoomPl" +
      "ayerResponseDbd\022\031\n\021di_pai_card_count\030\005 \001" +
      "(\005\022\024\n\014display_time\030\006 \001(\005\022\r\n\005times\030\007 \001(\005\"",
      "H\n\tReDispath\022\022\n\ncard_count\030\001 \003(\005\022\'\n\ncard" +
      "s_data\030\002 \003(\0132\023.Int32ArrayResponse\"\241\003\n\020Ca" +
      "llBankerResult\022\023\n\013call_player\030\001 \001(\005\022\025\n\rb" +
      "anker_player\030\002 \001(\005\022\026\n\016current_player\030\t \001" +
      "(\005\022\022\n\ncall_score\030\013 \001(\005\022\026\n\016call_score_max" +
      "\030\003 \001(\005\022\026\n\016call_score_min\030\n \001(\005\022\022\n\ncard_c" +
      "ount\030\004 \001(\005\022\022\n\ncards_data\030\005 \003(\005\022\022\n\ncards_" +
      "type\030\006 \001(\005\022\027\n\017user_card_count\030\007 \003(\005\022,\n\017u" +
      "ser_cards_data\030\010 \003(\0132\023.Int32ArrayRespons" +
      "e\022\024\n\014display_time\030\014 \001(\005\022\r\n\005times\030\r \001(\005\022\024",
      "\n\014di_chi_score\030\016 \001(\005\022\025\n\rtang_zi_score\030\017 " +
      "\001(\005\022\024\n\014banker_score\030\020 \001(\005\022\032\n\022call_score_" +
      "current\030\021 \001(\005\"w\n\027OutCardData_Request_DBD" +
      "\022\021\n\tout_cards\030\001 \003(\005\022\026\n\016out_card_count\030\002 " +
      "\001(\005\022\030\n\020change_out_cards\030\003 \003(\005\022\027\n\017b_out_c" +
      "ard_type\030\004 \001(\005\";\n\027Call_Banker_DBD_Reques" +
      "t\022 \n\030select_call_banker_score\030\001 \001(\005B\034\n\022p" +
      "rotobuf.clazz.dbdB\006DbdRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_dbd_RoomInfoDbd_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_dbd_RoomInfoDbd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_RoomInfoDbd_descriptor,
              new java.lang.String[] { "RoomId", "GameTypeIndex", "GameRuleIndex", "GameRuleIndexEx", "GameRuleDes", "GameRound", "CurRound", "GameStatus", "CreatePlayerId", "BeginLeftCard", "BankerPlayer", "CreateName", });
          internal_static_dbd_RoomPlayerResponseDbd_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_dbd_RoomPlayerResponseDbd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_RoomPlayerResponseDbd_descriptor,
              new java.lang.String[] { "AccountId", "UserName", "HeadImgUrl", "SeatIndex", "Ip", "Online", "Sex", "Score", "Ready", "IpAddr", "LocationInfor", "IsTrustee", "Money", "Gold", });
          internal_static_dbd_OutCardData_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_dbd_OutCardData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_OutCardData_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "CurPlayerYaPai", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "DifenBombDes", "UserCardCount", "UserCardsData", "BombScore", });
          internal_static_dbd_PukeGameEndDbd_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_dbd_PukeGameEndDbd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_PukeGameEndDbd_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "BoomCardNum", "EndScore", "PlayerNum", "BankerPlayer", "Reason", "ChunTianPlayer", "DiChiScore", "InitDiChiScore", "BoomScore", "DiScore", "BuTangScore", "TangZiScore", "CalScore", "AllBoomCardNum", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", });
          internal_static_dbd_TableResponseDBD_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_dbd_TableResponseDBD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_TableResponseDBD_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "RoomInfo", "Players", "IsCurrentFirstOut", "CurPlayerYaPai", "HandCardCount", "HandCardsData", "UserCallBankerScore", "CallScoreMax", "CallScoreMin", "Times", "DiCardCount", "DiCardsData", "DiChiScore", "TangZiScore", "BombScore", "BankerScore", "CallScoreCurrent", });
          internal_static_dbd_GameStartDBD_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_dbd_GameStartDBD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_GameStartDBD_descriptor,
              new java.lang.String[] { "RoomInfo", "CardCount", "CardsData", "Players", "DiPaiCardCount", "DisplayTime", "Times", });
          internal_static_dbd_ReDispath_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_dbd_ReDispath_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_ReDispath_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_dbd_CallBankerResult_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_dbd_CallBankerResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_CallBankerResult_descriptor,
              new java.lang.String[] { "CallPlayer", "BankerPlayer", "CurrentPlayer", "CallScore", "CallScoreMax", "CallScoreMin", "CardCount", "CardsData", "CardsType", "UserCardCount", "UserCardsData", "DisplayTime", "Times", "DiChiScore", "TangZiScore", "BankerScore", "CallScoreCurrent", });
          internal_static_dbd_OutCardData_Request_DBD_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_dbd_OutCardData_Request_DBD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_OutCardData_Request_DBD_descriptor,
              new java.lang.String[] { "OutCards", "OutCardCount", "ChangeOutCards", "BOutCardType", });
          internal_static_dbd_Call_Banker_DBD_Request_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_dbd_Call_Banker_DBD_Request_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dbd_Call_Banker_DBD_Request_descriptor,
              new java.lang.String[] { "SelectCallBankerScore", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
