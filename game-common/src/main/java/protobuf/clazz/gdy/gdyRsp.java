// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdy/gdyProto.proto

package protobuf.clazz.gdy;

public final class gdyRsp {
  private gdyRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RefreshCardsGdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 left_card_count = 3;
    /**
     * <code>optional int32 left_card_count = 3;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 3;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    int getLeftCardCount();

    // optional int32 game_cell = 4;
    /**
     * <code>optional int32 game_cell = 4;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasGameCell();
    /**
     * <code>optional int32 game_cell = 4;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getGameCell();

    // optional int32 times_num = 5;
    /**
     * <code>optional int32 times_num = 5;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimesNum();
    /**
     * <code>optional int32 times_num = 5;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNum();
  }
  /**
   * Protobuf type {@code gdy.RefreshCardsGdy}
   *
   * <pre>
   *刷新用户扑克
   * </pre>
   */
  public static final class RefreshCardsGdy extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardsGdyOrBuilder {
    // Use RefreshCardsGdy.newBuilder() to construct.
    private RefreshCardsGdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardsGdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardsGdy defaultInstance;
    public static RefreshCardsGdy getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardsGdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardsGdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              gameCell_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              timesNum_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_RefreshCardsGdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_RefreshCardsGdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.class, protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardsGdy> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardsGdy>() {
      public RefreshCardsGdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardsGdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardsGdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 left_card_count = 3;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 3;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 3;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 left_card_count = 3;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional int32 game_cell = 4;
    public static final int GAME_CELL_FIELD_NUMBER = 4;
    private int gameCell_;
    /**
     * <code>optional int32 game_cell = 4;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasGameCell() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 game_cell = 4;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getGameCell() {
      return gameCell_;
    }

    // optional int32 times_num = 5;
    public static final int TIMES_NUM_FIELD_NUMBER = 5;
    private int timesNum_;
    /**
     * <code>optional int32 times_num = 5;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimesNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 times_num = 5;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNum() {
      return timesNum_;
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      gameCell_ = 0;
      timesNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, leftCardCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, gameCell_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, timesNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, leftCardCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gameCell_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, timesNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.RefreshCardsGdy}
     *
     * <pre>
     *刷新用户扑克
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.RefreshCardsGdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_RefreshCardsGdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_RefreshCardsGdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.class, protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gameCell_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        timesNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_RefreshCardsGdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy build() {
        protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy result = new protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameCell_ = gameCell_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timesNum_ = timesNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasGameCell()) {
          setGameCell(other.getGameCell());
        }
        if (other.hasTimesNum()) {
          setTimesNum(other.getTimesNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.RefreshCardsGdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 left_card_count = 3;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 3;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 left_card_count = 3;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 3;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000004;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 3;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_cell = 4;
      private int gameCell_ ;
      /**
       * <code>optional int32 game_cell = 4;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasGameCell() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 game_cell = 4;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getGameCell() {
        return gameCell_;
      }
      /**
       * <code>optional int32 game_cell = 4;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setGameCell(int value) {
        bitField0_ |= 0x00000008;
        gameCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_cell = 4;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearGameCell() {
        bitField0_ = (bitField0_ & ~0x00000008);
        gameCell_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times_num = 5;
      private int timesNum_ ;
      /**
       * <code>optional int32 times_num = 5;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimesNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 times_num = 5;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNum() {
        return timesNum_;
      }
      /**
       * <code>optional int32 times_num = 5;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimesNum(int value) {
        bitField0_ |= 0x00000010;
        timesNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times_num = 5;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimesNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        timesNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.RefreshCardsGdy)
    }

    static {
      defaultInstance = new RefreshCardsGdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.RefreshCardsGdy)
  }

  public interface SendCardsGdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_count = 1;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 hand_card_count = 3;
    /**
     * <code>optional int32 hand_card_count = 3;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasHandCardCount();
    /**
     * <code>optional int32 hand_card_count = 3;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount();

    // repeated int32 hand_cards_data = 4;
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardsDataList();
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsData(int index);

    // optional int32 send_card_player = 5;
    /**
     * <code>optional int32 send_card_player = 5;</code>
     *
     * <pre>
     *发牌玩家
     * </pre>
     */
    boolean hasSendCardPlayer();
    /**
     * <code>optional int32 send_card_player = 5;</code>
     *
     * <pre>
     *发牌玩家
     * </pre>
     */
    int getSendCardPlayer();

    // optional int32 left_card_count = 6;
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    int getLeftCardCount();
  }
  /**
   * Protobuf type {@code gdy.SendCardsGdy}
   *
   * <pre>
   *发牌
   * </pre>
   */
  public static final class SendCardsGdy extends
      com.google.protobuf.GeneratedMessage
      implements SendCardsGdyOrBuilder {
    // Use SendCardsGdy.newBuilder() to construct.
    private SendCardsGdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SendCardsGdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SendCardsGdy defaultInstance;
    public static SendCardsGdy getDefaultInstance() {
      return defaultInstance;
    }

    public SendCardsGdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SendCardsGdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              handCardCount_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                handCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              handCardsData_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                handCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              sendCardPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              leftCardCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_SendCardsGdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_SendCardsGdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.SendCardsGdy.class, protobuf.clazz.gdy.gdyRsp.SendCardsGdy.Builder.class);
    }

    public static com.google.protobuf.Parser<SendCardsGdy> PARSER =
        new com.google.protobuf.AbstractParser<SendCardsGdy>() {
      public SendCardsGdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendCardsGdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SendCardsGdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 hand_card_count = 3;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 3;
    private int handCardCount_;
    /**
     * <code>optional int32 hand_card_count = 3;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasHandCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 hand_card_count = 3;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount() {
      return handCardCount_;
    }

    // repeated int32 hand_cards_data = 4;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> handCardsData_;
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated int32 hand_cards_data = 4;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsData(int index) {
      return handCardsData_.get(index);
    }

    // optional int32 send_card_player = 5;
    public static final int SEND_CARD_PLAYER_FIELD_NUMBER = 5;
    private int sendCardPlayer_;
    /**
     * <code>optional int32 send_card_player = 5;</code>
     *
     * <pre>
     *发牌玩家
     * </pre>
     */
    public boolean hasSendCardPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 send_card_player = 5;</code>
     *
     * <pre>
     *发牌玩家
     * </pre>
     */
    public int getSendCardPlayer() {
      return sendCardPlayer_;
    }

    // optional int32 left_card_count = 6;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 6;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    private void initFields() {
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      handCardCount_ = 0;
      handCardsData_ = java.util.Collections.emptyList();
      sendCardPlayer_ = 0;
      leftCardCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, handCardCount_);
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeInt32(4, handCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, sendCardPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, leftCardCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, handCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardsDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, sendCardPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, leftCardCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.SendCardsGdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.SendCardsGdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.SendCardsGdy}
     *
     * <pre>
     *发牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.SendCardsGdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_SendCardsGdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_SendCardsGdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.SendCardsGdy.class, protobuf.clazz.gdy.gdyRsp.SendCardsGdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.SendCardsGdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        handCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        handCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        sendCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_SendCardsGdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.SendCardsGdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.SendCardsGdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.SendCardsGdy build() {
        protobuf.clazz.gdy.gdyRsp.SendCardsGdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.SendCardsGdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.SendCardsGdy result = new protobuf.clazz.gdy.gdyRsp.SendCardsGdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.handCardCount_ = handCardCount_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.handCardsData_ = handCardsData_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sendCardPlayer_ = sendCardPlayer_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.leftCardCount_ = leftCardCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.SendCardsGdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.SendCardsGdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.SendCardsGdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.SendCardsGdy.getDefaultInstance()) return this;
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasHandCardCount()) {
          setHandCardCount(other.getHandCardCount());
        }
        if (!other.handCardsData_.isEmpty()) {
          if (handCardsData_.isEmpty()) {
            handCardsData_ = other.handCardsData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHandCardsDataIsMutable();
            handCardsData_.addAll(other.handCardsData_);
          }
          onChanged();
        }
        if (other.hasSendCardPlayer()) {
          setSendCardPlayer(other.getSendCardPlayer());
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.SendCardsGdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.SendCardsGdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_count = 1;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000001;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 hand_card_count = 3;
      private int handCardCount_ ;
      /**
       * <code>optional int32 hand_card_count = 3;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasHandCardCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 hand_card_count = 3;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount() {
        return handCardCount_;
      }
      /**
       * <code>optional int32 hand_card_count = 3;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(int value) {
        bitField0_ |= 0x00000004;
        handCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hand_card_count = 3;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        handCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 hand_cards_data = 4;
      private java.util.List<java.lang.Integer> handCardsData_ = java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          handCardsData_ = new java.util.ArrayList<java.lang.Integer>(handCardsData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardsDataList() {
        return java.util.Collections.unmodifiableList(handCardsData_);
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        return handCardsData_.size();
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsData(int index) {
        return handCardsData_.get(index);
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, int value) {
        ensureHandCardsDataIsMutable();
        handCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(int value) {
        ensureHandCardsDataIsMutable();
        handCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardsDataIsMutable();
        super.addAll(values, handCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_cards_data = 4;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        handCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 send_card_player = 5;
      private int sendCardPlayer_ ;
      /**
       * <code>optional int32 send_card_player = 5;</code>
       *
       * <pre>
       *发牌玩家
       * </pre>
       */
      public boolean hasSendCardPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 send_card_player = 5;</code>
       *
       * <pre>
       *发牌玩家
       * </pre>
       */
      public int getSendCardPlayer() {
        return sendCardPlayer_;
      }
      /**
       * <code>optional int32 send_card_player = 5;</code>
       *
       * <pre>
       *发牌玩家
       * </pre>
       */
      public Builder setSendCardPlayer(int value) {
        bitField0_ |= 0x00000010;
        sendCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 send_card_player = 5;</code>
       *
       * <pre>
       *发牌玩家
       * </pre>
       */
      public Builder clearSendCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sendCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 left_card_count = 6;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000020;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000020);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.SendCardsGdy)
    }

    static {
      defaultInstance = new SendCardsGdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.SendCardsGdy)
  }

  public interface OutCardDataGdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 8;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 11;
    /**
     * <code>optional int32 is_first_out = 11;</code>
     *
     * <pre>
     *出牌者是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 11;</code>
     *
     * <pre>
     *出牌者是否首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 is_current_first_out = 13;
    /**
     * <code>optional int32 is_current_first_out = 13;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 13;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 cur_player_ya_pai = 14;
    /**
     * <code>optional int32 cur_player_ya_pai = 14;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 14;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 hand_card_count = 15;
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // optional int32 left_card_count = 17;
    /**
     * <code>optional int32 left_card_count = 17;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 17;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    int getLeftCardCount();

    // optional int32 game_cell = 18;
    /**
     * <code>optional int32 game_cell = 18;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasGameCell();
    /**
     * <code>optional int32 game_cell = 18;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getGameCell();

    // optional int32 times_num = 19;
    /**
     * <code>optional int32 times_num = 19;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimesNum();
    /**
     * <code>optional int32 times_num = 19;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNum();
  }
  /**
   * Protobuf type {@code gdy.OutCardDataGdy}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataGdy extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataGdyOrBuilder {
    // Use OutCardDataGdy.newBuilder() to construct.
    private OutCardDataGdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataGdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataGdy defaultInstance;
    public static OutCardDataGdy getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataGdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataGdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000200;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              bitField0_ |= 0x00000400;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000800;
              gameCell_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00001000;
              timesNum_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardDataGdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardDataGdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.class, protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataGdy> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataGdy>() {
      public OutCardDataGdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataGdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataGdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 8;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 11;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 11;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 11;</code>
     *
     * <pre>
     *出牌者是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 11;</code>
     *
     * <pre>
     *出牌者是否首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 is_current_first_out = 13;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 13;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 13;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 is_current_first_out = 13;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 cur_player_ya_pai = 14;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 14;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 14;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 14;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 hand_card_count = 15;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 16;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // optional int32 left_card_count = 17;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 17;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 17;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 left_card_count = 17;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional int32 game_cell = 18;
    public static final int GAME_CELL_FIELD_NUMBER = 18;
    private int gameCell_;
    /**
     * <code>optional int32 game_cell = 18;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasGameCell() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 game_cell = 18;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getGameCell() {
      return gameCell_;
    }

    // optional int32 times_num = 19;
    public static final int TIMES_NUM_FIELD_NUMBER = 19;
    private int timesNum_;
    /**
     * <code>optional int32 times_num = 19;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimesNum() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 times_num = 19;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNum() {
      return timesNum_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      isCurrentFirstOut_ = 0;
      curPlayerYaPai_ = 0;
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      gameCell_ = 0;
      timesNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(8, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(14, curPlayerYaPai_);
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(15, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(16, handCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(17, leftCardCount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(18, gameCell_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(19, timesNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, handCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, leftCardCount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, gameCell_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, timesNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.OutCardDataGdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.OutCardDataGdy}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.OutCardDataGdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardDataGdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardDataGdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.class, protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          handCardsDataBuilder_.clear();
        }
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        gameCell_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        timesNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardDataGdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardDataGdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardDataGdy build() {
        protobuf.clazz.gdy.gdyRsp.OutCardDataGdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardDataGdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.OutCardDataGdy result = new protobuf.clazz.gdy.gdyRsp.OutCardDataGdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.gameCell_ = gameCell_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.timesNum_ = timesNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.OutCardDataGdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.OutCardDataGdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.OutCardDataGdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.OutCardDataGdy.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasGameCell()) {
          setGameCell(other.getGameCell());
        }
        if (other.hasTimesNum()) {
          setTimesNum(other.getTimesNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.OutCardDataGdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.OutCardDataGdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 8;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 11;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 11;</code>
       *
       * <pre>
       *出牌者是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 is_first_out = 11;</code>
       *
       * <pre>
       *出牌者是否首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 11;</code>
       *
       * <pre>
       *出牌者是否首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 11;</code>
       *
       * <pre>
       *出牌者是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 13;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 13;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 is_current_first_out = 13;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 13;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00001000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 13;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 14;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 14;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 14;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 14;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x00002000;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 14;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x00002000);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 15;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // optional int32 left_card_count = 17;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 17;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 left_card_count = 17;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 17;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00010000;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 17;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00010000);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_cell = 18;
      private int gameCell_ ;
      /**
       * <code>optional int32 game_cell = 18;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasGameCell() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 game_cell = 18;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getGameCell() {
        return gameCell_;
      }
      /**
       * <code>optional int32 game_cell = 18;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setGameCell(int value) {
        bitField0_ |= 0x00020000;
        gameCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_cell = 18;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearGameCell() {
        bitField0_ = (bitField0_ & ~0x00020000);
        gameCell_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times_num = 19;
      private int timesNum_ ;
      /**
       * <code>optional int32 times_num = 19;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimesNum() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 times_num = 19;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNum() {
        return timesNum_;
      }
      /**
       * <code>optional int32 times_num = 19;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimesNum(int value) {
        bitField0_ |= 0x00040000;
        timesNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times_num = 19;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimesNum() {
        bitField0_ = (bitField0_ & ~0x00040000);
        timesNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.OutCardDataGdy)
    }

    static {
      defaultInstance = new OutCardDataGdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.OutCardDataGdy)
  }

  public interface PukeGameEndGdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 times_num = 6;
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    java.util.List<java.lang.Integer> getTimesNumList();
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNumCount();
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNum(int index);

    // repeated int32 end_score = 7;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 game_cell = 15;
    /**
     * <code>optional int32 game_cell = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasGameCell();
    /**
     * <code>optional int32 game_cell = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getGameCell();

    // optional int32 reason = 9;
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 is_bei_guan = 16;
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    java.util.List<java.lang.Integer> getIsBeiGuanList();
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    int getIsBeiGuanCount();
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    int getIsBeiGuan(int index);

    // repeated int32 all_end_score = 10;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 11;
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 12;
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 13;
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .RoomPlayerResponse players = 14;
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gdy.PukeGameEndGdy}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndGdy extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndGdyOrBuilder {
    // Use PukeGameEndGdy.newBuilder() to construct.
    private PukeGameEndGdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndGdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndGdy defaultInstance;
    public static PukeGameEndGdy getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndGdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndGdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                timesNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              timesNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                timesNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                timesNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 120: {
              bitField0_ |= 0x00000010;
              gameCell_ = input.readInt32();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                isBeiGuan_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              isBeiGuan_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                isBeiGuan_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                isBeiGuan_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          timesNum_ = java.util.Collections.unmodifiableList(timesNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          isBeiGuan_ = java.util.Collections.unmodifiableList(isBeiGuan_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_PukeGameEndGdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_PukeGameEndGdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.class, protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndGdy> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndGdy>() {
      public PukeGameEndGdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndGdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndGdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 times_num = 6;
    public static final int TIMES_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> timesNum_;
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTimesNumList() {
      return timesNum_;
    }
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNumCount() {
      return timesNum_.size();
    }
    /**
     * <code>repeated int32 times_num = 6;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNum(int index) {
      return timesNum_.get(index);
    }

    // repeated int32 end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *单句分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 game_cell = 15;
    public static final int GAME_CELL_FIELD_NUMBER = 15;
    private int gameCell_;
    /**
     * <code>optional int32 game_cell = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasGameCell() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_cell = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getGameCell() {
      return gameCell_;
    }

    // optional int32 reason = 9;
    public static final int REASON_FIELD_NUMBER = 9;
    private int reason_;
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 is_bei_guan = 16;
    public static final int IS_BEI_GUAN_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> isBeiGuan_;
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIsBeiGuanList() {
      return isBeiGuan_;
    }
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    public int getIsBeiGuanCount() {
      return isBeiGuan_.size();
    }
    /**
     * <code>repeated int32 is_bei_guan = 16;</code>
     *
     * <pre>
     *玩家是否被关 0:没被关，1：被关
     * </pre>
     */
    public int getIsBeiGuan(int index) {
      return isBeiGuan_.get(index);
    }

    // repeated int32 all_end_score = 10;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 11;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 12;
    public static final int WIN_NUM_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 12;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 13;
    public static final int LOSE_NUM_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 13;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .RoomPlayerResponse players = 14;
    public static final int PLAYERS_FIELD_NUMBER = 14;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 14;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      timesNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      gameCell_ = 0;
      reason_ = 0;
      isBeiGuan_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < timesNum_.size(); i++) {
        output.writeInt32(6, timesNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, reason_);
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(10, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(11, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(12, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(13, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(14, players_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(15, gameCell_);
      }
      for (int i = 0; i < isBeiGuan_.size(); i++) {
        output.writeInt32(16, isBeiGuan_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timesNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(timesNum_.get(i));
        }
        size += dataSize;
        size += 1 * getTimesNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 1 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, players_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, gameCell_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < isBeiGuan_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(isBeiGuan_.get(i));
        }
        size += dataSize;
        size += 2 * getIsBeiGuanList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.PukeGameEndGdy}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.PukeGameEndGdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_PukeGameEndGdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_PukeGameEndGdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.class, protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        timesNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        gameCell_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isBeiGuan_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_PukeGameEndGdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy build() {
        protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy result = new protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          timesNum_ = java.util.Collections.unmodifiableList(timesNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.timesNum_ = timesNum_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameCell_ = gameCell_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          isBeiGuan_ = java.util.Collections.unmodifiableList(isBeiGuan_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.isBeiGuan_ = isBeiGuan_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.timesNum_.isEmpty()) {
          if (timesNum_.isEmpty()) {
            timesNum_ = other.timesNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureTimesNumIsMutable();
            timesNum_.addAll(other.timesNum_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasGameCell()) {
          setGameCell(other.getGameCell());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.isBeiGuan_.isEmpty()) {
          if (isBeiGuan_.isEmpty()) {
            isBeiGuan_ = other.isBeiGuan_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureIsBeiGuanIsMutable();
            isBeiGuan_.addAll(other.isBeiGuan_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.PukeGameEndGdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 times_num = 6;
      private java.util.List<java.lang.Integer> timesNum_ = java.util.Collections.emptyList();
      private void ensureTimesNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          timesNum_ = new java.util.ArrayList<java.lang.Integer>(timesNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTimesNumList() {
        return java.util.Collections.unmodifiableList(timesNum_);
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNumCount() {
        return timesNum_.size();
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNum(int index) {
        return timesNum_.get(index);
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimesNum(
          int index, int value) {
        ensureTimesNumIsMutable();
        timesNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder addTimesNum(int value) {
        ensureTimesNumIsMutable();
        timesNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder addAllTimesNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTimesNumIsMutable();
        super.addAll(values, timesNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times_num = 6;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimesNum() {
        timesNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 7;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *单句分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000080;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_cell = 15;
      private int gameCell_ ;
      /**
       * <code>optional int32 game_cell = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasGameCell() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 game_cell = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getGameCell() {
        return gameCell_;
      }
      /**
       * <code>optional int32 game_cell = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setGameCell(int value) {
        bitField0_ |= 0x00000100;
        gameCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_cell = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearGameCell() {
        bitField0_ = (bitField0_ & ~0x00000100);
        gameCell_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 9;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000200;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 is_bei_guan = 16;
      private java.util.List<java.lang.Integer> isBeiGuan_ = java.util.Collections.emptyList();
      private void ensureIsBeiGuanIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          isBeiGuan_ = new java.util.ArrayList<java.lang.Integer>(isBeiGuan_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIsBeiGuanList() {
        return java.util.Collections.unmodifiableList(isBeiGuan_);
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public int getIsBeiGuanCount() {
        return isBeiGuan_.size();
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public int getIsBeiGuan(int index) {
        return isBeiGuan_.get(index);
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public Builder setIsBeiGuan(
          int index, int value) {
        ensureIsBeiGuanIsMutable();
        isBeiGuan_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public Builder addIsBeiGuan(int value) {
        ensureIsBeiGuanIsMutable();
        isBeiGuan_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public Builder addAllIsBeiGuan(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIsBeiGuanIsMutable();
        super.addAll(values, isBeiGuan_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_bei_guan = 16;</code>
       *
       * <pre>
       *玩家是否被关 0:没被关，1：被关
       * </pre>
       */
      public Builder clearIsBeiGuan() {
        isBeiGuan_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 10;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 11;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 12;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 12;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 13;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 13;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 14;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 14;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gdy.PukeGameEndGdy)
    }

    static {
      defaultInstance = new PukeGameEndGdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.PukeGameEndGdy)
  }

  public interface TableResponse_GdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse out_change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    int getOutChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 11;
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 12;
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 15;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .RoomInfo room_info = 18;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 19;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 is_current_first_out = 20;
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    int getIsCurrentFirstOut();

    // optional int32 cur_player_ya_pai = 21;
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 hand_card_count = 22;
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 23;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // optional int32 left_card_count = 24;
    /**
     * <code>optional int32 left_card_count = 24;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 24;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    int getLeftCardCount();

    // optional int32 game_cell = 25;
    /**
     * <code>optional int32 game_cell = 25;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasGameCell();
    /**
     * <code>optional int32 game_cell = 25;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getGameCell();

    // optional int32 times_num = 26;
    /**
     * <code>optional int32 times_num = 26;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimesNum();
    /**
     * <code>optional int32 times_num = 26;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNum();
  }
  /**
   * Protobuf type {@code gdy.TableResponse_Gdy}
   */
  public static final class TableResponse_Gdy extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_GdyOrBuilder {
    // Use TableResponse_Gdy.newBuilder() to construct.
    private TableResponse_Gdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_Gdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_Gdy defaultInstance;
    public static TableResponse_Gdy getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_Gdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_Gdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outChangeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              outChangeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 146: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000400;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 186: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00200000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 192: {
              bitField0_ |= 0x00000800;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x00001000;
              gameCell_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x00002000;
              timesNum_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outChangeCardsData_ = java.util.Collections.unmodifiableList(outChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_TableResponse_Gdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_TableResponse_Gdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.class, protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_Gdy> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_Gdy>() {
      public TableResponse_Gdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_Gdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_Gdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse out_change_cards_data = 6;
    public static final int OUT_CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outChangeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutChangeCardsDataList() {
      return outChangeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutChangeCardsDataOrBuilderList() {
      return outChangeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public int getOutChangeCardsDataCount() {
      return outChangeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index) {
      return outChangeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
        int index) {
      return outChangeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 11;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 12;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 15;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 15;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1是首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .RoomInfo room_info = 18;
    public static final int ROOM_INFO_FIELD_NUMBER = 18;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 19;
    public static final int PLAYERS_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 is_current_first_out = 20;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 20;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 20;</code>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 cur_player_ya_pai = 21;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 21;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 21;</code>
     *
     * <pre>
     *判断能否压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 hand_card_count = 22;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 22;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 23;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 23;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // optional int32 left_card_count = 24;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 24;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 24;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 left_card_count = 24;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional int32 game_cell = 25;
    public static final int GAME_CELL_FIELD_NUMBER = 25;
    private int gameCell_;
    /**
     * <code>optional int32 game_cell = 25;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasGameCell() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 game_cell = 25;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getGameCell() {
      return gameCell_;
    }

    // optional int32 times_num = 26;
    public static final int TIMES_NUM_FIELD_NUMBER = 26;
    private int timesNum_;
    /**
     * <code>optional int32 times_num = 26;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimesNum() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 times_num = 26;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNum() {
      return timesNum_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outChangeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
      curPlayerYaPai_ = 0;
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      gameCell_ = 0;
      timesNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outChangeCardsData_.size(); i++) {
        output.writeMessage(6, outChangeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(11, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(12, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(17, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(19, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(21, curPlayerYaPai_);
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(22, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(23, handCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(24, leftCardCount_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(25, gameCell_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(26, timesNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outChangeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, outChangeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, handCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, leftCardCount_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, gameCell_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, timesNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.TableResponse_Gdy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.TableResponse_GdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_TableResponse_Gdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_TableResponse_Gdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.class, protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getOutChangeCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          outChangeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          handCardsDataBuilder_.clear();
        }
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        gameCell_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        timesNum_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_TableResponse_Gdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy build() {
        protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy result = new protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (outChangeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            outChangeCardsData_ = java.util.Collections.unmodifiableList(outChangeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.outChangeCardsData_ = outChangeCardsData_;
        } else {
          result.outChangeCardsData_ = outChangeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.gameCell_ = gameCell_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.timesNum_ = timesNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (outChangeCardsDataBuilder_ == null) {
          if (!other.outChangeCardsData_.isEmpty()) {
            if (outChangeCardsData_.isEmpty()) {
              outChangeCardsData_ = other.outChangeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureOutChangeCardsDataIsMutable();
              outChangeCardsData_.addAll(other.outChangeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outChangeCardsData_.isEmpty()) {
            if (outChangeCardsDataBuilder_.isEmpty()) {
              outChangeCardsDataBuilder_.dispose();
              outChangeCardsDataBuilder_ = null;
              outChangeCardsData_ = other.outChangeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              outChangeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutChangeCardsDataFieldBuilder() : null;
            } else {
              outChangeCardsDataBuilder_.addAllMessages(other.outChangeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00200000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasGameCell()) {
          setGameCell(other.getGameCell());
        }
        if (other.hasTimesNum()) {
          setTimesNum(other.getTimesNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.TableResponse_Gdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse out_change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outChangeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outChangeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outChangeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outChangeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutChangeCardsDataList() {
        if (outChangeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outChangeCardsData_);
        } else {
          return outChangeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public int getOutChangeCardsDataCount() {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.size();
        } else {
          return outChangeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutChangeCardsData(int index) {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.get(index);
        } else {
          return outChangeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.set(index, value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outChangeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(index, value);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addAllOutChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          super.addAll(values, outChangeCardsData_);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder clearOutChangeCardsData() {
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder removeOutChangeCardsData(int index) {
        if (outChangeCardsDataBuilder_ == null) {
          ensureOutChangeCardsDataIsMutable();
          outChangeCardsData_.remove(index);
          onChanged();
        } else {
          outChangeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutChangeCardsDataBuilder(
          int index) {
        return getOutChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutChangeCardsDataOrBuilder(
          int index) {
        if (outChangeCardsDataBuilder_ == null) {
          return outChangeCardsData_.get(index);  } else {
          return outChangeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutChangeCardsDataOrBuilderList() {
        if (outChangeCardsDataBuilder_ != null) {
          return outChangeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outChangeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutChangeCardsDataBuilder() {
        return getOutChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutChangeCardsDataBuilder(
          int index) {
        return getOutChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_change_cards_data = 6;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutChangeCardsDataBuilderList() {
        return getOutChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutChangeCardsDataFieldBuilder() {
        if (outChangeCardsDataBuilder_ == null) {
          outChangeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outChangeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          outChangeCardsData_ = null;
        }
        return outChangeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 11;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 12;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 15;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00004000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1是首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00008000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 18;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 19;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 is_current_first_out = 20;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00040000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 20;</code>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 21;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x00080000;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 21;</code>
       *
       * <pre>
       *判断能否压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x00080000);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 22;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 22;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 23;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 23;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // optional int32 left_card_count = 24;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 24;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 left_card_count = 24;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 24;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00400000;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 24;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00400000);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_cell = 25;
      private int gameCell_ ;
      /**
       * <code>optional int32 game_cell = 25;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasGameCell() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 game_cell = 25;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getGameCell() {
        return gameCell_;
      }
      /**
       * <code>optional int32 game_cell = 25;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setGameCell(int value) {
        bitField0_ |= 0x00800000;
        gameCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_cell = 25;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearGameCell() {
        bitField0_ = (bitField0_ & ~0x00800000);
        gameCell_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times_num = 26;
      private int timesNum_ ;
      /**
       * <code>optional int32 times_num = 26;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimesNum() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 times_num = 26;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNum() {
        return timesNum_;
      }
      /**
       * <code>optional int32 times_num = 26;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimesNum(int value) {
        bitField0_ |= 0x01000000;
        timesNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times_num = 26;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimesNum() {
        bitField0_ = (bitField0_ & ~0x01000000);
        timesNum_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.TableResponse_Gdy)
    }

    static {
      defaultInstance = new TableResponse_Gdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.TableResponse_Gdy)
  }

  public interface GameStart_GdyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 5;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 6;
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 left_card_count = 7;
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    int getLeftCardCount();

    // optional int32 game_cell = 8;
    /**
     * <code>optional int32 game_cell = 8;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasGameCell();
    /**
     * <code>optional int32 game_cell = 8;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getGameCell();

    // optional int32 times_num = 9;
    /**
     * <code>optional int32 times_num = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    boolean hasTimesNum();
    /**
     * <code>optional int32 times_num = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getTimesNum();

    // optional int32 min_card_value = 10;
    /**
     * <code>optional int32 min_card_value = 10;</code>
     *
     * <pre>
     *最小牌数据
     * </pre>
     */
    boolean hasMinCardValue();
    /**
     * <code>optional int32 min_card_value = 10;</code>
     *
     * <pre>
     *最小牌数据
     * </pre>
     */
    int getMinCardValue();
  }
  /**
   * Protobuf type {@code gdy.GameStart_Gdy}
   */
  public static final class GameStart_Gdy extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_GdyOrBuilder {
    // Use GameStart_Gdy.newBuilder() to construct.
    private GameStart_Gdy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Gdy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Gdy defaultInstance;
    public static GameStart_Gdy getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Gdy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Gdy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
            case 42: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              gameCell_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              timesNum_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000040;
              minCardValue_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_GameStart_Gdy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_GameStart_Gdy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.class, protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Gdy> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Gdy>() {
      public GameStart_Gdy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Gdy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Gdy> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 5;
    public static final int ROOM_INFO_FIELD_NUMBER = 5;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 6;
    public static final int PLAYERS_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 left_card_count = 7;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 7;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional int32 game_cell = 8;
    public static final int GAME_CELL_FIELD_NUMBER = 8;
    private int gameCell_;
    /**
     * <code>optional int32 game_cell = 8;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasGameCell() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_cell = 8;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getGameCell() {
      return gameCell_;
    }

    // optional int32 times_num = 9;
    public static final int TIMES_NUM_FIELD_NUMBER = 9;
    private int timesNum_;
    /**
     * <code>optional int32 times_num = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public boolean hasTimesNum() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 times_num = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getTimesNum() {
      return timesNum_;
    }

    // optional int32 min_card_value = 10;
    public static final int MIN_CARD_VALUE_FIELD_NUMBER = 10;
    private int minCardValue_;
    /**
     * <code>optional int32 min_card_value = 10;</code>
     *
     * <pre>
     *最小牌数据
     * </pre>
     */
    public boolean hasMinCardValue() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 min_card_value = 10;</code>
     *
     * <pre>
     *最小牌数据
     * </pre>
     */
    public int getMinCardValue() {
      return minCardValue_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      leftCardCount_ = 0;
      gameCell_ = 0;
      timesNum_ = 0;
      minCardValue_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(6, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, leftCardCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, gameCell_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, timesNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(10, minCardValue_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, leftCardCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, gameCell_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, timesNum_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, minCardValue_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.GameStart_Gdy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.GameStart_Gdy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.GameStart_GdyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_GameStart_Gdy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_GameStart_Gdy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.class, protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gameCell_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        timesNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        minCardValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_GameStart_Gdy_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.GameStart_Gdy getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.GameStart_Gdy build() {
        protobuf.clazz.gdy.gdyRsp.GameStart_Gdy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.GameStart_Gdy buildPartial() {
        protobuf.clazz.gdy.gdyRsp.GameStart_Gdy result = new protobuf.clazz.gdy.gdyRsp.GameStart_Gdy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameCell_ = gameCell_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.timesNum_ = timesNum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000040;
        }
        result.minCardValue_ = minCardValue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.GameStart_Gdy) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.GameStart_Gdy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.GameStart_Gdy other) {
        if (other == protobuf.clazz.gdy.gdyRsp.GameStart_Gdy.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasGameCell()) {
          setGameCell(other.getGameCell());
        }
        if (other.hasTimesNum()) {
          setTimesNum(other.getTimesNum());
        }
        if (other.hasMinCardValue()) {
          setMinCardValue(other.getMinCardValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.GameStart_Gdy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.GameStart_Gdy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 5;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 6;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 left_card_count = 7;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000040;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_cell = 8;
      private int gameCell_ ;
      /**
       * <code>optional int32 game_cell = 8;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasGameCell() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 game_cell = 8;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getGameCell() {
        return gameCell_;
      }
      /**
       * <code>optional int32 game_cell = 8;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setGameCell(int value) {
        bitField0_ |= 0x00000080;
        gameCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_cell = 8;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearGameCell() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gameCell_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times_num = 9;
      private int timesNum_ ;
      /**
       * <code>optional int32 times_num = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public boolean hasTimesNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 times_num = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getTimesNum() {
        return timesNum_;
      }
      /**
       * <code>optional int32 times_num = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setTimesNum(int value) {
        bitField0_ |= 0x00000100;
        timesNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times_num = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearTimesNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        timesNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 min_card_value = 10;
      private int minCardValue_ ;
      /**
       * <code>optional int32 min_card_value = 10;</code>
       *
       * <pre>
       *最小牌数据
       * </pre>
       */
      public boolean hasMinCardValue() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 min_card_value = 10;</code>
       *
       * <pre>
       *最小牌数据
       * </pre>
       */
      public int getMinCardValue() {
        return minCardValue_;
      }
      /**
       * <code>optional int32 min_card_value = 10;</code>
       *
       * <pre>
       *最小牌数据
       * </pre>
       */
      public Builder setMinCardValue(int value) {
        bitField0_ |= 0x00000200;
        minCardValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_card_value = 10;</code>
       *
       * <pre>
       *最小牌数据
       * </pre>
       */
      public Builder clearMinCardValue() {
        bitField0_ = (bitField0_ & ~0x00000200);
        minCardValue_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.GameStart_Gdy)
    }

    static {
      defaultInstance = new GameStart_Gdy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.GameStart_Gdy)
  }

  public interface OutCardData_Request_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 out_cards = 1;
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsList();
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getOutCardsCount();
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getOutCards(int index);

    // optional int32 out_card_count = 2;
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    boolean hasOutCardCount();
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    int getOutCardCount();

    // repeated int32 change_out_cards = 3;
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeOutCardsList();
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getChangeOutCardsCount();
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    int getChangeOutCards(int index);

    // optional int32 b_out_card_type = 4;
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    boolean hasBOutCardType();
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    int getBOutCardType();
  }
  /**
   * Protobuf type {@code gdy.OutCardData_Request_GDY}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardData_Request_GDY extends
      com.google.protobuf.GeneratedMessage
      implements OutCardData_Request_GDYOrBuilder {
    // Use OutCardData_Request_GDY.newBuilder() to construct.
    private OutCardData_Request_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardData_Request_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardData_Request_GDY defaultInstance;
    public static OutCardData_Request_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardData_Request_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardData_Request_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                outCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              outCards_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                outCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              outCardCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeOutCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeOutCards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeOutCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeOutCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              bOutCardType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = java.util.Collections.unmodifiableList(outCards_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = java.util.Collections.unmodifiableList(changeOutCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardData_Request_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardData_Request_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.class, protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardData_Request_GDY> PARSER =
        new com.google.protobuf.AbstractParser<OutCardData_Request_GDY>() {
      public OutCardData_Request_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardData_Request_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardData_Request_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 out_cards = 1;
    public static final int OUT_CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> outCards_;
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsList() {
      return outCards_;
    }
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getOutCardsCount() {
      return outCards_.size();
    }
    /**
     * <code>repeated int32 out_cards = 1;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getOutCards(int index) {
      return outCards_.get(index);
    }

    // optional int32 out_card_count = 2;
    public static final int OUT_CARD_COUNT_FIELD_NUMBER = 2;
    private int outCardCount_;
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    public boolean hasOutCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_count = 2;</code>
     *
     * <pre>
     *出牌的数量
     * </pre>
     */
    public int getOutCardCount() {
      return outCardCount_;
    }

    // repeated int32 change_out_cards = 3;
    public static final int CHANGE_OUT_CARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeOutCards_;
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeOutCardsList() {
      return changeOutCards_;
    }
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getChangeOutCardsCount() {
      return changeOutCards_.size();
    }
    /**
     * <code>repeated int32 change_out_cards = 3;</code>
     *
     * <pre>
     *所出的牌
     * </pre>
     */
    public int getChangeOutCards(int index) {
      return changeOutCards_.get(index);
    }

    // optional int32 b_out_card_type = 4;
    public static final int B_OUT_CARD_TYPE_FIELD_NUMBER = 4;
    private int bOutCardType_;
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    public boolean hasBOutCardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 b_out_card_type = 4;</code>
     *
     * <pre>
     *是否出牌 0 不出 ，带 出牌类型
     * </pre>
     */
    public int getBOutCardType() {
      return bOutCardType_;
    }

    private void initFields() {
      outCards_ = java.util.Collections.emptyList();
      outCardCount_ = 0;
      changeOutCards_ = java.util.Collections.emptyList();
      bOutCardType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < outCards_.size(); i++) {
        output.writeInt32(1, outCards_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, outCardCount_);
      }
      for (int i = 0; i < changeOutCards_.size(); i++) {
        output.writeInt32(3, changeOutCards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, bOutCardType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < outCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCards_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, outCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeOutCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeOutCards_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeOutCardsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bOutCardType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.OutCardData_Request_GDY}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardData_Request_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardData_Request_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.class, protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        changeOutCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        bOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_OutCardData_Request_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY build() {
        protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY result = new protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = java.util.Collections.unmodifiableList(outCards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.outCards_ = outCards_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardCount_ = outCardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = java.util.Collections.unmodifiableList(changeOutCards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeOutCards_ = changeOutCards_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bOutCardType_ = bOutCardType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY.getDefaultInstance()) return this;
        if (!other.outCards_.isEmpty()) {
          if (outCards_.isEmpty()) {
            outCards_ = other.outCards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOutCardsIsMutable();
            outCards_.addAll(other.outCards_);
          }
          onChanged();
        }
        if (other.hasOutCardCount()) {
          setOutCardCount(other.getOutCardCount());
        }
        if (!other.changeOutCards_.isEmpty()) {
          if (changeOutCards_.isEmpty()) {
            changeOutCards_ = other.changeOutCards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeOutCardsIsMutable();
            changeOutCards_.addAll(other.changeOutCards_);
          }
          onChanged();
        }
        if (other.hasBOutCardType()) {
          setBOutCardType(other.getBOutCardType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.OutCardData_Request_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 out_cards = 1;
      private java.util.List<java.lang.Integer> outCards_ = java.util.Collections.emptyList();
      private void ensureOutCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          outCards_ = new java.util.ArrayList<java.lang.Integer>(outCards_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsList() {
        return java.util.Collections.unmodifiableList(outCards_);
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getOutCardsCount() {
        return outCards_.size();
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getOutCards(int index) {
        return outCards_.get(index);
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder setOutCards(
          int index, int value) {
        ensureOutCardsIsMutable();
        outCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addOutCards(int value) {
        ensureOutCardsIsMutable();
        outCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addAllOutCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsIsMutable();
        super.addAll(values, outCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards = 1;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder clearOutCards() {
        outCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 out_card_count = 2;
      private int outCardCount_ ;
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public boolean hasOutCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public int getOutCardCount() {
        return outCardCount_;
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public Builder setOutCardCount(int value) {
        bitField0_ |= 0x00000002;
        outCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_count = 2;</code>
       *
       * <pre>
       *出牌的数量
       * </pre>
       */
      public Builder clearOutCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        outCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 change_out_cards = 3;
      private java.util.List<java.lang.Integer> changeOutCards_ = java.util.Collections.emptyList();
      private void ensureChangeOutCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeOutCards_ = new java.util.ArrayList<java.lang.Integer>(changeOutCards_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeOutCardsList() {
        return java.util.Collections.unmodifiableList(changeOutCards_);
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getChangeOutCardsCount() {
        return changeOutCards_.size();
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public int getChangeOutCards(int index) {
        return changeOutCards_.get(index);
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder setChangeOutCards(
          int index, int value) {
        ensureChangeOutCardsIsMutable();
        changeOutCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addChangeOutCards(int value) {
        ensureChangeOutCardsIsMutable();
        changeOutCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder addAllChangeOutCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeOutCardsIsMutable();
        super.addAll(values, changeOutCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_out_cards = 3;</code>
       *
       * <pre>
       *所出的牌
       * </pre>
       */
      public Builder clearChangeOutCards() {
        changeOutCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 b_out_card_type = 4;
      private int bOutCardType_ ;
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public boolean hasBOutCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public int getBOutCardType() {
        return bOutCardType_;
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public Builder setBOutCardType(int value) {
        bitField0_ |= 0x00000008;
        bOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 b_out_card_type = 4;</code>
       *
       * <pre>
       *是否出牌 0 不出 ，带 出牌类型
       * </pre>
       */
      public Builder clearBOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bOutCardType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.OutCardData_Request_GDY)
    }

    static {
      defaultInstance = new OutCardData_Request_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.OutCardData_Request_GDY)
  }

  public interface QiePaiResult_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiepai_chair = 1;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasQiepaiChair();
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getQiepaiChair();

    // optional int32 card_index = 2;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code gdy.QiePaiResult_GDY}
   *
   * <pre>
   *切牌结果 1008
   * </pre>
   */
  public static final class QiePaiResult_GDY extends
      com.google.protobuf.GeneratedMessage
      implements QiePaiResult_GDYOrBuilder {
    // Use QiePaiResult_GDY.newBuilder() to construct.
    private QiePaiResult_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private QiePaiResult_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final QiePaiResult_GDY defaultInstance;
    public static QiePaiResult_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public QiePaiResult_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private QiePaiResult_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiepaiChair_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiResult_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiResult_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.class, protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<QiePaiResult_GDY> PARSER =
        new com.google.protobuf.AbstractParser<QiePaiResult_GDY>() {
      public QiePaiResult_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QiePaiResult_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<QiePaiResult_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiepai_chair = 1;
    public static final int QIEPAI_CHAIR_FIELD_NUMBER = 1;
    private int qiepaiChair_;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasQiepaiChair() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getQiepaiChair() {
      return qiepaiChair_;
    }

    // optional int32 card_index = 2;
    public static final int CARD_INDEX_FIELD_NUMBER = 2;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      qiepaiChair_ = 0;
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.QiePaiResult_GDY}
     *
     * <pre>
     *切牌结果 1008
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiResult_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiResult_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.class, protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiepaiChair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiResult_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY build() {
        protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY result = new protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiepaiChair_ = qiepaiChair_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY.getDefaultInstance()) return this;
        if (other.hasQiepaiChair()) {
          setQiepaiChair(other.getQiepaiChair());
        }
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.QiePaiResult_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiepai_chair = 1;
      private int qiepaiChair_ ;
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasQiepaiChair() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getQiepaiChair() {
        return qiepaiChair_;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setQiepaiChair(int value) {
        bitField0_ |= 0x00000001;
        qiepaiChair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearQiepaiChair() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiepaiChair_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_index = 2;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000002;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.QiePaiResult_GDY)
    }

    static {
      defaultInstance = new QiePaiResult_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.QiePaiResult_GDY)
  }

  public interface QiePaiStart_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiepai_chair = 1;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasQiepaiChair();
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getQiepaiChair();

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .RoomInfo room_info = 3;
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 4;
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 banker_player = 5;
    /**
     * <code>optional int32 banker_player = 5;</code>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 5;</code>
     */
    int getBankerPlayer();
  }
  /**
   * Protobuf type {@code gdy.QiePaiStart_GDY}
   *
   * <pre>
   *切牌开始 1007
   * </pre>
   */
  public static final class QiePaiStart_GDY extends
      com.google.protobuf.GeneratedMessage
      implements QiePaiStart_GDYOrBuilder {
    // Use QiePaiStart_GDY.newBuilder() to construct.
    private QiePaiStart_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private QiePaiStart_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final QiePaiStart_GDY defaultInstance;
    public static QiePaiStart_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public QiePaiStart_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private QiePaiStart_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiepaiChair_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 26: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000008;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              bankerPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiStart_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiStart_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.class, protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<QiePaiStart_GDY> PARSER =
        new com.google.protobuf.AbstractParser<QiePaiStart_GDY>() {
      public QiePaiStart_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QiePaiStart_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<QiePaiStart_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiepai_chair = 1;
    public static final int QIEPAI_CHAIR_FIELD_NUMBER = 1;
    private int qiepaiChair_;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasQiepaiChair() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getQiepaiChair() {
      return qiepaiChair_;
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .RoomInfo room_info = 3;
    public static final int ROOM_INFO_FIELD_NUMBER = 3;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 3;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 4;
    public static final int PLAYERS_FIELD_NUMBER = 4;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 4;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 banker_player = 5;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 5;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 5;</code>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_player = 5;</code>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    private void initFields() {
      qiepaiChair_ = 0;
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      bankerPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(4, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, bankerPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, bankerPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.QiePaiStart_GDY}
     *
     * <pre>
     *切牌开始 1007
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiStart_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiStart_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.class, protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiepaiChair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          playersBuilder_.clear();
        }
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_QiePaiStart_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY build() {
        protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY result = new protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiepaiChair_ = qiepaiChair_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPlayer_ = bankerPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY.getDefaultInstance()) return this;
        if (other.hasQiepaiChair()) {
          setQiepaiChair(other.getQiepaiChair());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000008);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.QiePaiStart_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiepai_chair = 1;
      private int qiepaiChair_ ;
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasQiepaiChair() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getQiepaiChair() {
        return qiepaiChair_;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setQiepaiChair(int value) {
        bitField0_ |= 0x00000001;
        qiepaiChair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearQiepaiChair() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiepaiChair_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 3;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 4;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 4;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 banker_player = 5;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 5;</code>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 banker_player = 5;</code>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 5;</code>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000010;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 5;</code>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.QiePaiStart_GDY)
    }

    static {
      defaultInstance = new QiePaiStart_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.QiePaiStart_GDY)
  }

  public interface CallBankerResponse_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 all_call_action = 1;
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllCallActionList();
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    int getAllCallActionCount();
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    int getAllCallAction(int index);

    // optional int32 call_player = 3;
    /**
     * <code>optional int32 call_player = 3;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 3;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getCallPlayer();

    // optional int32 call_action = 4;
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     * 0：不叫 1 叫
     * </pre>
     */
    boolean hasCallAction();
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     * 0：不叫 1 叫
     * </pre>
     */
    int getCallAction();

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code gdy.CallBankerResponse_GDY}
   *
   * <pre>
   *叫庄开始 1009
   * </pre>
   */
  public static final class CallBankerResponse_GDY extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_GDYOrBuilder {
    // Use CallBankerResponse_GDY.newBuilder() to construct.
    private CallBankerResponse_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_GDY defaultInstance;
    public static CallBankerResponse_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                allCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              allCallAction_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                allCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                allCallAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              callPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              callAction_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          allCallAction_ = java.util.Collections.unmodifiableList(allCallAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResponse_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResponse_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.class, protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_GDY> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_GDY>() {
      public CallBankerResponse_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 all_call_action = 1;
    public static final int ALL_CALL_ACTION_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> allCallAction_;
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllCallActionList() {
      return allCallAction_;
    }
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    public int getAllCallActionCount() {
      return allCallAction_.size();
    }
    /**
     * <code>repeated int32 all_call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 1：叫
     * </pre>
     */
    public int getAllCallAction(int index) {
      return allCallAction_.get(index);
    }

    // optional int32 call_player = 3;
    public static final int CALL_PLAYER_FIELD_NUMBER = 3;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 3;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 call_player = 3;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 call_action = 4;
    public static final int CALL_ACTION_FIELD_NUMBER = 4;
    private int callAction_;
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     * 0：不叫 1 叫
     * </pre>
     */
    public boolean hasCallAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     * 0：不叫 1 叫
     * </pre>
     */
    public int getCallAction() {
      return callAction_;
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      allCallAction_ = java.util.Collections.emptyList();
      callPlayer_ = 0;
      callAction_ = 0;
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < allCallAction_.size(); i++) {
        output.writeInt32(1, allCallAction_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, callPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, callAction_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < allCallAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allCallAction_.get(i));
        }
        size += dataSize;
        size += 1 * getAllCallActionList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, callPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, callAction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.CallBankerResponse_GDY}
     *
     * <pre>
     *叫庄开始 1009
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResponse_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResponse_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.class, protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        allCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        callAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResponse_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY build() {
        protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY result = new protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          allCallAction_ = java.util.Collections.unmodifiableList(allCallAction_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.allCallAction_ = allCallAction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callAction_ = callAction_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY.getDefaultInstance()) return this;
        if (!other.allCallAction_.isEmpty()) {
          if (allCallAction_.isEmpty()) {
            allCallAction_ = other.allCallAction_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAllCallActionIsMutable();
            allCallAction_.addAll(other.allCallAction_);
          }
          onChanged();
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCallAction()) {
          setCallAction(other.getCallAction());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.CallBankerResponse_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 all_call_action = 1;
      private java.util.List<java.lang.Integer> allCallAction_ = java.util.Collections.emptyList();
      private void ensureAllCallActionIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          allCallAction_ = new java.util.ArrayList<java.lang.Integer>(allCallAction_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllCallActionList() {
        return java.util.Collections.unmodifiableList(allCallAction_);
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public int getAllCallActionCount() {
        return allCallAction_.size();
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public int getAllCallAction(int index) {
        return allCallAction_.get(index);
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public Builder setAllCallAction(
          int index, int value) {
        ensureAllCallActionIsMutable();
        allCallAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public Builder addAllCallAction(int value) {
        ensureAllCallActionIsMutable();
        allCallAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public Builder addAllAllCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllCallActionIsMutable();
        super.addAll(values, allCallAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 1：叫
       * </pre>
       */
      public Builder clearAllCallAction() {
        allCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 call_player = 3;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 3;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 3;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 3;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 3;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_action = 4;
      private int callAction_ ;
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       * 0：不叫 1 叫
       * </pre>
       */
      public boolean hasCallAction() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       * 0：不叫 1 叫
       * </pre>
       */
      public int getCallAction() {
        return callAction_;
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       * 0：不叫 1 叫
       * </pre>
       */
      public Builder setCallAction(int value) {
        bitField0_ |= 0x00000004;
        callAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       * 0：不叫 1 叫
       * </pre>
       */
      public Builder clearCallAction() {
        bitField0_ = (bitField0_ & ~0x00000004);
        callAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000008;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.CallBankerResponse_GDY)
    }

    static {
      defaultInstance = new CallBankerResponse_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.CallBankerResponse_GDY)
  }

  public interface CallBankerResult_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 call_action = 1;
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallActionList();
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    int getCallActionCount();
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    int getCallAction(int index);

    // optional int32 banker = 2;
    /**
     * <code>optional int32 banker = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBanker();
    /**
     * <code>optional int32 banker = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBanker();
  }
  /**
   * Protobuf type {@code gdy.CallBankerResult_GDY}
   *
   * <pre>
   *叫庄结果 1010
   * </pre>
   */
  public static final class CallBankerResult_GDY extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResult_GDYOrBuilder {
    // Use CallBankerResult_GDY.newBuilder() to construct.
    private CallBankerResult_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResult_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResult_GDY defaultInstance;
    public static CallBankerResult_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResult_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResult_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              callAction_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                callAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              banker_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResult_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResult_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.class, protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResult_GDY> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResult_GDY>() {
      public CallBankerResult_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResult_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResult_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 call_action = 1;
    public static final int CALL_ACTION_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> callAction_;
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallActionList() {
      return callAction_;
    }
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    public int getCallActionCount() {
      return callAction_.size();
    }
    /**
     * <code>repeated int32 call_action = 1;</code>
     *
     * <pre>
     *-1:未操作 0：不叫 2：叫
     * </pre>
     */
    public int getCallAction(int index) {
      return callAction_.get(index);
    }

    // optional int32 banker = 2;
    public static final int BANKER_FIELD_NUMBER = 2;
    private int banker_;
    /**
     * <code>optional int32 banker = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker = 2;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBanker() {
      return banker_;
    }

    private void initFields() {
      callAction_ = java.util.Collections.emptyList();
      banker_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < callAction_.size(); i++) {
        output.writeInt32(1, callAction_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, banker_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < callAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callAction_.get(i));
        }
        size += dataSize;
        size += 1 * getCallActionList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, banker_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.CallBankerResult_GDY}
     *
     * <pre>
     *叫庄结果 1010
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResult_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResult_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.class, protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        banker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_CallBankerResult_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY build() {
        protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY result = new protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.callAction_ = callAction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.banker_ = banker_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY.getDefaultInstance()) return this;
        if (!other.callAction_.isEmpty()) {
          if (callAction_.isEmpty()) {
            callAction_ = other.callAction_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCallActionIsMutable();
            callAction_.addAll(other.callAction_);
          }
          onChanged();
        }
        if (other.hasBanker()) {
          setBanker(other.getBanker());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.CallBankerResult_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 call_action = 1;
      private java.util.List<java.lang.Integer> callAction_ = java.util.Collections.emptyList();
      private void ensureCallActionIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          callAction_ = new java.util.ArrayList<java.lang.Integer>(callAction_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallActionList() {
        return java.util.Collections.unmodifiableList(callAction_);
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public int getCallActionCount() {
        return callAction_.size();
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public int getCallAction(int index) {
        return callAction_.get(index);
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public Builder setCallAction(
          int index, int value) {
        ensureCallActionIsMutable();
        callAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public Builder addCallAction(int value) {
        ensureCallActionIsMutable();
        callAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public Builder addAllCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallActionIsMutable();
        super.addAll(values, callAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 1;</code>
       *
       * <pre>
       *-1:未操作 0：不叫 2：叫
       * </pre>
       */
      public Builder clearCallAction() {
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 banker = 2;
      private int banker_ ;
      /**
       * <code>optional int32 banker = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBanker() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBanker() {
        return banker_;
      }
      /**
       * <code>optional int32 banker = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBanker(int value) {
        bitField0_ |= 0x00000002;
        banker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker = 2;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBanker() {
        bitField0_ = (bitField0_ & ~0x00000002);
        banker_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.CallBankerResult_GDY)
    }

    static {
      defaultInstance = new CallBankerResult_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.CallBankerResult_GDY)
  }

  public interface Opreate_RequestWsk_GDYOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：切牌 2:切牌3：抢 4：不抢
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：切牌 2:切牌3：抢 4：不抢
     * </pre>
     */
    int getOpreateType();

    // optional int32 card_index = 2;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *切牌位置
     * </pre>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *切牌位置
     * </pre>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code gdy.Opreate_RequestWsk_GDY}
   *
   * <pre>
   *请求 1077
   * </pre>
   */
  public static final class Opreate_RequestWsk_GDY extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_GDYOrBuilder {
    // Use Opreate_RequestWsk_GDY.newBuilder() to construct.
    private Opreate_RequestWsk_GDY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_GDY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_GDY defaultInstance;
    public static Opreate_RequestWsk_GDY getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_GDY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_GDY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_Opreate_RequestWsk_GDY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_Opreate_RequestWsk_GDY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.class, protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_GDY> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_GDY>() {
      public Opreate_RequestWsk_GDY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_GDY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_GDY> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：切牌 2:切牌3：抢 4：不抢
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：切牌 2:切牌3：抢 4：不抢
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 card_index = 2;
    public static final int CARD_INDEX_FIELD_NUMBER = 2;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *切牌位置
     * </pre>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *切牌位置
     * </pre>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      opreateType_ = 0;
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gdy.Opreate_RequestWsk_GDY}
     *
     * <pre>
     *请求 1077
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_Opreate_RequestWsk_GDY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_Opreate_RequestWsk_GDY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.class, protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.Builder.class);
      }

      // Construct using protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gdy.gdyRsp.internal_static_gdy_Opreate_RequestWsk_GDY_descriptor;
      }

      public protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY getDefaultInstanceForType() {
        return protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.getDefaultInstance();
      }

      public protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY build() {
        protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY buildPartial() {
        protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY result = new protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY) {
          return mergeFrom((protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY other) {
        if (other == protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gdy.gdyRsp.Opreate_RequestWsk_GDY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：切牌 2:切牌3：抢 4：不抢
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：切牌 2:切牌3：抢 4：不抢
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：切牌 2:切牌3：抢 4：不抢
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：切牌 2:切牌3：抢 4：不抢
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_index = 2;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *切牌位置
       * </pre>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *切牌位置
       * </pre>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *切牌位置
       * </pre>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000002;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *切牌位置
       * </pre>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gdy.Opreate_RequestWsk_GDY)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_GDY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gdy.Opreate_RequestWsk_GDY)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_RefreshCardsGdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_RefreshCardsGdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_SendCardsGdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_SendCardsGdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_OutCardDataGdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_OutCardDataGdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_PukeGameEndGdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_PukeGameEndGdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_TableResponse_Gdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_TableResponse_Gdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_GameStart_Gdy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_GameStart_Gdy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_OutCardData_Request_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_OutCardData_Request_GDY_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_QiePaiResult_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_QiePaiResult_GDY_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_QiePaiStart_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_QiePaiStart_GDY_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_CallBankerResponse_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_CallBankerResponse_GDY_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_CallBankerResult_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_CallBankerResult_GDY_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gdy_Opreate_RequestWsk_GDY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gdy_Opreate_RequestWsk_GDY_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022gdy/gdyProto.proto\022\003gdy\032\024basic/protoco" +
      "l.proto\032\022basic/common.proto\"\215\001\n\017RefreshC" +
      "ardsGdy\022\022\n\ncard_count\030\001 \003(\005\022\'\n\ncards_dat" +
      "a\030\002 \003(\0132\023.Int32ArrayResponse\022\027\n\017left_car" +
      "d_count\030\003 \001(\005\022\021\n\tgame_cell\030\004 \001(\005\022\021\n\ttime" +
      "s_num\030\005 \001(\005\"\233\001\n\014SendCardsGdy\022\022\n\ncard_cou" +
      "nt\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\027\n\017hand_car" +
      "d_count\030\003 \001(\005\022\027\n\017hand_cards_data\030\004 \003(\005\022\030" +
      "\n\020send_card_player\030\005 \001(\005\022\027\n\017left_card_co" +
      "unt\030\006 \001(\005\"\346\003\n\016OutCardDataGdy\022\027\n\017out_card",
      "_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021cha" +
      "nge_cards_data\030\003 \003(\005\022\023\n\013cards_count\030\004 \001(" +
      "\005\022\021\n\tcard_type\030\005 \001(\005\022\022\n\ncur_player\030\006 \001(\005" +
      "\022\025\n\rpr_cards_data\030\007 \003(\005\022\034\n\024pr_change_car" +
      "ds_data\030\010 \003(\005\022\026\n\016pr_cards_count\030\t \001(\005\022\030\n" +
      "\020pr_out_card_type\030\n \001(\005\022\024\n\014is_first_out\030" +
      "\013 \001(\005\022\024\n\014display_time\030\014 \001(\005\022\034\n\024is_curren" +
      "t_first_out\030\r \001(\005\022\031\n\021cur_player_ya_pai\030\016" +
      " \001(\005\022\027\n\017hand_card_count\030\017 \003(\005\022,\n\017hand_ca" +
      "rds_data\030\020 \003(\0132\023.Int32ArrayResponse\022\027\n\017l",
      "eft_card_count\030\021 \001(\005\022\021\n\tgame_cell\030\022 \001(\005\022" +
      "\021\n\ttimes_num\030\023 \001(\005\"\373\002\n\016PukeGameEndGdy\022\034\n" +
      "\troom_info\030\001 \001(\0132\t.RoomInfo\022\021\n\tcur_round" +
      "\030\002 \001(\005\022\022\n\ngame_round\030\003 \001(\005\022\022\n\ncard_count" +
      "\030\004 \003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.Int32ArrayR" +
      "esponse\022\021\n\ttimes_num\030\006 \003(\005\022\021\n\tend_score\030" +
      "\007 \003(\005\022\022\n\nplayer_num\030\010 \001(\005\022\021\n\tgame_cell\030\017" +
      " \001(\005\022\016\n\006reason\030\t \001(\005\022\023\n\013is_bei_guan\030\020 \003(" +
      "\005\022\025\n\rall_end_score\030\n \003(\005\022\025\n\rend_score_ma" +
      "x\030\013 \003(\005\022\017\n\007win_num\030\014 \003(\005\022\020\n\010lose_num\030\r \003",
      "(\005\022$\n\007players\030\016 \003(\0132\023.RoomPlayerResponse" +
      "\"\274\005\n\021TableResponse_Gdy\022\025\n\rbanker_player\030" +
      "\001 \001(\005\022\026\n\016current_player\030\002 \001(\005\022\023\n\013prev_pl" +
      "ayer\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016out_cards" +
      "_data\030\005 \003(\0132\023.Int32ArrayResponse\0222\n\025out_" +
      "change_cards_data\030\006 \003(\0132\023.Int32ArrayResp" +
      "onse\022\027\n\017out_cards_count\030\007 \003(\005\022\023\n\013player_" +
      "pass\030\010 \003(\005\022\021\n\tcard_type\030\t \003(\005\022\032\n\022pr_out_" +
      "card_player\030\n \001(\005\022\025\n\rpr_cards_data\030\013 \003(\005" +
      "\022\034\n\024pr_change_cards_data\030\014 \003(\005\022\026\n\016pr_car",
      "ds_count\030\r \001(\005\022\030\n\020pr_out_card_type\030\016 \001(\005" +
      "\022\024\n\014is_first_out\030\017 \001(\005\022\024\n\014display_time\030\021" +
      " \001(\005\022\034\n\troom_info\030\022 \001(\0132\t.RoomInfo\022$\n\007pl" +
      "ayers\030\023 \003(\0132\023.RoomPlayerResponse\022\034\n\024is_c" +
      "urrent_first_out\030\024 \001(\005\022\031\n\021cur_player_ya_" +
      "pai\030\025 \001(\005\022\027\n\017hand_card_count\030\026 \003(\005\022,\n\017ha" +
      "nd_cards_data\030\027 \003(\0132\023.Int32ArrayResponse" +
      "\022\027\n\017left_card_count\030\030 \001(\005\022\021\n\tgame_cell\030\031" +
      " \001(\005\022\021\n\ttimes_num\030\032 \001(\005\"\221\002\n\rGameStart_Gd" +
      "y\022\034\n\troom_info\030\005 \001(\0132\t.RoomInfo\022$\n\007playe",
      "rs\030\006 \003(\0132\023.RoomPlayerResponse\022\022\n\ncur_ban" +
      "ker\030\001 \001(\005\022\022\n\ncard_count\030\002 \003(\005\022\'\n\ncards_d" +
      "ata\030\003 \003(\0132\023.Int32ArrayResponse\022\024\n\014displa" +
      "y_time\030\004 \001(\005\022\027\n\017left_card_count\030\007 \001(\005\022\021\n" +
      "\tgame_cell\030\010 \001(\005\022\021\n\ttimes_num\030\t \001(\005\022\026\n\016m" +
      "in_card_value\030\n \001(\005\"w\n\027OutCardData_Reque" +
      "st_GDY\022\021\n\tout_cards\030\001 \003(\005\022\026\n\016out_card_co" +
      "unt\030\002 \001(\005\022\030\n\020change_out_cards\030\003 \003(\005\022\027\n\017b" +
      "_out_card_type\030\004 \001(\005\"<\n\020QiePaiResult_GDY" +
      "\022\024\n\014qiepai_chair\030\001 \001(\005\022\022\n\ncard_index\030\002 \001",
      "(\005\"\230\001\n\017QiePaiStart_GDY\022\024\n\014qiepai_chair\030\001" +
      " \001(\005\022\024\n\014display_time\030\002 \001(\005\022\034\n\troom_info\030" +
      "\003 \001(\0132\t.RoomInfo\022$\n\007players\030\004 \003(\0132\023.Room" +
      "PlayerResponse\022\025\n\rbanker_player\030\005 \001(\005\"q\n" +
      "\026CallBankerResponse_GDY\022\027\n\017all_call_acti" +
      "on\030\001 \003(\005\022\023\n\013call_player\030\003 \001(\005\022\023\n\013call_ac" +
      "tion\030\004 \001(\005\022\024\n\014display_time\030\002 \001(\005\";\n\024Call" +
      "BankerResult_GDY\022\023\n\013call_action\030\001 \003(\005\022\016\n" +
      "\006banker\030\002 \001(\005\"B\n\026Opreate_RequestWsk_GDY\022" +
      "\024\n\014opreate_type\030\001 \001(\005\022\022\n\ncard_index\030\002 \001(",
      "\005B\034\n\022protobuf.clazz.gdyB\006gdyRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gdy_RefreshCardsGdy_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gdy_RefreshCardsGdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_RefreshCardsGdy_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "LeftCardCount", "GameCell", "TimesNum", });
          internal_static_gdy_SendCardsGdy_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_gdy_SendCardsGdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_SendCardsGdy_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "HandCardCount", "HandCardsData", "SendCardPlayer", "LeftCardCount", });
          internal_static_gdy_OutCardDataGdy_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_gdy_OutCardDataGdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_OutCardDataGdy_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "IsCurrentFirstOut", "CurPlayerYaPai", "HandCardCount", "HandCardsData", "LeftCardCount", "GameCell", "TimesNum", });
          internal_static_gdy_PukeGameEndGdy_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_gdy_PukeGameEndGdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_PukeGameEndGdy_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "TimesNum", "EndScore", "PlayerNum", "GameCell", "Reason", "IsBeiGuan", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", });
          internal_static_gdy_TableResponse_Gdy_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_gdy_TableResponse_Gdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_TableResponse_Gdy_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "RoomInfo", "Players", "IsCurrentFirstOut", "CurPlayerYaPai", "HandCardCount", "HandCardsData", "LeftCardCount", "GameCell", "TimesNum", });
          internal_static_gdy_GameStart_Gdy_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_gdy_GameStart_Gdy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_GameStart_Gdy_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "DisplayTime", "LeftCardCount", "GameCell", "TimesNum", "MinCardValue", });
          internal_static_gdy_OutCardData_Request_GDY_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_gdy_OutCardData_Request_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_OutCardData_Request_GDY_descriptor,
              new java.lang.String[] { "OutCards", "OutCardCount", "ChangeOutCards", "BOutCardType", });
          internal_static_gdy_QiePaiResult_GDY_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_gdy_QiePaiResult_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_QiePaiResult_GDY_descriptor,
              new java.lang.String[] { "QiepaiChair", "CardIndex", });
          internal_static_gdy_QiePaiStart_GDY_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_gdy_QiePaiStart_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_QiePaiStart_GDY_descriptor,
              new java.lang.String[] { "QiepaiChair", "DisplayTime", "RoomInfo", "Players", "BankerPlayer", });
          internal_static_gdy_CallBankerResponse_GDY_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_gdy_CallBankerResponse_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_CallBankerResponse_GDY_descriptor,
              new java.lang.String[] { "AllCallAction", "CallPlayer", "CallAction", "DisplayTime", });
          internal_static_gdy_CallBankerResult_GDY_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_gdy_CallBankerResult_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_CallBankerResult_GDY_descriptor,
              new java.lang.String[] { "CallAction", "Banker", });
          internal_static_gdy_Opreate_RequestWsk_GDY_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_gdy_Opreate_RequestWsk_GDY_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gdy_Opreate_RequestWsk_GDY_descriptor,
              new java.lang.String[] { "OpreateType", "CardIndex", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
          protobuf.clazz.Common.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
